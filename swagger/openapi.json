{
  "openapi": "3.0.0",
  "info": {
    "title": "Tradovate API",
    "description": "# Getting Started With the Tradovate API\nThe Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions.\nThere are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the\nTradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).\n\n## Place and Modify Orders\nThe Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application\nis also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.\n\n## Query Positions, Contracts, Maturities and More\nFrom the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by\nbrowsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.\n\n## Query Account Data\nUsing our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access\naccount trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.\n\n## Manage Risk\nWe can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting,\nand modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.\n\n## Access Alert and Live Chat Functions\nYou can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from \nthe REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as\n'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.\n\n## How Do I Use the Tradovate REST API?\nIn order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well:\n- You need a LIVE account with more than $1000 in equity.\n- You need a subscription to API Access.\n- You'll need to generate an API Key.\n\nThen you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://demo.tradovateapi.com/v1"
    }
  ],
  "paths": {
    "/auth/accesstokenrequest": {
      "post": {
        "description": "#### Request an access token using your user credentials and API Key. \n\nSee the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.\n\n### Acquiring an Access Token\n\n```js\nconst URL = 'https://live.tradovateapi.com/v1'\n\nconst credentials = {\n    name:       \"Your credentials here\",\n    password:   \"Your credentials here\",\n    appId:      \"Sample App\",\n    appVersion: \"1.0\",\n    cid:        0,\n    sec:        \"Your API secret here\"\n}\n\nasync function getAccessToken() {\n    let response = await fetch(URL + '/auth/accessTokenRequest', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n    let result = await response.json()\n    return result // { accessToken, mdAccessToken, userId, ... }\n}\n\n//...\n\nasync function main() {\n    const { accessToken, mdAccessToken, userId } = await getAccessToken()\n\n    //use access token\n}\n```\n\n### Using an Access Token\n\n```js\n//use the Authorization: Bearer schema in API POST and GET requests\n\n//simple /account/list endpoint requires no body or query\nasync function getAccounts() {\n    let response = await fetch(URL + '/account/list', {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}` //Access Token use in HTTP requests\n        }\n    })\n    let result = await response.json()\n    return result\n}\n\n```",
        "operationId": "accessTokenRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenRequest"
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "AccessTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "description": "### Shows Basic user data for the calling user.",
        "operationId": "me",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OAuthMeResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthMeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauthtoken": {
      "post": {
        "description": "### Used to exchange your OAuth code for an access token.\nUsing the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).",
        "operationId": "oAuthToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthToken"
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OAuthTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/renewaccesstoken": {
      "get": {
        "description": "### Request a renewal for an existing access token.",
        "operationId": "renewAccessToken",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "AccessTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contract/deps": {
      "get": {
        "description": "Retrieves all entities of Contract type related to ContractMaturity entity",
        "operationId": "contractDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of ContractMaturity entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contract/find": {
      "get": {
        "description": "Retrieves an entity of Contract type by its name",
        "operationId": "contractFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          }
        }
      }
    },
    "/contract/getproductfeeparams": {
      "post": {
        "description": "### Query the a product's fee parameters.",
        "operationId": "getProductFeeParams",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProductFeeParams"
              }
            }
          }
        },
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ProductFeeParamsResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFeeParamsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contract/item": {
      "get": {
        "description": "Retrieves an entity of Contract type by its id",
        "operationId": "contractItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          }
        }
      }
    },
    "/contract/items": {
      "get": {
        "description": "Retrieves multiple entities of Contract type by its ids",
        "operationId": "contractItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contract/ldeps": {
      "get": {
        "description": "Retrieves all entities of Contract type related to multiple entities of ContractMaturity type",
        "operationId": "contractLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of ContractMaturity entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contract/rollcontract": {
      "post": {
        "description": "### Request the best upcoming maturity date for a given contract.",
        "operationId": "rollContract",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RollContract"
              }
            }
          }
        },
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "RollContractResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RollContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contract/rollcontracts": {
      "post": {
        "description": "",
        "operationId": "rollContracts",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RollContracts"
              }
            }
          }
        },
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "RollContractsResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RollContractsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contract/suggest": {
      "get": {
        "description": "Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields",
        "operationId": "contractSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Contract",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractGroup/find": {
      "get": {
        "description": "Retrieves an entity of ContractGroup type by its name",
        "operationId": "contractGroupFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractGroup"
                }
              }
            }
          }
        }
      }
    },
    "/contractGroup/item": {
      "get": {
        "description": "Retrieves an entity of ContractGroup type by its id",
        "operationId": "contractGroupItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractGroup"
                }
              }
            }
          }
        }
      }
    },
    "/contractGroup/items": {
      "get": {
        "description": "Retrieves multiple entities of ContractGroup type by its ids",
        "operationId": "contractGroupItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractGroup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractGroup/list": {
      "get": {
        "description": "Retrieves all entities of ContractGroup type",
        "operationId": "contractGroupList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractGroup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractGroup/suggest": {
      "get": {
        "description": "Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields",
        "operationId": "contractGroupSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractGroup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMaturity/deps": {
      "get": {
        "description": "Retrieves all entities of ContractMaturity type related to Product entity",
        "operationId": "contractMaturityDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Product entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractMaturity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMaturity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMaturity/item": {
      "get": {
        "description": "Retrieves an entity of ContractMaturity type by its id",
        "operationId": "contractMaturityItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractMaturity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractMaturity"
                }
              }
            }
          }
        }
      }
    },
    "/contractMaturity/items": {
      "get": {
        "description": "Retrieves multiple entities of ContractMaturity type by its ids",
        "operationId": "contractMaturityItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractMaturity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMaturity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMaturity/ldeps": {
      "get": {
        "description": "Retrieves all entities of ContractMaturity type related to multiple entities of Product type",
        "operationId": "contractMaturityLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Product entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ContractMaturity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMaturity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currency/find": {
      "get": {
        "description": "Retrieves an entity of Currency type by its name",
        "operationId": "currencyFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          }
        }
      }
    },
    "/currency/item": {
      "get": {
        "description": "Retrieves an entity of Currency type by its id",
        "operationId": "currencyItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          }
        }
      }
    },
    "/currency/items": {
      "get": {
        "description": "Retrieves multiple entities of Currency type by its ids",
        "operationId": "currencyItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currency/list": {
      "get": {
        "description": "Retrieves all entities of Currency type",
        "operationId": "currencyList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currency/suggest": {
      "get": {
        "description": "Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields",
        "operationId": "currencySuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currencyRate/deps": {
      "get": {
        "description": "Retrieves all entities of CurrencyRate type related to Currency entity",
        "operationId": "currencyRateDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Currency entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "CurrencyRate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currencyRate/item": {
      "get": {
        "description": "Retrieves an entity of CurrencyRate type by its id",
        "operationId": "currencyRateItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "CurrencyRate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRate"
                }
              }
            }
          }
        }
      }
    },
    "/currencyRate/items": {
      "get": {
        "description": "Retrieves multiple entities of CurrencyRate type by its ids",
        "operationId": "currencyRateItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "CurrencyRate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currencyRate/ldeps": {
      "get": {
        "description": "Retrieves all entities of CurrencyRate type related to multiple entities of Currency type",
        "operationId": "currencyRateLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Currency entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "CurrencyRate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currencyRate/list": {
      "get": {
        "description": "Retrieves all entities of CurrencyRate type",
        "operationId": "currencyRateList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "CurrencyRate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exchange/find": {
      "get": {
        "description": "Retrieves an entity of Exchange type by its name",
        "operationId": "exchangeFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Exchange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/item": {
      "get": {
        "description": "Retrieves an entity of Exchange type by its id",
        "operationId": "exchangeItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Exchange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/items": {
      "get": {
        "description": "Retrieves multiple entities of Exchange type by its ids",
        "operationId": "exchangeItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Exchange",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Exchange"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exchange/list": {
      "get": {
        "description": "Retrieves all entities of Exchange type",
        "operationId": "exchangeList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Exchange",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Exchange"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exchange/suggest": {
      "get": {
        "description": "Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields",
        "operationId": "exchangeSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Exchange",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Exchange"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/deps": {
      "get": {
        "description": "Retrieves all entities of Product type related to Exchange entity",
        "operationId": "productDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Exchange entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/find": {
      "get": {
        "description": "Retrieves an entity of Product type by its name",
        "operationId": "productFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/product/item": {
      "get": {
        "description": "Retrieves an entity of Product type by its id",
        "operationId": "productItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/product/items": {
      "get": {
        "description": "Retrieves multiple entities of Product type by its ids",
        "operationId": "productItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/ldeps": {
      "get": {
        "description": "Retrieves all entities of Product type related to multiple entities of Exchange type",
        "operationId": "productLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Exchange entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/list": {
      "get": {
        "description": "Retrieves all entities of Product type",
        "operationId": "productList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/suggest": {
      "get": {
        "description": "Retrieves entities of Product type filtered by an occurrence of a text in one of its fields",
        "operationId": "productSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productSession/deps": {
      "get": {
        "description": "Retrieves all entities of ProductSession type related to Product entity",
        "operationId": "productSessionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Product entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ProductSession",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productSession/item": {
      "get": {
        "description": "Retrieves an entity of ProductSession type by its id",
        "operationId": "productSessionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ProductSession",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSession"
                }
              }
            }
          }
        }
      }
    },
    "/productSession/items": {
      "get": {
        "description": "Retrieves multiple entities of ProductSession type by its ids",
        "operationId": "productSessionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ProductSession",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productSession/ldeps": {
      "get": {
        "description": "Retrieves all entities of ProductSession type related to multiple entities of Product type",
        "operationId": "productSessionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Product entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "ProductSession",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/spreadDefinition/item": {
      "get": {
        "description": "Retrieves an entity of SpreadDefinition type by its id",
        "operationId": "spreadDefinitionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "SpreadDefinition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpreadDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/spreadDefinition/items": {
      "get": {
        "description": "Retrieves multiple entities of SpreadDefinition type by its ids",
        "operationId": "spreadDefinitionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "ContractLibrary"
        ],
        "responses": {
          "200": {
            "description": "SpreadDefinition",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpreadDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command/deps": {
      "get": {
        "description": "Retrieves all entities of Command type related to Order entity",
        "operationId": "commandDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Order entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Command"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command/item": {
      "get": {
        "description": "Retrieves an entity of Command type by its id",
        "operationId": "commandItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          }
        }
      }
    },
    "/command/items": {
      "get": {
        "description": "Retrieves multiple entities of Command type by its ids",
        "operationId": "commandItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Command"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command/ldeps": {
      "get": {
        "description": "Retrieves all entities of Command type related to multiple entities of Order type",
        "operationId": "commandLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Order entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Command"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command/list": {
      "get": {
        "description": "Retrieves all entities of Command type",
        "operationId": "commandList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Command"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commandReport/deps": {
      "get": {
        "description": "Retrieves all entities of CommandReport type related to Command entity",
        "operationId": "commandReportDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Command entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commandReport/item": {
      "get": {
        "description": "Retrieves an entity of CommandReport type by its id",
        "operationId": "commandReportItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandReport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReport"
                }
              }
            }
          }
        }
      }
    },
    "/commandReport/items": {
      "get": {
        "description": "Retrieves multiple entities of CommandReport type by its ids",
        "operationId": "commandReportItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commandReport/ldeps": {
      "get": {
        "description": "Retrieves all entities of CommandReport type related to multiple entities of Command type",
        "operationId": "commandReportLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Command entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commandReport/list": {
      "get": {
        "description": "Retrieves all entities of CommandReport type",
        "operationId": "commandReportList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/deps": {
      "get": {
        "description": "Retrieves all entities of ExecutionReport type related to Command entity",
        "operationId": "executionReportDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Command entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/find": {
      "get": {
        "description": "Retrieves an entity of ExecutionReport type by its name",
        "operationId": "executionReportFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionReport"
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/item": {
      "get": {
        "description": "Retrieves an entity of ExecutionReport type by its id",
        "operationId": "executionReportItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionReport"
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/items": {
      "get": {
        "description": "Retrieves multiple entities of ExecutionReport type by its ids",
        "operationId": "executionReportItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/ldeps": {
      "get": {
        "description": "Retrieves all entities of ExecutionReport type related to multiple entities of Command type",
        "operationId": "executionReportLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Command entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/list": {
      "get": {
        "description": "Retrieves all entities of ExecutionReport type",
        "operationId": "executionReportList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/executionReport/suggest": {
      "get": {
        "description": "Retrieves entities of ExecutionReport type filtered by an occurrence of a text in one of its fields",
        "operationId": "executionReportSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "ExecutionReport",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fill/deps": {
      "get": {
        "description": "Retrieves all entities of Fill type related to Order entity",
        "operationId": "fillDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Order entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Fill",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fill"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fill/item": {
      "get": {
        "description": "Retrieves an entity of Fill type by its id",
        "operationId": "fillItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Fill",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fill"
                }
              }
            }
          }
        }
      }
    },
    "/fill/items": {
      "get": {
        "description": "Retrieves multiple entities of Fill type by its ids",
        "operationId": "fillItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Fill",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fill"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fill/ldeps": {
      "get": {
        "description": "Retrieves all entities of Fill type related to multiple entities of Order type",
        "operationId": "fillLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Order entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Fill",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fill"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fill/list": {
      "get": {
        "description": "Retrieves all entities of Fill type",
        "operationId": "fillList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Fill",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fill"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillFee/deps": {
      "get": {
        "description": "Retrieves all entities of FillFee type related to Fill entity",
        "operationId": "fillFeeDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Fill entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "FillFee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillFee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillFee/item": {
      "get": {
        "description": "Retrieves an entity of FillFee type by its id",
        "operationId": "fillFeeItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "FillFee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FillFee"
                }
              }
            }
          }
        }
      }
    },
    "/fillFee/items": {
      "get": {
        "description": "Retrieves multiple entities of FillFee type by its ids",
        "operationId": "fillFeeItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "FillFee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillFee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillFee/ldeps": {
      "get": {
        "description": "Retrieves all entities of FillFee type related to multiple entities of Fill type",
        "operationId": "fillFeeLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Fill entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "FillFee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillFee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillFee/list": {
      "get": {
        "description": "Retrieves all entities of FillFee type",
        "operationId": "fillFeeList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "FillFee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillFee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/cancelorder": {
      "post": {
        "description": "### Make a request to cancel an order.",
        "operationId": "cancelOrder",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrder"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/deps": {
      "get": {
        "description": "Retrieves all entities of Order type related to Account entity",
        "operationId": "orderDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/item": {
      "get": {
        "description": "Retrieves an entity of Order type by its id",
        "operationId": "orderItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/order/items": {
      "get": {
        "description": "Retrieves multiple entities of Order type by its ids",
        "operationId": "orderItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/ldeps": {
      "get": {
        "description": "Retrieves all entities of Order type related to multiple entities of Account type",
        "operationId": "orderLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/liquidateposition": {
      "post": {
        "description": "### Send a request to cancel orders for a specific contract and close that position for the given account.\nThis request initiates the cancellation process of open orders for an existing position held by this account.\n> Note: This is a request to cancel orders and close a position, not a guarantee. Any operation could fail for a number of reasons, ranging from Exchange rejection to incorrect parameterization.\n",
        "operationId": "liquidatePosition",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiquidatePosition"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "PlaceOrderResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/list": {
      "get": {
        "description": "Retrieves all entities of Order type",
        "operationId": "orderList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/modifyorder": {
      "post": {
        "description": "### Make a request to modify the parameters of an order.\nYou can request changes to an order, such as the trigger price for a Stop or Limit order.\n> *Note*: This is no guarantee that the order can be modified in the way requests. Market, exchange and logical rules apply. ",
        "operationId": "modifyOrder",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyOrder"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "CommandResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/placeoco": {
      "post": {
        "description": "### Place a Order Cancels Order order strategy.\nOCO order strategies link 2 orders together such that if one order is filled, the other order is cancelled. You must provide an `other` parameter pertaining to the order linked to this one. The `other` must specify an `action` and an `orderType` which determines the other parameters that must be set. For example a Limit or Stop order must use the `price` parameter, but a Stop-Limit will require a `price` and a `stopPrice`. Below is an example of an OCO that either sells to take profit at 4200 points, or sells to stop loss at 4100 points.\n\n```js\nconst URL = 'demo.tradovateapi.com/v1'\nconst limit = {\n    action: 'Sell',\n    orderType: 'Limit',\n    price: 4200.00\n}\nconst oco = {\n    accountSpec: yourUserName,\n    accountId: yourAcctId,\n    action: \"Buy\",\n    symbol: \"MESM1\",\n    orderQty: 1,\n    orderType: \"Stop\",\n    price: 4100.00\n    isAutomated: true, //must be true if this isn't an order made directly by a human\n    other: limit\n}\n\nconst response = await fetch(URL + '/order/placeoco', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`,\n    },\n    body: JSON.stringify(oco)\n})\n\nconst json = await response.json() // { orderId: 0000000, ocoId: 0000000 }\n```",
        "operationId": "placeOCO",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOCO"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "PlaceOcoResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOcoResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/placeorder": {
      "post": {
        "description": "### Make a request to place an order. \nDepending on the order type, the parameters vary. In the Trader application, you can see the details of placing a standard order ticket by adding the Order Ticket module to your workspace.\n\n#### *Market Order*\n```js\nconst URL = 'demo.tradovateapi.com/v1'\nconst body = {\n    accountSpec: yourUserName,\n    accountId: yourAcctId,\n    action: \"Buy\",\n    symbol: \"MYMM1\",\n    orderQty: 1,\n    orderType: \"Market\",\n    isAutomated: true //must be true if this isn't an order made directly by a human\n}\n\nconst response = await fetch(URL + '/order/placeorder', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`,\n    },\n    body: JSON.stringify(body)\n})\n\nconst json = await response.json() // { orderId: 0000000 }\n\n```\n\n#### *Sell Limit*\n```js\nconst URL = 'demo.tradovateapi.com/v1'\nconst body = {\n    accountSpec: yourUserName,\n    accountId: yourAcctId,\n    action: \"Sell\",\n    symbol: \"MYMM1\",\n    orderQty: 1,\n    orderType: \"Limit\",\n    price: 35000, //use for single value like limit or stop\n    isAutomated: true //must be true if this isn't an order made directly by a human\n}\n\nconst response = await fetch(URL + '/order/placeorder', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`,\n    },\n    body: JSON.stringify(body)\n})\n\nconst json = await response.json() // { orderId: 0000000 }\n\n```\n",
        "operationId": "placeOrder",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrder"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "PlaceOrderResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/placeoso": {
      "post": {
        "description": "### Place an Order Sends Order order strategy.\nIn the Trader application, the details of OSO orders can be viewed by adding the Order Ticket module to your workspace and selecting the Advanced workspace options with Brackets enabled. OSO orders allow for the most complex multi-bracket trading strategies. As an example, imagine MESM1 is trading around 4175.00 points. You want to place a Buy order for 4150.00 points, buying below market. We place an OSO to take profits at 4200.00 points. If the initial order is filled, the `bracket1` order will be sent. Below is an example in JavaScript:\n\n```js\nconst URL = 'demo.tradovateapi.com/v1'\n\nconst oso = {\n    action: 'Sell',\n    orderType: 'Limit',\n    price: 4200.00,\n}\n\nconst initial = {\n    accountSpec: yourUserName,\n    accountId: yourAcctId,\n    action: \"Buy\",\n    symbol: \"MESM1\",\n    orderQty: 1,\n    orderType: \"Limit\",\n    price: 4150.00,\n    isAutomated: true //must be true if this isn't an order made directly by a human\n    bracket1: oso\n}\n\nconst response = await fetch(URL + '/order/placeOSO', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`,\n    },\n    body: JSON.stringify(initial)\n})\n\nconst json = await response.json() // { orderId: 0000000 }\n```\n\n>*Note:* If you specify both `bracket1` and `bracket2` the two orders will be linked as an OCO, where filling one will cancel the other.",
        "operationId": "placeOSO",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOSO"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "PlaceOsoResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOsoResult"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/deps": {
      "get": {
        "description": "Retrieves all entities of OrderStrategy type related to Account entity",
        "operationId": "orderStrategyDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/interruptorderstrategy": {
      "post": {
        "description": "### Stop a running multi-bracket strategy.",
        "operationId": "interruptOrderStrategy",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterruptOrderStrategy"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyStatusResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/item": {
      "get": {
        "description": "Retrieves an entity of OrderStrategy type by its id",
        "operationId": "orderStrategyItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategy"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/items": {
      "get": {
        "description": "Retrieves multiple entities of OrderStrategy type by its ids",
        "operationId": "orderStrategyItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/ldeps": {
      "get": {
        "description": "Retrieves all entities of OrderStrategy type related to multiple entities of Account type",
        "operationId": "orderStrategyLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/list": {
      "get": {
        "description": "Retrieves all entities of OrderStrategy type",
        "operationId": "orderStrategyList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/modifyorderstrategy": {
      "post": {
        "description": "### Modify an existing Order Strategy",
        "operationId": "modifyOrderStrategy",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyOrderStrategy"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyStatusResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategy/startorderstrategy": {
      "post": {
        "description": "### Start a multi-bracket trading strategy.\nThis endpoint is used with a WebSocket. You can create any number of brackets and add them to `brackets` field on the `params` object as a JSON string.\n\n```js\n\nconst URL = 'wss://demo.tradovateapi.com/v1/websocket'\n\nconst params = {\n    entryVersion: {\n        orderQty: 1,\n        orderType: \"Market\"\n    },\n    brackets: [{\n        qty: 1,\n        profitTarget: -30,\n        stopLoss: 15,\n        trailingStop: false\n    }]\n}\n\nconst body = {\n    accountId: myAcctId,\n    accountSpec: name,\n    symbol: 'MESM1',\n    action: 'Sell',\n    orderStrategyTypeId: 2, //2 is 'multibracket', we currently only offer this strategy but more may exist in the future.\n    params: JSON.stringify(params)\n}\n\nconst mySocket = new WebSocket(URL)\n\n//authorize socket using your access token\nmySocket.onopen = function() {\n    mySocket.send(`authorize\\n0\\n\\n${accessToken}`)\n}\n\nmySocket.send(`orderstrategy/startorderstrategy\\n4\\n\\n${JSON.stringify(body)}`)\n\n```\n\nFor more details about working with advanced order types, see [placeOrder](/#operation/placeOrder), [placeOCO](/#operation/placeOCO), and [placeOSO](/#operation/placeOSO). \n",
        "operationId": "startOrderStrategy",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartOrderStrategy"
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyStatusResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyLink/deps": {
      "get": {
        "description": "Retrieves all entities of OrderStrategyLink type related to OrderStrategy entity",
        "operationId": "orderStrategyLinkDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of OrderStrategy entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyLink",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyLink"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyLink/item": {
      "get": {
        "description": "Retrieves an entity of OrderStrategyLink type by its id",
        "operationId": "orderStrategyLinkItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyLink",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyLink"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyLink/items": {
      "get": {
        "description": "Retrieves multiple entities of OrderStrategyLink type by its ids",
        "operationId": "orderStrategyLinkItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyLink",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyLink"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyLink/ldeps": {
      "get": {
        "description": "Retrieves all entities of OrderStrategyLink type related to multiple entities of OrderStrategy type",
        "operationId": "orderStrategyLinkLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of OrderStrategy entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyLink",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyLink"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyLink/list": {
      "get": {
        "description": "Retrieves all entities of OrderStrategyLink type",
        "operationId": "orderStrategyLinkList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyLink",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyLink"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderVersion/deps": {
      "get": {
        "description": "Retrieves all entities of OrderVersion type related to Order entity",
        "operationId": "orderVersionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Order entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderVersion/item": {
      "get": {
        "description": "Retrieves an entity of OrderVersion type by its id",
        "operationId": "orderVersionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderVersion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderVersion"
                }
              }
            }
          }
        }
      }
    },
    "/orderVersion/items": {
      "get": {
        "description": "Retrieves multiple entities of OrderVersion type by its ids",
        "operationId": "orderVersionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderVersion/ldeps": {
      "get": {
        "description": "Retrieves all entities of OrderVersion type related to multiple entities of Order type",
        "operationId": "orderVersionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Order entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderVersion/list": {
      "get": {
        "description": "Retrieves all entities of OrderVersion type",
        "operationId": "orderVersionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillPair/deps": {
      "get": {
        "description": "Retrieves all entities of FillPair type related to Position entity",
        "operationId": "fillPairDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Position entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "FillPair",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillPair"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillPair/item": {
      "get": {
        "description": "Retrieves an entity of FillPair type by its id",
        "operationId": "fillPairItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "FillPair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FillPair"
                }
              }
            }
          }
        }
      }
    },
    "/fillPair/items": {
      "get": {
        "description": "Retrieves multiple entities of FillPair type by its ids",
        "operationId": "fillPairItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "FillPair",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillPair"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillPair/ldeps": {
      "get": {
        "description": "Retrieves all entities of FillPair type related to multiple entities of Position type",
        "operationId": "fillPairLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Position entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "FillPair",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillPair"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fillPair/list": {
      "get": {
        "description": "Retrieves all entities of FillPair type",
        "operationId": "fillPairList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "FillPair",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FillPair"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/position/deps": {
      "get": {
        "description": "Retrieves all entities of Position type related to Account entity",
        "operationId": "positionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/position/find": {
      "get": {
        "description": "Retrieves an entity of Position type by its name",
        "operationId": "positionFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Position"
                }
              }
            }
          }
        }
      }
    },
    "/position/item": {
      "get": {
        "description": "Retrieves an entity of Position type by its id",
        "operationId": "positionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Position"
                }
              }
            }
          }
        }
      }
    },
    "/position/items": {
      "get": {
        "description": "Retrieves multiple entities of Position type by its ids",
        "operationId": "positionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/position/ldeps": {
      "get": {
        "description": "Retrieves all entities of Position type related to multiple entities of Account type",
        "operationId": "positionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/position/list": {
      "get": {
        "description": "Retrieves all entities of Position type",
        "operationId": "positionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Positions"
        ],
        "responses": {
          "200": {
            "description": "Position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/deps": {
      "get": {
        "description": "Retrieves all entities of Account type related to User entity",
        "operationId": "accountDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/find": {
      "get": {
        "description": "Retrieves an entity of Account type by its name",
        "operationId": "accountFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/account/item": {
      "get": {
        "description": "Retrieves an entity of Account type by its id",
        "operationId": "accountItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/account/items": {
      "get": {
        "description": "Retrieves multiple entities of Account type by its ids",
        "operationId": "accountItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/ldeps": {
      "get": {
        "description": "Retrieves all entities of Account type related to multiple entities of User type",
        "operationId": "accountLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/list": {
      "get": {
        "description": "Retrieves all entities of Account type",
        "operationId": "accountList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/resetdemoaccountstate": {
      "post": {
        "description": "### Reset a demo account's state to a previous day\nReturn 1 or more simulation accounts to their state at market open on the given TradeDate date. ",
        "operationId": "resetDemoAccountState",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetDemoAccountState"
              }
            }
          }
        },
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "SimpleResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/suggest": {
      "get": {
        "description": "Retrieves entities of Account type filtered by an occurrence of a text in one of its fields",
        "operationId": "accountSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/deps": {
      "get": {
        "description": "Retrieves all entities of CashBalance type related to Account entity",
        "operationId": "cashBalanceDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/getcashbalancesnapshot": {
      "post": {
        "description": "### Get a snapshot of an account's current cash balance.\n> *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.",
        "operationId": "getCashBalanceSnapshot",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCashBalanceSnapshot"
              }
            }
          }
        },
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalanceSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashBalanceSnapshot"
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/item": {
      "get": {
        "description": "Retrieves an entity of CashBalance type by its id",
        "operationId": "cashBalanceItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashBalance"
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/items": {
      "get": {
        "description": "Retrieves multiple entities of CashBalance type by its ids",
        "operationId": "cashBalanceItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/ldeps": {
      "get": {
        "description": "Retrieves all entities of CashBalance type related to multiple entities of Account type",
        "operationId": "cashBalanceLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalance/list": {
      "get": {
        "description": "Retrieves all entities of CashBalance type",
        "operationId": "cashBalanceList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalanceLog/deps": {
      "get": {
        "description": "Retrieves all entities of CashBalanceLog type related to Account entity",
        "operationId": "cashBalanceLogDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalanceLog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalanceLog"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalanceLog/item": {
      "get": {
        "description": "Retrieves an entity of CashBalanceLog type by its id",
        "operationId": "cashBalanceLogItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalanceLog",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashBalanceLog"
                }
              }
            }
          }
        }
      }
    },
    "/cashBalanceLog/items": {
      "get": {
        "description": "Retrieves multiple entities of CashBalanceLog type by its ids",
        "operationId": "cashBalanceLogItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalanceLog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalanceLog"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cashBalanceLog/ldeps": {
      "get": {
        "description": "Retrieves all entities of CashBalanceLog type related to multiple entities of Account type",
        "operationId": "cashBalanceLogLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "CashBalanceLog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CashBalanceLog"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marginSnapshot/deps": {
      "get": {
        "description": "Retrieves all entities of MarginSnapshot type related to Account entity",
        "operationId": "marginSnapshotDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "MarginSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarginSnapshot"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marginSnapshot/item": {
      "get": {
        "description": "Retrieves an entity of MarginSnapshot type by its id",
        "operationId": "marginSnapshotItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "MarginSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarginSnapshot"
                }
              }
            }
          }
        }
      }
    },
    "/marginSnapshot/items": {
      "get": {
        "description": "Retrieves multiple entities of MarginSnapshot type by its ids",
        "operationId": "marginSnapshotItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "MarginSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarginSnapshot"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marginSnapshot/ldeps": {
      "get": {
        "description": "Retrieves all entities of MarginSnapshot type related to multiple entities of Account type",
        "operationId": "marginSnapshotLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "MarginSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarginSnapshot"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marginSnapshot/list": {
      "get": {
        "description": "Retrieves all entities of MarginSnapshot type",
        "operationId": "marginSnapshotList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "MarginSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarginSnapshot"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradingPermission/deps": {
      "get": {
        "description": "Retrieves all entities of TradingPermission type related to User entity",
        "operationId": "tradingPermissionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "TradingPermission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradingPermission"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradingPermission/item": {
      "get": {
        "description": "Retrieves an entity of TradingPermission type by its id",
        "operationId": "tradingPermissionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "TradingPermission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermission"
                }
              }
            }
          }
        }
      }
    },
    "/tradingPermission/items": {
      "get": {
        "description": "Retrieves multiple entities of TradingPermission type by its ids",
        "operationId": "tradingPermissionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "TradingPermission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradingPermission"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradingPermission/ldeps": {
      "get": {
        "description": "Retrieves all entities of TradingPermission type related to multiple entities of User type",
        "operationId": "tradingPermissionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "TradingPermission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradingPermission"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradingPermission/list": {
      "get": {
        "description": "Retrieves all entities of TradingPermission type",
        "operationId": "tradingPermissionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "TradingPermission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradingPermission"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accountRiskStatus/deps": {
      "get": {
        "description": "Retrieves all entities of AccountRiskStatus type related to Account entity",
        "operationId": "accountRiskStatusDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "AccountRiskStatus",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountRiskStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accountRiskStatus/item": {
      "get": {
        "description": "Retrieves an entity of AccountRiskStatus type by its id",
        "operationId": "accountRiskStatusItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "AccountRiskStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRiskStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountRiskStatus/items": {
      "get": {
        "description": "Retrieves multiple entities of AccountRiskStatus type by its ids",
        "operationId": "accountRiskStatusItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "AccountRiskStatus",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountRiskStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accountRiskStatus/ldeps": {
      "get": {
        "description": "Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type",
        "operationId": "accountRiskStatusLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "AccountRiskStatus",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountRiskStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accountRiskStatus/list": {
      "get": {
        "description": "Retrieves all entities of AccountRiskStatus type",
        "operationId": "accountRiskStatusList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "AccountRiskStatus",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountRiskStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMargin/deps": {
      "get": {
        "description": "Retrieves all entities of ContractMargin type related to Contract entity",
        "operationId": "contractMarginDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Contract entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ContractMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMargin/item": {
      "get": {
        "description": "Retrieves an entity of ContractMargin type by its id",
        "operationId": "contractMarginItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ContractMargin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractMargin"
                }
              }
            }
          }
        }
      }
    },
    "/contractMargin/items": {
      "get": {
        "description": "Retrieves multiple entities of ContractMargin type by its ids",
        "operationId": "contractMarginItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ContractMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contractMargin/ldeps": {
      "get": {
        "description": "Retrieves all entities of ContractMargin type related to multiple entities of Contract type",
        "operationId": "contractMarginLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Contract entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ContractMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productMargin/deps": {
      "get": {
        "description": "Retrieves all entities of ProductMargin type related to Product entity",
        "operationId": "productMarginDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Product entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ProductMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productMargin/item": {
      "get": {
        "description": "Retrieves an entity of ProductMargin type by its id",
        "operationId": "productMarginItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ProductMargin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMargin"
                }
              }
            }
          }
        }
      }
    },
    "/productMargin/items": {
      "get": {
        "description": "Retrieves multiple entities of ProductMargin type by its ids",
        "operationId": "productMarginItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ProductMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productMargin/ldeps": {
      "get": {
        "description": "Retrieves all entities of ProductMargin type related to multiple entities of Product type",
        "operationId": "productMarginLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Product entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ProductMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productMargin/list": {
      "get": {
        "description": "Retrieves all entities of ProductMargin type",
        "operationId": "productMarginList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "ProductMargin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMargin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/create": {
      "post": {
        "description": "Creates a new entity of UserAccountAutoLiq",
        "operationId": "userAccountAutoLiqCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountAutoLiq"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountAutoLiq"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/deps": {
      "get": {
        "description": "Retrieves all entities of UserAccountAutoLiq type related to Account entity",
        "operationId": "userAccountAutoLiqDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountAutoLiq"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/item": {
      "get": {
        "description": "Retrieves an entity of UserAccountAutoLiq type by its id",
        "operationId": "userAccountAutoLiqItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountAutoLiq"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/items": {
      "get": {
        "description": "Retrieves multiple entities of UserAccountAutoLiq type by its ids",
        "operationId": "userAccountAutoLiqItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountAutoLiq"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type",
        "operationId": "userAccountAutoLiqLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountAutoLiq"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/list": {
      "get": {
        "description": "Retrieves all entities of UserAccountAutoLiq type",
        "operationId": "userAccountAutoLiqList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountAutoLiq"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountAutoLiq/update": {
      "post": {
        "description": "Updates an existing entity of UserAccountAutoLiq",
        "operationId": "userAccountAutoLiqUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountAutoLiq"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountAutoLiq",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountAutoLiq"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/create": {
      "post": {
        "description": "Creates a new entity of UserAccountPositionLimit",
        "operationId": "userAccountPositionLimitCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountPositionLimit"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountPositionLimit"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/deleteuseraccountpositionlimit": {
      "post": {
        "description": "### Remove an account position limit for a user.",
        "operationId": "deleteUserAccountPositionLimit",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserAccountPositionLimit"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "DeleteResultResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/deleteuseraccountriskparameter": {
      "post": {
        "description": "### Remove a Risk Setting parameter.",
        "operationId": "deleteUserAccountRiskParameter",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserAccountRiskParameter"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "DeleteResultResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/deps": {
      "get": {
        "description": "Retrieves all entities of UserAccountPositionLimit type related to Account entity",
        "operationId": "userAccountPositionLimitDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Account entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountPositionLimit"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/item": {
      "get": {
        "description": "Retrieves an entity of UserAccountPositionLimit type by its id",
        "operationId": "userAccountPositionLimitItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountPositionLimit"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/items": {
      "get": {
        "description": "Retrieves multiple entities of UserAccountPositionLimit type by its ids",
        "operationId": "userAccountPositionLimitItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountPositionLimit"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type",
        "operationId": "userAccountPositionLimitLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Account entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountPositionLimit"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountPositionLimit/update": {
      "post": {
        "description": "Updates an existing entity of UserAccountPositionLimit",
        "operationId": "userAccountPositionLimitUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountPositionLimit"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountPositionLimit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountPositionLimit"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/create": {
      "post": {
        "description": "Creates a new entity of UserAccountRiskParameter",
        "operationId": "userAccountRiskParameterCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountRiskParameter"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountRiskParameter"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/deps": {
      "get": {
        "description": "Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity",
        "operationId": "userAccountRiskParameterDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of UserAccountPositionLimit entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountRiskParameter"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/item": {
      "get": {
        "description": "Retrieves an entity of UserAccountRiskParameter type by its id",
        "operationId": "userAccountRiskParameterItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountRiskParameter"
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/items": {
      "get": {
        "description": "Retrieves multiple entities of UserAccountRiskParameter type by its ids",
        "operationId": "userAccountRiskParameterItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountRiskParameter"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type",
        "operationId": "userAccountRiskParameterLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of UserAccountPositionLimit entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountRiskParameter"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userAccountRiskParameter/update": {
      "post": {
        "description": "Updates an existing entity of UserAccountRiskParameter",
        "operationId": "userAccountRiskParameterUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountRiskParameter"
              }
            }
          }
        },
        "tags": [
          "Risks"
        ],
        "responses": {
          "200": {
            "description": "UserAccountRiskParameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountRiskParameter"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionExchangeScope/find": {
      "get": {
        "description": "Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name",
        "operationId": "marketDataSubscriptionExchangeScopeFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionExchangeScope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscriptionExchangeScope"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionExchangeScope/item": {
      "get": {
        "description": "Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id",
        "operationId": "marketDataSubscriptionExchangeScopeItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionExchangeScope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscriptionExchangeScope"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionExchangeScope/items": {
      "get": {
        "description": "Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids",
        "operationId": "marketDataSubscriptionExchangeScopeItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionExchangeScope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionExchangeScope"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionExchangeScope/list": {
      "get": {
        "description": "Retrieves all entities of MarketDataSubscriptionExchangeScope type",
        "operationId": "marketDataSubscriptionExchangeScopeList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionExchangeScope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionExchangeScope"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionExchangeScope/suggest": {
      "get": {
        "description": "Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields",
        "operationId": "marketDataSubscriptionExchangeScopeSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionExchangeScope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionExchangeScope"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionPlan/find": {
      "get": {
        "description": "Retrieves an entity of MarketDataSubscriptionPlan type by its name",
        "operationId": "marketDataSubscriptionPlanFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscriptionPlan"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionPlan/item": {
      "get": {
        "description": "Retrieves an entity of MarketDataSubscriptionPlan type by its id",
        "operationId": "marketDataSubscriptionPlanItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscriptionPlan"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionPlan/items": {
      "get": {
        "description": "Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids",
        "operationId": "marketDataSubscriptionPlanItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionPlan/list": {
      "get": {
        "description": "Retrieves all entities of MarketDataSubscriptionPlan type",
        "operationId": "marketDataSubscriptionPlanList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscriptionPlan/suggest": {
      "get": {
        "description": "Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields",
        "operationId": "marketDataSubscriptionPlanSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscriptionPlan/find": {
      "get": {
        "description": "Retrieves an entity of TradovateSubscriptionPlan type by its name",
        "operationId": "tradovateSubscriptionPlanFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscriptionPlan"
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscriptionPlan/item": {
      "get": {
        "description": "Retrieves an entity of TradovateSubscriptionPlan type by its id",
        "operationId": "tradovateSubscriptionPlanItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscriptionPlan"
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscriptionPlan/items": {
      "get": {
        "description": "Retrieves multiple entities of TradovateSubscriptionPlan type by its ids",
        "operationId": "tradovateSubscriptionPlanItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscriptionPlan/list": {
      "get": {
        "description": "Retrieves all entities of TradovateSubscriptionPlan type",
        "operationId": "tradovateSubscriptionPlanList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscriptionPlan/suggest": {
      "get": {
        "description": "Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields",
        "operationId": "tradovateSubscriptionPlanSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Fees"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionPlan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscriptionPlan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/replay/changespeed": {
      "post": {
        "description": "### Change the playback speed of a Market Replay session.",
        "operationId": "changeSpeed",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSpeed"
              }
            }
          }
        },
        "tags": [
          "Prices"
        ],
        "responses": {
          "200": {
            "description": "SimpleResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/replay/checkreplaysession": {
      "post": {
        "description": "### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements.\nYou should use this endpoint from a WebSocket hooked up to the Market Replay URL.\n\n```js\n\nconst URL = 'wss://replay.tradovateapi.com/v1/websocket'\n\nconst myMarketReplaySocket = new WebSocket(URL)\n\n//simple WebSocket authorization procedure\nmyMarketReplaySocket.onopen = function() {\n    myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`)\n})\n\n//JSON string for midnight April 30th 2018\nconst startTimestamp = new Date('2018-04-30').toJSON()\nmyMarketReplaySocket.send(`replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}`)\n\n//listen for response\nmyMarketReplaySocket.addEventListener('message', msg => {\n    const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char\n    //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]\n    if(datas) {\n        datas.forEach(({i, d}) => {\n            if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.\n                console.log(d) //=> { checkStatus: 'OK' }\n                //if the status is OK we can send the initializeClock message\n            }\n        })\n    } \n}\n\n```",
        "operationId": "checkReplaySession",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckReplaySession"
              }
            }
          }
        },
        "tags": [
          "Prices"
        ],
        "responses": {
          "200": {
            "description": "CheckReplaySessionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckReplaySessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/replay/initializeclock": {
      "post": {
        "description": "### Set the inital date and time for a market replay session.\nUsing a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session.\n```js\n\nconst URL = 'wss://replay.tradovateapi.com/v1/websocket'\n\nconst myMarketReplaySocket = new WebSocket(URL)\n\n//simple WebSocket authorization procedure\nmyMarketReplaySocket.onOpen = function onOpen() {\n    myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`)\n})\n\nconst requestBody = {\n    startTimestamp: new Date('2018-04-30').toJSON(),\n    speed: 100, //100%, range is from 0-400%\n    initialBalance: 50000 //account balance for replay session\n}\n\nmyMarketReplaySocket.send(`replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}`)\n\nmyMarketReplaySocket.addEventListener('message', msg => {\n    const datas = JSON.parse(msg.data.slice(1))\n    if(datas) {\n        datas.forEach(({i, d}) => {\n            if(i && i === 1) { //sent id is 1, response id will be 1\n                console.log(d) //=> { ok: true }\n            }\n        })\n    }\n})\n\n```",
        "operationId": "initializeClock",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitializeClock"
              }
            }
          }
        },
        "tags": [
          "Prices"
        ],
        "responses": {
          "200": {
            "description": "SimpleResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/completealertsignal": {
      "post": {
        "description": "### Silences an \"incomplete\" notification. \nAn \"Incomplete\" notification is one that has not yet been viewed by a user. Once a user has interacted with a notification it should be \"completed\".",
        "operationId": "completeAlertSignal",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteAlertSignal"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignalResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAlertSignalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/deps": {
      "get": {
        "description": "Retrieves all entities of AdminAlertSignal type related to AdminAlert entity",
        "operationId": "adminAlertSignalDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of AdminAlert entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/item": {
      "get": {
        "description": "Retrieves an entity of AdminAlertSignal type by its id",
        "operationId": "adminAlertSignalItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAlertSignal"
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/items": {
      "get": {
        "description": "Retrieves multiple entities of AdminAlertSignal type by its ids",
        "operationId": "adminAlertSignalItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/ldeps": {
      "get": {
        "description": "Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type",
        "operationId": "adminAlertSignalLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of AdminAlert entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/list": {
      "get": {
        "description": "Retrieves all entities of AdminAlertSignal type",
        "operationId": "adminAlertSignalList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlertSignal/takealertsignalownership": {
      "post": {
        "description": "### Internal. Can be used by B2B partners to mark an adminAlertSignal entity for further handling.",
        "operationId": "takeAlertSignalOwnership",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TakeAlertSignalOwnership"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AdminAlertSignalResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAlertSignalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/createalert": {
      "post": {
        "description": "### Create an alert entity associated with the user.\n",
        "operationId": "createAlert",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlert"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/deletealert": {
      "post": {
        "description": "### Remove an alert entity associated with the user.",
        "operationId": "deleteAlert",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAlert"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/deps": {
      "get": {
        "description": "Retrieves all entities of Alert type related to User entity",
        "operationId": "alertDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/dismissalert": {
      "post": {
        "description": "### Dismiss an alert for a user.",
        "operationId": "dismissAlert",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DismissAlert"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/item": {
      "get": {
        "description": "Retrieves an entity of Alert type by its id",
        "operationId": "alertItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          }
        }
      }
    },
    "/alert/items": {
      "get": {
        "description": "Retrieves multiple entities of Alert type by its ids",
        "operationId": "alertItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/ldeps": {
      "get": {
        "description": "Retrieves all entities of Alert type related to multiple entities of User type",
        "operationId": "alertLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/list": {
      "get": {
        "description": "Retrieves all entities of Alert type",
        "operationId": "alertList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert/markreadalertsignal": {
      "post": {
        "description": "### Mark an alert entity as 'read' for a user.",
        "operationId": "markReadAlertSignal",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkReadAlertSignal"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/modifyalert": {
      "post": {
        "description": "### Change the parameters of an existing alert.",
        "operationId": "modifyAlert",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyAlert"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert/resetalert": {
      "post": {
        "description": "### Resets an alert. \nYou can use this method after an alert has been triggered to keep the alert and wait for the alert to be triggered again.",
        "operationId": "resetAlert",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetAlert"
              }
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alertSignal/deps": {
      "get": {
        "description": "Retrieves all entities of AlertSignal type related to Alert entity",
        "operationId": "alertSignalDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Alert entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alertSignal/item": {
      "get": {
        "description": "Retrieves an entity of AlertSignal type by its id",
        "operationId": "alertSignalItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSignal"
                }
              }
            }
          }
        }
      }
    },
    "/alertSignal/items": {
      "get": {
        "description": "Retrieves multiple entities of AlertSignal type by its ids",
        "operationId": "alertSignalItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alertSignal/ldeps": {
      "get": {
        "description": "Retrieves all entities of AlertSignal type related to multiple entities of Alert type",
        "operationId": "alertSignalLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Alert entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alertSignal/list": {
      "get": {
        "description": "Retrieves all entities of AlertSignal type",
        "operationId": "alertSignalList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "responses": {
          "200": {
            "description": "AlertSignal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSignal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlert/find": {
      "get": {
        "description": "Retrieves an entity of AdminAlert type by its name",
        "operationId": "adminAlertFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "AdminAlert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAlert"
                }
              }
            }
          }
        }
      }
    },
    "/adminAlert/item": {
      "get": {
        "description": "Retrieves an entity of AdminAlert type by its id",
        "operationId": "adminAlertItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "AdminAlert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAlert"
                }
              }
            }
          }
        }
      }
    },
    "/adminAlert/items": {
      "get": {
        "description": "Retrieves multiple entities of AdminAlert type by its ids",
        "operationId": "adminAlertItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "AdminAlert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlert/list": {
      "get": {
        "description": "Retrieves all entities of AdminAlert type",
        "operationId": "adminAlertList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "AdminAlert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adminAlert/suggest": {
      "get": {
        "description": "Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields",
        "operationId": "adminAlertSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "AdminAlert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clearingHouse/find": {
      "get": {
        "description": "Retrieves an entity of ClearingHouse type by its name",
        "operationId": "clearingHouseFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ClearingHouse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearingHouse"
                }
              }
            }
          }
        }
      }
    },
    "/clearingHouse/item": {
      "get": {
        "description": "Retrieves an entity of ClearingHouse type by its id",
        "operationId": "clearingHouseItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ClearingHouse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearingHouse"
                }
              }
            }
          }
        }
      }
    },
    "/clearingHouse/items": {
      "get": {
        "description": "Retrieves multiple entities of ClearingHouse type by its ids",
        "operationId": "clearingHouseItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ClearingHouse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClearingHouse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clearingHouse/list": {
      "get": {
        "description": "Retrieves all entities of ClearingHouse type",
        "operationId": "clearingHouseList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ClearingHouse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClearingHouse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clearingHouse/suggest": {
      "get": {
        "description": "Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields",
        "operationId": "clearingHouseSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ClearingHouse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClearingHouse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entitlement/item": {
      "get": {
        "description": "Retrieves an entity of Entitlement type by its id",
        "operationId": "entitlementItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          }
        }
      }
    },
    "/entitlement/items": {
      "get": {
        "description": "Retrieves multiple entities of Entitlement type by its ids",
        "operationId": "entitlementItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entitlement/list": {
      "get": {
        "description": "Retrieves all entities of Entitlement type",
        "operationId": "entitlementList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyType/find": {
      "get": {
        "description": "Retrieves an entity of OrderStrategyType type by its name",
        "operationId": "orderStrategyTypeFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyType"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyType/item": {
      "get": {
        "description": "Retrieves an entity of OrderStrategyType type by its id",
        "operationId": "orderStrategyTypeItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStrategyType"
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyType/items": {
      "get": {
        "description": "Retrieves multiple entities of OrderStrategyType type by its ids",
        "operationId": "orderStrategyTypeItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyType",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyType/list": {
      "get": {
        "description": "Retrieves all entities of OrderStrategyType type",
        "operationId": "orderStrategyTypeList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyType",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderStrategyType/suggest": {
      "get": {
        "description": "Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields",
        "operationId": "orderStrategyTypeSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "OrderStrategyType",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderStrategyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property/find": {
      "get": {
        "description": "Retrieves an entity of Property type by its name",
        "operationId": "propertyFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Property",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            }
          }
        }
      }
    },
    "/property/item": {
      "get": {
        "description": "Retrieves an entity of Property type by its id",
        "operationId": "propertyItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Property",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            }
          }
        }
      }
    },
    "/property/items": {
      "get": {
        "description": "Retrieves multiple entities of Property type by its ids",
        "operationId": "propertyItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Property"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property/list": {
      "get": {
        "description": "Retrieves all entities of Property type",
        "operationId": "propertyList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Property"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property/suggest": {
      "get": {
        "description": "Retrieves entities of Property type filtered by an occurrence of a text in one of its fields",
        "operationId": "propertySuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Property"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contactInfo/deps": {
      "get": {
        "description": "Retrieves all entities of ContactInfo type related to User entity",
        "operationId": "contactInfoDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "ContactInfo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contactInfo/item": {
      "get": {
        "description": "Retrieves an entity of ContactInfo type by its id",
        "operationId": "contactInfoItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "ContactInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo"
                }
              }
            }
          }
        }
      }
    },
    "/contactInfo/items": {
      "get": {
        "description": "Retrieves multiple entities of ContactInfo type by its ids",
        "operationId": "contactInfoItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "ContactInfo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contactInfo/ldeps": {
      "get": {
        "description": "Retrieves all entities of ContactInfo type related to multiple entities of User type",
        "operationId": "contactInfoLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "ContactInfo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/create": {
      "post": {
        "description": "Creates a new entity of MarketDataSubscription",
        "operationId": "marketDataSubscriptionCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketDataSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/deps": {
      "get": {
        "description": "Retrieves all entities of MarketDataSubscription type related to User entity",
        "operationId": "marketDataSubscriptionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/item": {
      "get": {
        "description": "Retrieves an entity of MarketDataSubscription type by its id",
        "operationId": "marketDataSubscriptionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/items": {
      "get": {
        "description": "Retrieves multiple entities of MarketDataSubscription type by its ids",
        "operationId": "marketDataSubscriptionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/ldeps": {
      "get": {
        "description": "Retrieves all entities of MarketDataSubscription type related to multiple entities of User type",
        "operationId": "marketDataSubscriptionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/list": {
      "get": {
        "description": "Retrieves all entities of MarketDataSubscription type",
        "operationId": "marketDataSubscriptionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/marketDataSubscription/update": {
      "post": {
        "description": "Updates an existing entity of MarketDataSubscription",
        "operationId": "marketDataSubscriptionUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketDataSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/organization/find": {
      "get": {
        "description": "Retrieves an entity of Organization type by its name",
        "operationId": "organizationFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        }
      }
    },
    "/organization/item": {
      "get": {
        "description": "Retrieves an entity of Organization type by its id",
        "operationId": "organizationItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        }
      }
    },
    "/organization/items": {
      "get": {
        "description": "Retrieves multiple entities of Organization type by its ids",
        "operationId": "organizationItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organization/list": {
      "get": {
        "description": "Retrieves all entities of Organization type",
        "operationId": "organizationList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organization/suggest": {
      "get": {
        "description": "Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields",
        "operationId": "organizationSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secondMarketDataSubscription/deps": {
      "get": {
        "description": "Retrieves all entities of SecondMarketDataSubscription type related to User entity",
        "operationId": "secondMarketDataSubscriptionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecondMarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secondMarketDataSubscription/item": {
      "get": {
        "description": "Retrieves an entity of SecondMarketDataSubscription type by its id",
        "operationId": "secondMarketDataSubscriptionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/secondMarketDataSubscription/items": {
      "get": {
        "description": "Retrieves multiple entities of SecondMarketDataSubscription type by its ids",
        "operationId": "secondMarketDataSubscriptionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecondMarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secondMarketDataSubscription/ldeps": {
      "get": {
        "description": "Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type",
        "operationId": "secondMarketDataSubscriptionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecondMarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secondMarketDataSubscription/list": {
      "get": {
        "description": "Retrieves all entities of SecondMarketDataSubscription type",
        "operationId": "secondMarketDataSubscriptionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecondMarketDataSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/create": {
      "post": {
        "description": "Creates a new entity of TradovateSubscription",
        "operationId": "tradovateSubscriptionCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradovateSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/deps": {
      "get": {
        "description": "Retrieves all entities of TradovateSubscription type related to User entity",
        "operationId": "tradovateSubscriptionDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/item": {
      "get": {
        "description": "Retrieves an entity of TradovateSubscription type by its id",
        "operationId": "tradovateSubscriptionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/items": {
      "get": {
        "description": "Retrieves multiple entities of TradovateSubscription type by its ids",
        "operationId": "tradovateSubscriptionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/ldeps": {
      "get": {
        "description": "Retrieves all entities of TradovateSubscription type related to multiple entities of User type",
        "operationId": "tradovateSubscriptionLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/list": {
      "get": {
        "description": "Retrieves all entities of TradovateSubscription type",
        "operationId": "tradovateSubscriptionList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradovateSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tradovateSubscription/update": {
      "post": {
        "description": "Updates an existing entity of TradovateSubscription",
        "operationId": "tradovateSubscriptionUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradovateSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/user/accepttradingpermission": {
      "post": {
        "description": "### Called to accept a given trading permission granted by another party.",
        "operationId": "acceptTradingPermission",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptTradingPermission"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradingPermissionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermissionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activatesecondmarketdatasubscriptionrenewal": {
      "post": {
        "description": "### Used to setup a second market data subscription with active auto-renewal.",
        "operationId": "activateSecondMarketDataSubscriptionRenewal",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateSecondMarketDataSubscriptionRenewal"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/addmarketdatasubscription": {
      "post": {
        "description": "### Add a subscription to Market Data for a user.",
        "operationId": "addMarketDataSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMarketDataSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "MarketDataSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketDataSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/addsecondmarketdatasubscription": {
      "post": {
        "description": "### Add a second market data subscription for a user.",
        "operationId": "addSecondMarketDataSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSecondMarketDataSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/addtradovatesubscription": {
      "post": {
        "description": "### Used to add a Tradovate Trader membership plan for a user.",
        "operationId": "addTradovateSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTradovateSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/canceleverything": {
      "post": {
        "description": "",
        "operationId": "cancelEverything",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelEverything"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "CancelEverythingResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelEverythingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/cancelsecondmarketdatasubscription": {
      "post": {
        "description": "### Cancel a second market data subscription for a user.",
        "operationId": "cancelSecondMarketDataSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSecondMarketDataSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/cancelsecondmarketdatasubscriptionrenewal": {
      "post": {
        "description": "### Cancel the auto-renewal for a second market data subscription for a user.",
        "operationId": "cancelSecondMarketDataSubscriptionRenewal",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSecondMarketDataSubscriptionRenewal"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/canceltradovatesubscription": {
      "post": {
        "description": "### Cancel a Tradovate Trader membership plan.",
        "operationId": "cancelTradovateSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelTradovateSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradovateSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradovateSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/createtradingpermission": {
      "post": {
        "description": "### Create a trading permission\nCreate a new trading permission to account with ID `accountId` via that user's ID, `userId`.",
        "operationId": "createTradingPermission",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTradingPermission"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradingPermissionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermissionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/find": {
      "get": {
        "description": "Retrieves an entity of User type by its name",
        "operationId": "userFind",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/getaccounttradingpermissions": {
      "post": {
        "description": "### Query the granted trading permissions associated with this account.",
        "operationId": "getAccountTradingPermissions",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAccountTradingPermissions"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradingPermissionsResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermissionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/getsecondmarketdatasubscriptioncost": {
      "post": {
        "description": "### Query the current price of a second market data subscription for a user.",
        "operationId": "getSecondMarketDataSubscriptionCost",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSecondMarketDataSubscriptionCost"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SecondMarketDataSubscriptionCostResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecondMarketDataSubscriptionCostResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/item": {
      "get": {
        "description": "Retrieves an entity of User type by its id",
        "operationId": "userItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/items": {
      "get": {
        "description": "Retrieves multiple entities of User type by its ids",
        "operationId": "userItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/list": {
      "get": {
        "description": "Retrieves all entities of User type",
        "operationId": "userList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/modifycredentials": {
      "post": {
        "description": "### Used to modify account username and password.",
        "operationId": "modifyCredentials",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyCredentials"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "AccessTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/modifyemailaddress": {
      "post": {
        "description": "### Change account email address information.",
        "operationId": "modifyEmailAddress",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyEmailAddress"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserStatusMessage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/user/modifypassword": {
      "post": {
        "description": "### Change account password information.",
        "operationId": "modifyPassword",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPassword"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "AccessTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/opendemoaccount": {
      "post": {
        "description": "### Request to open a Demo account for a user. ",
        "operationId": "openDemoAccount",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenDemoAccount"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OpenDemoAccountResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenDemoAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/requesttradingpermission": {
      "post": {
        "description": "### Send a request to grant trading permission for your account to another party.\nOnce this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party's own accounts.",
        "operationId": "requestTradingPermission",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestTradingPermission"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradingPermissionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermissionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/revoketradingpermission": {
      "post": {
        "description": "### Revoke an existing trading permission granted to another party.\nIf a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.",
        "operationId": "revokeTradingPermission",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTradingPermission"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "TradingPermissionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPermissionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/revoketradingpermissions": {
      "post": {
        "description": "",
        "operationId": "revokeTradingPermissions",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTradingPermissions"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SimpleResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/signuporganizationmember": {
      "post": {
        "description": "### Used by B2B partners to create users for their own organizations.",
        "operationId": "signUpOrganizationMember",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpOrganizationMember"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SignUpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/suggest": {
      "get": {
        "description": "Retrieves entities of User type filtered by an occurrence of a text in one of its fields",
        "operationId": "userSuggest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "t",
            "description": "Text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "l",
            "description": "Max number of entities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/syncrequest": {
      "post": {
        "description": "### Used with WebSocket protocol. Returns all data associated with the user. \nThis endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.\n\n```js\nconst URL = 'wss://live.tradovateapi.com/v1/websocket'\n\nconst myWebSocket = new WebSocket(URL)\n\n//authorize websocket with your access token\nmyWebSocket.onopen = function() {\n    myWebSocket.send(`authorize\\n0\\n\\n${accessToken}`)\n}\n\nconst requestBody = {\n    users: [12345]\n}\n\nmyWebSocket.send(`user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}`) \n\n//starts a subscription to real-time user data.\n```",
        "operationId": "syncRequest",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncRequest"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SyncMessage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncMessage"
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/addentitlementsubscription": {
      "post": {
        "description": "### For use with Add-ons, allows for purchase of entitlements such as Market Replay.",
        "operationId": "addEntitlementSubscription",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEntitlementSubscription"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "EntitlementSubscriptionResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/changepluginpermission": {
      "post": {
        "description": "### Change the permissions for a Trader plugin.",
        "operationId": "changePluginPermission",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePluginPermission"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "SimpleResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/create": {
      "post": {
        "description": "Creates a new entity of UserPlugin",
        "operationId": "userPluginCreate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPlugin"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPlugin"
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/deps": {
      "get": {
        "description": "Retrieves all entities of UserPlugin type related to User entity",
        "operationId": "userPluginDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPlugin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/item": {
      "get": {
        "description": "Retrieves an entity of UserPlugin type by its id",
        "operationId": "userPluginItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPlugin"
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/items": {
      "get": {
        "description": "Retrieves multiple entities of UserPlugin type by its ids",
        "operationId": "userPluginItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPlugin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserPlugin type related to multiple entities of User type",
        "operationId": "userPluginLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPlugin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/list": {
      "get": {
        "description": "Retrieves all entities of UserPlugin type",
        "operationId": "userPluginList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPlugin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userPlugin/update": {
      "post": {
        "description": "Updates an existing entity of UserPlugin",
        "operationId": "userPluginUpdate",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPlugin"
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserPlugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPlugin"
                }
              }
            }
          }
        }
      }
    },
    "/userProperty/deps": {
      "get": {
        "description": "Retrieves all entities of UserProperty type related to User entity",
        "operationId": "userPropertyDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserProperty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProperty"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userProperty/item": {
      "get": {
        "description": "Retrieves an entity of UserProperty type by its id",
        "operationId": "userPropertyItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserProperty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProperty"
                }
              }
            }
          }
        }
      }
    },
    "/userProperty/items": {
      "get": {
        "description": "Retrieves multiple entities of UserProperty type by its ids",
        "operationId": "userPropertyItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserProperty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProperty"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userProperty/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserProperty type related to multiple entities of User type",
        "operationId": "userPropertyLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserProperty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProperty"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userSession/item": {
      "get": {
        "description": "Retrieves an entity of UserSession type by its id",
        "operationId": "userSessionItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSession",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSession"
                }
              }
            }
          }
        }
      }
    },
    "/userSession/items": {
      "get": {
        "description": "Retrieves multiple entities of UserSession type by its ids",
        "operationId": "userSessionItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSession",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userSessionStats/deps": {
      "get": {
        "description": "Retrieves all entities of UserSessionStats type related to User entity",
        "operationId": "userSessionStatsDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSessionStats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStats"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userSessionStats/item": {
      "get": {
        "description": "Retrieves an entity of UserSessionStats type by its id",
        "operationId": "userSessionStatsItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSessionStats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionStats"
                }
              }
            }
          }
        }
      }
    },
    "/userSessionStats/items": {
      "get": {
        "description": "Retrieves multiple entities of UserSessionStats type by its ids",
        "operationId": "userSessionStatsItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSessionStats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStats"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userSessionStats/ldeps": {
      "get": {
        "description": "Retrieves all entities of UserSessionStats type related to multiple entities of User type",
        "operationId": "userSessionStatsLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSessionStats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStats"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userSessionStats/list": {
      "get": {
        "description": "Retrieves all entities of UserSessionStats type",
        "operationId": "userSessionStatsList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "UserSessionStats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStats"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fundTransaction/checkstripefundingeligibility": {
      "post": {
        "description": "",
        "operationId": "checkStripeFundingEligibility",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckStripeFundingEligibility"
              }
            }
          }
        },
        "tags": [
          "Funds"
        ],
        "responses": {
          "200": {
            "description": "CheckStripeFundingEligibilityResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckStripeFundingEligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/closechat": {
      "post": {
        "description": "### Close the chat context.",
        "operationId": "closeChat",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseChat"
              }
            }
          }
        },
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/deps": {
      "get": {
        "description": "Retrieves all entities of Chat type related to User entity",
        "operationId": "chatDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of User entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/item": {
      "get": {
        "description": "Retrieves an entity of Chat type by its id",
        "operationId": "chatItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          }
        }
      }
    },
    "/chat/items": {
      "get": {
        "description": "Retrieves multiple entities of Chat type by its ids",
        "operationId": "chatItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/ldeps": {
      "get": {
        "description": "Retrieves all entities of Chat type related to multiple entities of User type",
        "operationId": "chatLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of User entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/list": {
      "get": {
        "description": "Retrieves all entities of Chat type",
        "operationId": "chatList",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/markasreadchatmessage": {
      "post": {
        "description": "### Marks a chat message as read.",
        "operationId": "markAsReadChatMessage",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAsReadChatMessage"
              }
            }
          }
        },
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessageResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/postchatmessage": {
      "post": {
        "description": "### Post a chat message to a given chat's history.",
        "operationId": "postChatMessage",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChatMessage"
              }
            }
          }
        },
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessageResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chatMessage/deps": {
      "get": {
        "description": "Retrieves all entities of ChatMessage type related to Chat entity",
        "operationId": "chatMessageDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterid",
            "description": "id of Chat entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chatMessage/item": {
      "get": {
        "description": "Retrieves an entity of ChatMessage type by its id",
        "operationId": "chatMessageItem",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            }
          }
        }
      }
    },
    "/chatMessage/items": {
      "get": {
        "description": "Retrieves multiple entities of ChatMessage type by its ids",
        "operationId": "chatMessageItems",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chatMessage/ldeps": {
      "get": {
        "description": "Retrieves all entities of ChatMessage type related to multiple entities of Chat type",
        "operationId": "chatMessageLDependents",
        "security": [
          {
            "bearer_access_token": []
          }
        ],
        "parameters": [
          {
            "name": "masterids",
            "description": "ids of Chat entities",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "ChatMessage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer_access_token": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "TradeTime": {
        "type": "object",
        "required": [
          "hour",
          "minute"
        ],
        "properties": {
          "hour": {
            "type": "integer"
          },
          "minute": {
            "type": "integer"
          }
        }
      },
      "TradeDate": {
        "type": "object",
        "required": [
          "year",
          "month",
          "day"
        ],
        "properties": {
          "year": {
            "type": "integer"
          },
          "month": {
            "type": "integer"
          },
          "day": {
            "type": "integer"
          }
        }
      },
      "AcceptTradingPermission": {
        "type": "object",
        "required": [
          "tradingPermissionId"
        ],
        "properties": {
          "tradingPermissionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AccessTokenRequest": {
        "type": "object",
        "required": [
          "name",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "type": "string",
            "maxLength": 64
          },
          "appId": {
            "type": "string",
            "maxLength": 64
          },
          "appVersion": {
            "type": "string",
            "maxLength": 64
          },
          "deviceId": {
            "type": "string",
            "maxLength": 64
          },
          "cid": {
            "type": "string",
            "maxLength": 64
          },
          "sec": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "accessToken": {
            "type": "string",
            "maxLength": 8192
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time"
          },
          "passwordExpirationTime": {
            "type": "string",
            "format": "date-time"
          },
          "userStatus": {
            "type": "string",
            "description": "Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail",
            "enum": [
              "Active",
              "Closed",
              "Initiated",
              "TemporaryLocked",
              "UnconfirmedEmail"
            ]
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "hasLive": {
            "type": "boolean"
          }
        }
      },
      "Account": {
        "type": "object",
        "required": [
          "name",
          "userId",
          "accountType",
          "active",
          "clearingHouseId",
          "riskCategoryId",
          "autoLiqProfileId",
          "marginAccountType",
          "legalStatus",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountType": {
            "type": "string",
            "description": "Customer, Giveup, House, Omnibus, Wash",
            "enum": [
              "Customer",
              "Giveup",
              "House",
              "Omnibus",
              "Wash"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "clearingHouseId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "riskCategoryId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "autoLiqProfileId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "marginAccountType": {
            "type": "string",
            "description": "Hedger, Speculator",
            "enum": [
              "Hedger",
              "Speculator"
            ]
          },
          "legalStatus": {
            "type": "string",
            "description": "Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, PTR, Trust",
            "enum": [
              "Corporation",
              "GP",
              "IRA",
              "Individual",
              "Joint",
              "LLC",
              "LLP",
              "LP",
              "PTR",
              "Trust"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "readonly": {
            "type": "boolean"
          }
        }
      },
      "AccountRiskStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "adminAction": {
            "type": "string",
            "description": "AgreedOnLiqOnlyModeByAutoLiq, AgreedOnLiquidationByAutoLiq, DisableAutoLiq, LiquidateImmediately, LiquidateOnlyModeImmediately, LockTradingImmediately, Normal, PlaceAutoLiqOnHold",
            "enum": [
              "AgreedOnLiqOnlyModeByAutoLiq",
              "AgreedOnLiquidationByAutoLiq",
              "DisableAutoLiq",
              "LiquidateImmediately",
              "LiquidateOnlyModeImmediately",
              "LockTradingImmediately",
              "Normal",
              "PlaceAutoLiqOnHold"
            ]
          },
          "adminTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "liquidateOnly": {
            "type": "string",
            "format": "date-time"
          },
          "userTriggeredLiqOnly": {
            "type": "boolean"
          }
        }
      },
      "ActivateSecondMarketDataSubscriptionRenewal": {
        "type": "object",
        "required": [
          "secondMarketDataSubscriptionId"
        ],
        "properties": {
          "secondMarketDataSubscriptionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AddEntitlementSubscription": {
        "type": "object",
        "required": [
          "entitlementId"
        ],
        "properties": {
          "entitlementId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AddMarketDataSubscription": {
        "type": "object",
        "required": [
          "marketDataSubscriptionPlanIds",
          "year",
          "month"
        ],
        "properties": {
          "marketDataSubscriptionPlanIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 2015,
            "maximum": 2030
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AddSecondMarketDataSubscription": {
        "type": "object",
        "required": [
          "year",
          "month"
        ],
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 2015,
            "maximum": 2030
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AddTradovateSubscription": {
        "type": "object",
        "required": [
          "tradovateSubscriptionPlanId"
        ],
        "properties": {
          "tradovateSubscriptionPlanId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AdminAlert": {
        "type": "object",
        "required": [
          "name",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminAlertSignal": {
        "type": "object",
        "required": [
          "timestamp",
          "adminAlertId",
          "text",
          "emailSent",
          "subjectId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "adminAlertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "relatedToAccountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "relatedToUserId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ownedByAdminId": {
            "type": "integer",
            "format": "int64",
            "description": "Owned By...",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "completed": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 8192
          },
          "emailSent": {
            "type": "boolean"
          },
          "subjectId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "AdminAlertSignalResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "adminAlertSignal": {
            "$ref": "#/components/schemas/AdminAlertSignal"
          }
        }
      },
      "Alert": {
        "type": "object",
        "required": [
          "timestamp",
          "userId",
          "status",
          "expression"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "status": {
            "type": "string",
            "description": "Active, Expired, Failed, Inactive, TriggeredOut",
            "enum": [
              "Active",
              "Expired",
              "Failed",
              "Inactive",
              "TriggeredOut"
            ]
          },
          "expression": {
            "type": "string",
            "maxLength": 4096
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "triggerLimits": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 10
          },
          "triggeredCounter": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "failure": {
            "type": "string",
            "maxLength": 64
          },
          "message": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "AlertResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "alert": {
            "$ref": "#/components/schemas/Alert"
          }
        }
      },
      "AlertSignal": {
        "type": "object",
        "required": [
          "timestamp",
          "alertId",
          "isRead",
          "text"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "isRead": {
            "type": "boolean"
          },
          "text": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "CancelEverything": {
        "type": "object",
        "required": [
          "userIds"
        ],
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "tradovateSubscriptions": {
            "type": "boolean"
          },
          "tradingPermissions": {
            "type": "boolean"
          },
          "userPlugins": {
            "type": "boolean"
          },
          "marketDataSubscriptions": {
            "type": "boolean"
          }
        }
      },
      "CancelEverythingResponse": {
        "type": "object",
        "required": [
          "tradovateSubscriptionIds",
          "tradingPermissionIds",
          "userPluginIds",
          "marketDataSubscriptionIds"
        ],
        "properties": {
          "tradovateSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "tradingPermissionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "userPluginIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "marketDataSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "CancelOrder": {
        "type": "object",
        "required": [
          "orderId"
        ],
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          }
        }
      },
      "CancelSecondMarketDataSubscription": {
        "type": "object",
        "required": [
          "secondMarketDataSubscriptionId"
        ],
        "properties": {
          "secondMarketDataSubscriptionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "CancelSecondMarketDataSubscriptionRenewal": {
        "type": "object",
        "required": [
          "secondMarketDataSubscriptionId"
        ],
        "properties": {
          "secondMarketDataSubscriptionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "CancelTradovateSubscription": {
        "type": "object",
        "required": [
          "tradovateSubscriptionId"
        ],
        "properties": {
          "tradovateSubscriptionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "cancelReason": {
            "type": "string",
            "maxLength": 8192
          },
          "expire": {
            "type": "boolean"
          }
        }
      },
      "CashBalance": {
        "type": "object",
        "required": [
          "accountId",
          "timestamp",
          "tradeDate",
          "currencyId",
          "amount"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "currencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "realizedPnL": {
            "type": "number",
            "format": "double"
          },
          "weekRealizedPnL": {
            "type": "number",
            "format": "double"
          },
          "amountSOD": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CashBalanceLog": {
        "type": "object",
        "required": [
          "accountId",
          "timestamp",
          "tradeDate",
          "currencyId",
          "amount",
          "cashChangeType",
          "delta"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "currencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "realizedPnL": {
            "type": "number",
            "format": "double"
          },
          "weekRealizedPnL": {
            "type": "number",
            "format": "double"
          },
          "cashChangeType": {
            "type": "string",
            "description": "AccountClosureFee, AddUserFee, AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, CashSettlement, ClearingFee, Commission, Courtesy, Debit, DepositFee, DeskFee, DormantFee, EntitlementSubscription, Escheatment, ExchangeFee, FundTransaction, FundTransactionFee, GoodwillCredit, IPFee, InactivityFee, LiquidationFee, LiquidationFee2, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, NsfCheckFee, OptionsTrade, OrderRoutingFee, PROMO, RithmicFee, SeatLeasePayment, StopPaymentFee, ThirdPartyFee, TradePaired, TradovateSubscription",
            "enum": [
              "AccountClosureFee",
              "AddUserFee",
              "AutomaticReconciliation",
              "BrokerageFee",
              "CancelledPairedTrade",
              "CashSettlement",
              "ClearingFee",
              "Commission",
              "Courtesy",
              "Debit",
              "DepositFee",
              "DeskFee",
              "DormantFee",
              "EntitlementSubscription",
              "Escheatment",
              "ExchangeFee",
              "FundTransaction",
              "FundTransactionFee",
              "GoodwillCredit",
              "IPFee",
              "InactivityFee",
              "LiquidationFee",
              "LiquidationFee2",
              "ManualAdjustment",
              "MarketDataSubscription",
              "NewSession",
              "NfaFee",
              "NsfCheckFee",
              "OptionsTrade",
              "OrderRoutingFee",
              "PROMO",
              "RithmicFee",
              "SeatLeasePayment",
              "StopPaymentFee",
              "ThirdPartyFee",
              "TradePaired",
              "TradovateSubscription"
            ]
          },
          "fillPairId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "fillId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "fundTransactionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "comment": {
            "type": "string",
            "maxLength": 64
          },
          "delta": {
            "type": "number",
            "format": "double"
          },
          "senderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "CashBalanceSnapshot": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "totalCashValue": {
            "type": "number",
            "format": "double"
          },
          "totalPnL": {
            "type": "number",
            "format": "double"
          },
          "initialMargin": {
            "type": "number",
            "format": "double"
          },
          "maintenanceMargin": {
            "type": "number",
            "format": "double"
          },
          "netLiq": {
            "type": "number",
            "format": "double"
          },
          "openPnL": {
            "type": "number",
            "format": "double"
          },
          "realizedPnL": {
            "type": "number",
            "format": "double"
          },
          "weekRealizedPnL": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ChangePluginPermission": {
        "type": "object",
        "required": [
          "pluginName",
          "approval"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pluginName": {
            "type": "string",
            "maxLength": 64
          },
          "approval": {
            "type": "boolean"
          }
        }
      },
      "ChangeSpeed": {
        "type": "object",
        "required": [
          "speed"
        ],
        "properties": {
          "speed": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 400
          }
        }
      },
      "Chat": {
        "type": "object",
        "required": [
          "userId",
          "timestamp",
          "category"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "string",
            "description": "Support, TradeDesk",
            "enum": [
              "Support",
              "TradeDesk"
            ]
          },
          "assignedSupportId": {
            "type": "integer",
            "format": "int64",
            "description": "Assigned To",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "closedById": {
            "type": "integer",
            "format": "int64",
            "description": "Closed By",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "closeTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": [
          "timestamp",
          "chatId",
          "senderId",
          "text",
          "readStatus"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "chatId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "senderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "senderName": {
            "type": "string",
            "maxLength": 64
          },
          "text": {
            "type": "string",
            "maxLength": 1024
          },
          "readStatus": {
            "type": "boolean"
          }
        }
      },
      "ChatMessageResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "chatMessage": {
            "$ref": "#/components/schemas/ChatMessage"
          }
        }
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "chat": {
            "$ref": "#/components/schemas/Chat"
          }
        }
      },
      "CheckReplaySession": {
        "type": "object",
        "required": [
          "startTimestamp"
        ],
        "properties": {
          "startTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CheckReplaySessionResponse": {
        "type": "object",
        "required": [
          "checkStatus"
        ],
        "properties": {
          "checkStatus": {
            "type": "string",
            "description": "Ineligible, OK, StartTimestampAdjusted",
            "enum": [
              "Ineligible",
              "OK",
              "StartTimestampAdjusted"
            ]
          },
          "startTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CheckStripeFundingEligibility": {
        "type": "object",
        "required": [
          "accountId",
          "currencyId"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "CheckStripeFundingEligibilityResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "minimumAmount": {
            "type": "number",
            "format": "double"
          },
          "maximumAmount": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ClearingHouse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "CloseChat": {
        "type": "object",
        "required": [
          "chatId"
        ],
        "properties": {
          "chatId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "Command": {
        "type": "object",
        "required": [
          "orderId",
          "timestamp",
          "commandType",
          "commandStatus"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "commandType": {
            "type": "string",
            "description": "Cancel, Modify, New",
            "enum": [
              "Cancel",
              "Modify",
              "New"
            ]
          },
          "commandStatus": {
            "type": "string",
            "description": "AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected",
            "enum": [
              "AtExecution",
              "ExecutionRejected",
              "ExecutionStopped",
              "ExecutionSuspended",
              "OnHold",
              "Pending",
              "PendingExecution",
              "Replaced",
              "RiskPassed",
              "RiskRejected"
            ]
          },
          "senderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userSessionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          }
        }
      },
      "CommandReport": {
        "type": "object",
        "required": [
          "commandId",
          "timestamp",
          "commandStatus"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "commandId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "commandStatus": {
            "type": "string",
            "description": "AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected",
            "enum": [
              "AtExecution",
              "ExecutionRejected",
              "ExecutionStopped",
              "ExecutionSuspended",
              "OnHold",
              "Pending",
              "PendingExecution",
              "Replaced",
              "RiskPassed",
              "RiskRejected"
            ]
          },
          "rejectReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "text": {
            "type": "string",
            "maxLength": 8192
          },
          "ordStatus": {
            "type": "string",
            "description": "Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working",
            "enum": [
              "Canceled",
              "Completed",
              "Expired",
              "Filled",
              "PendingCancel",
              "PendingNew",
              "PendingReplace",
              "Rejected",
              "Suspended",
              "Unknown",
              "Working"
            ]
          }
        }
      },
      "CommandResult": {
        "type": "object",
        "properties": {
          "failureReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "failureText": {
            "type": "string",
            "maxLength": 8192
          },
          "commandId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "CompleteAlertSignal": {
        "type": "object",
        "required": [
          "adminAlertSignalId"
        ],
        "properties": {
          "adminAlertSignalId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "ContactInfo": {
        "type": "object",
        "required": [
          "userId",
          "firstName",
          "lastName",
          "streetAddress1",
          "city",
          "country",
          "phone"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "firstName": {
            "type": "string",
            "maxLength": 64
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          },
          "streetAddress1": {
            "type": "string",
            "minLength": 3,
            "maxLength": 61
          },
          "streetAddress2": {
            "type": "string",
            "maxLength": 61
          },
          "city": {
            "type": "string",
            "minLength": 2,
            "maxLength": 35
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          },
          "postCode": {
            "type": "string",
            "minLength": 4,
            "maxLength": 11
          },
          "country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "phone": {
            "type": "string",
            "maxLength": 21
          },
          "mailingIsDifferent": {
            "type": "boolean"
          },
          "mailingStreetAddress1": {
            "type": "string",
            "maxLength": 8192
          },
          "mailingStreetAddress2": {
            "type": "string",
            "maxLength": 8192
          },
          "mailingCity": {
            "type": "string",
            "maxLength": 64
          },
          "mailingState": {
            "type": "string",
            "maxLength": 64
          },
          "mailingPostCode": {
            "type": "string",
            "maxLength": 64
          },
          "mailingCountry": {
            "type": "string",
            "maxLength": 2
          },
          "jointFirstName": {
            "type": "string",
            "maxLength": 64
          },
          "jointLastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          }
        }
      },
      "Contract": {
        "type": "object",
        "required": [
          "name",
          "contractMaturityId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "contractMaturityId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "ContractGroup": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ContractMargin": {
        "type": "object",
        "required": [
          "initialMargin",
          "maintenanceMargin",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "initialMargin": {
            "type": "number",
            "format": "double"
          },
          "maintenanceMargin": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ContractMaturity": {
        "type": "object",
        "required": [
          "productId",
          "expirationMonth",
          "expirationDate",
          "isFront"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "expirationMonth": {
            "type": "integer",
            "format": "int32",
            "minimum": 1401,
            "exclusiveMinimum": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstIntentDate": {
            "type": "string",
            "format": "date-time"
          },
          "underlyingId": {
            "type": "integer",
            "format": "int64",
            "description": "Underlying",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "isFront": {
            "type": "boolean"
          }
        }
      },
      "CreateAlert": {
        "type": "object",
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "type": "string",
            "maxLength": 4096
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "triggerLimits": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 10
          },
          "message": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "CreateTradingPermission": {
        "type": "object",
        "required": [
          "accountId",
          "userId"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "Currency": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "symbol": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "CurrencyRate": {
        "type": "object",
        "required": [
          "timestamp",
          "rate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "rate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DeleteAlert": {
        "type": "object",
        "required": [
          "alertId"
        ],
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "DeleteResultResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "DeleteUserAccountPositionLimit": {
        "type": "object",
        "required": [
          "userAccountPositionLimitId"
        ],
        "properties": {
          "userAccountPositionLimitId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "DeleteUserAccountRiskParameter": {
        "type": "object",
        "required": [
          "userAccountRiskParameterId"
        ],
        "properties": {
          "userAccountRiskParameterId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "DismissAlert": {
        "type": "object",
        "required": [
          "alertId"
        ],
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "Entitlement": {
        "type": "object",
        "required": [
          "title",
          "price",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "maxLength": 64
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "discontinuedDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "durationUnits": {
            "type": "string",
            "description": "Lifetime, Month, Quarter, Week, Year",
            "enum": [
              "Lifetime",
              "Month",
              "Quarter",
              "Week",
              "Year"
            ]
          },
          "autorenewal": {
            "type": "boolean"
          }
        }
      },
      "EntitlementSubscriptionResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "errorCode": {
            "type": "string",
            "description": "ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError",
            "enum": [
              "ConflictWithExisting",
              "DowngradeNotAllowed",
              "IncompatibleCMEMarketDataSubscriptionPlans",
              "IncorrectPaymentMethod",
              "InsufficientFunds",
              "PaymentProviderError",
              "PlanDiscontinued",
              "SingleTrialOnly",
              "Success",
              "UnknownError"
            ]
          },
          "entitlementSubscription": {
            "$ref": "#/components/schemas/UserPlugin"
          }
        }
      },
      "Exchange": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ExecutionReport": {
        "type": "object",
        "required": [
          "commandId",
          "name",
          "accountId",
          "contractId",
          "timestamp",
          "orderId",
          "execType",
          "action"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "commandId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "execType": {
            "type": "string",
            "description": "Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect",
            "enum": [
              "Canceled",
              "Completed",
              "DoneForDay",
              "Expired",
              "New",
              "OrderStatus",
              "PendingCancel",
              "PendingNew",
              "PendingReplace",
              "Rejected",
              "Replaced",
              "Stopped",
              "Suspended",
              "Trade",
              "TradeCancel",
              "TradeCorrect"
            ]
          },
          "execRefId": {
            "type": "string",
            "maxLength": 64
          },
          "ordStatus": {
            "type": "string",
            "description": "Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working",
            "enum": [
              "Canceled",
              "Completed",
              "Expired",
              "Filled",
              "PendingCancel",
              "PendingNew",
              "PendingReplace",
              "Rejected",
              "Suspended",
              "Unknown",
              "Working"
            ]
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "cumQty": {
            "type": "integer",
            "format": "int32"
          },
          "avgPx": {
            "type": "number",
            "format": "double"
          },
          "lastQty": {
            "type": "integer",
            "format": "int32"
          },
          "lastPx": {
            "type": "number",
            "format": "double"
          },
          "rejectReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "text": {
            "type": "string",
            "maxLength": 8192
          },
          "exchangeOrderId": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "Fill": {
        "type": "object",
        "required": [
          "orderId",
          "contractId",
          "timestamp",
          "tradeDate",
          "action",
          "qty",
          "price",
          "active",
          "finallyPaired"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "qty": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "active": {
            "type": "boolean"
          },
          "finallyPaired": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FillFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "clearingFee": {
            "type": "number",
            "format": "double"
          },
          "clearingCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "exchangeFee": {
            "type": "number",
            "format": "double"
          },
          "exchangeCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "nfaFee": {
            "type": "number",
            "format": "double"
          },
          "nfaCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "brokerageFee": {
            "type": "number",
            "format": "double"
          },
          "brokerageCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ipFee": {
            "type": "number",
            "format": "double",
            "description": "IP/TT Fee"
          },
          "ipCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "commission": {
            "type": "number",
            "format": "double"
          },
          "commissionCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderRoutingFee": {
            "type": "number",
            "format": "double"
          },
          "orderRoutingCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "FillPair": {
        "type": "object",
        "required": [
          "positionId",
          "buyFillId",
          "sellFillId",
          "qty",
          "buyPrice",
          "sellPrice",
          "active"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "positionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "buyFillId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "sellFillId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "qty": {
            "type": "integer",
            "format": "int32"
          },
          "buyPrice": {
            "type": "number",
            "format": "double"
          },
          "sellPrice": {
            "type": "number",
            "format": "double"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "GetAccountTradingPermissions": {
        "type": "object",
        "required": [
          "accountId"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "GetCashBalanceSnapshot": {
        "type": "object",
        "required": [
          "accountId"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "GetProductFeeParams": {
        "type": "object",
        "required": [
          "productIds"
        ],
        "properties": {
          "productIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GetSecondMarketDataSubscriptionCost": {
        "type": "object",
        "required": [
          "year",
          "month"
        ],
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 2015,
            "maximum": 2030
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "InitializeClock": {
        "type": "object",
        "required": [
          "startTimestamp",
          "speed"
        ],
        "properties": {
          "startTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "speed": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 400
          },
          "initialBalance": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "InterruptOrderStrategy": {
        "type": "object",
        "required": [
          "orderStrategyId"
        ],
        "properties": {
          "orderStrategyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "LiquidatePosition": {
        "type": "object",
        "required": [
          "accountId",
          "contractId",
          "admin"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "admin": {
            "type": "boolean"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "MarginSnapshot": {
        "type": "object",
        "required": [
          "timestamp",
          "riskTimePeriodId",
          "initialMargin",
          "maintenanceMargin",
          "totalUsedMargin",
          "fullInitialMargin",
          "positionMargin"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "riskTimePeriodId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "initialMargin": {
            "type": "number",
            "format": "double"
          },
          "maintenanceMargin": {
            "type": "number",
            "format": "double"
          },
          "autoLiqLevel": {
            "type": "number",
            "format": "double"
          },
          "liqOnlyLevel": {
            "type": "number",
            "format": "double"
          },
          "totalUsedMargin": {
            "type": "number",
            "format": "double"
          },
          "fullInitialMargin": {
            "type": "number",
            "format": "double"
          },
          "positionMargin": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MarkAsReadChatMessage": {
        "type": "object",
        "required": [
          "chatMessageId"
        ],
        "properties": {
          "chatMessageId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "MarkReadAlertSignal": {
        "type": "object",
        "required": [
          "alertId",
          "alertSignalId"
        ],
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "alertSignalId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "MarketDataSubscription": {
        "type": "object",
        "required": [
          "userId",
          "timestamp",
          "planPrice",
          "marketDataSubscriptionPlanId",
          "year",
          "month",
          "expired"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "planPrice": {
            "type": "number",
            "format": "double"
          },
          "creditCardTransactionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "cashBalanceLogId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "marketDataSubscriptionPlanId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 2015,
            "maximum": 2030
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12
          },
          "expired": {
            "type": "boolean"
          },
          "renewalCreditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "renewalAccountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "MarketDataSubscriptionExchangeScope": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "bundleOf": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "MarketDataSubscriptionPlan": {
        "type": "object",
        "required": [
          "name",
          "title",
          "price",
          "exchangeScopeId",
          "dataType",
          "professional"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "title": {
            "type": "string",
            "maxLength": 64
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "discontinuedDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "exchangeScopeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "dataType": {
            "type": "string",
            "description": "DOM, Top",
            "enum": [
              "DOM",
              "Top"
            ]
          },
          "professional": {
            "type": "string",
            "description": "Either, NonProfessional, Professional",
            "enum": [
              "Either",
              "NonProfessional",
              "Professional"
            ]
          },
          "tooltip": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "MarketDataSubscriptionResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "errorCode": {
            "type": "string",
            "description": "ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError",
            "enum": [
              "ConflictWithExisting",
              "DowngradeNotAllowed",
              "IncompatibleCMEMarketDataSubscriptionPlans",
              "IncorrectPaymentMethod",
              "InsufficientFunds",
              "PaymentProviderError",
              "PlanDiscontinued",
              "SingleTrialOnly",
              "Success",
              "UnknownError"
            ]
          },
          "marketDataSubscription": {
            "$ref": "#/components/schemas/MarketDataSubscription"
          }
        }
      },
      "Me": {
        "type": "object"
      },
      "ModifyAlert": {
        "type": "object",
        "required": [
          "alertId",
          "expression"
        ],
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "expression": {
            "type": "string",
            "maxLength": 4096
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "triggerLimits": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 10
          },
          "message": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "ModifyCredentials": {
        "type": "object",
        "required": [
          "name",
          "password",
          "currentPassword"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 64
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          },
          "currentPassword": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ModifyEmailAddress": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "email": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ModifyOrder": {
        "type": "object",
        "required": [
          "orderId",
          "orderQty",
          "orderType"
        ],
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "orderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          }
        }
      },
      "ModifyOrderStrategy": {
        "type": "object",
        "required": [
          "orderStrategyId",
          "command"
        ],
        "properties": {
          "orderStrategyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "command": {
            "type": "string",
            "maxLength": 1024
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ModifyPassword": {
        "type": "object",
        "required": [
          "password",
          "currentPassword"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          },
          "currentPassword": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "OAuthMeResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "fullName": {
            "type": "string",
            "maxLength": 8192
          },
          "email": {
            "type": "string",
            "maxLength": 8192
          },
          "emailVerified": {
            "type": "boolean"
          },
          "isTrial": {
            "type": "boolean"
          }
        }
      },
      "OAuthToken": {
        "type": "object",
        "required": [
          "grant_type",
          "code",
          "redirect_uri"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "maxLength": 64
          },
          "code": {
            "type": "string",
            "maxLength": 8192
          },
          "redirect_uri": {
            "type": "string",
            "maxLength": 8192
          },
          "client_id": {
            "type": "string",
            "maxLength": 8192
          },
          "client_secret": {
            "type": "string",
            "maxLength": 8192
          },
          "httpAuth": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "OAuthTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "maxLength": 8192
          },
          "token_type": {
            "type": "string",
            "maxLength": 64
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string",
            "maxLength": 64
          },
          "error_description": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "OpenDemoAccount": {
        "type": "object",
        "properties": {
          "templateAccountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "initialBalance": {
            "type": "number",
            "format": "double"
          },
          "defaultAutoLiq": {
            "$ref": "#/components/schemas/UserAccountAutoLiq"
          }
        }
      },
      "OpenDemoAccountResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "accountId",
          "timestamp",
          "action",
          "ordStatus",
          "admin"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "spreadDefinitionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Create Time"
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "ordStatus": {
            "type": "string",
            "description": "Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working",
            "enum": [
              "Canceled",
              "Completed",
              "Expired",
              "Filled",
              "PendingCancel",
              "PendingNew",
              "PendingReplace",
              "Rejected",
              "Suspended",
              "Unknown",
              "Working"
            ]
          },
          "executionProviderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ocoId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "parentId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "linkedId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "admin": {
            "type": "boolean"
          }
        }
      },
      "OrderStrategy": {
        "type": "object",
        "required": [
          "accountId",
          "timestamp",
          "contractId",
          "orderStrategyTypeId",
          "action",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderStrategyTypeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "initiatorId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "params": {
            "type": "string",
            "maxLength": 8192
          },
          "uuid": {
            "type": "string",
            "maxLength": 64
          },
          "status": {
            "type": "string",
            "description": "ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser",
            "enum": [
              "ActiveStrategy",
              "ExecutionFailed",
              "ExecutionFinished",
              "ExecutionInterrupted",
              "InactiveStrategy",
              "NotEnoughLiquidity",
              "StoppedByUser"
            ]
          },
          "failureMessage": {
            "type": "string",
            "maxLength": 512
          },
          "senderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "userSessionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "OrderStrategyLink": {
        "type": "object",
        "required": [
          "orderStrategyId",
          "orderId",
          "label"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderStrategyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "label": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "OrderStrategyStatusResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "orderStrategy": {
            "$ref": "#/components/schemas/OrderStrategy"
          }
        }
      },
      "OrderStrategyType": {
        "type": "object",
        "required": [
          "name",
          "enabled"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "OrderVersion": {
        "type": "object",
        "required": [
          "orderId",
          "orderQty",
          "orderType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "Organization": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "PlaceOCO": {
        "type": "object",
        "required": [
          "action",
          "symbol",
          "orderQty",
          "orderType",
          "other"
        ],
        "properties": {
          "accountSpec": {
            "type": "string",
            "maxLength": 64
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "symbol": {
            "type": "string",
            "maxLength": 64
          },
          "orderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          },
          "other": {
            "$ref": "#/components/schemas/RestrainedOrderVersion"
          }
        }
      },
      "PlaceOSO": {
        "type": "object",
        "required": [
          "action",
          "symbol",
          "orderQty",
          "orderType",
          "bracket1"
        ],
        "properties": {
          "accountSpec": {
            "type": "string",
            "maxLength": 64
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "symbol": {
            "type": "string",
            "maxLength": 64
          },
          "orderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          },
          "bracket1": {
            "$ref": "#/components/schemas/RestrainedOrderVersion"
          },
          "bracket2": {
            "$ref": "#/components/schemas/RestrainedOrderVersion"
          }
        }
      },
      "PlaceOcoResult": {
        "type": "object",
        "properties": {
          "failureReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "failureText": {
            "type": "string",
            "maxLength": 8192
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ocoId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "PlaceOrder": {
        "type": "object",
        "required": [
          "action",
          "symbol",
          "orderQty",
          "orderType"
        ],
        "properties": {
          "accountSpec": {
            "type": "string",
            "maxLength": 64
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "symbol": {
            "type": "string",
            "maxLength": 64
          },
          "orderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          },
          "activationTime": {
            "type": "string",
            "format": "date-time"
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          },
          "isAutomated": {
            "type": "boolean"
          }
        }
      },
      "PlaceOrderResult": {
        "type": "object",
        "properties": {
          "failureReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "failureText": {
            "type": "string",
            "maxLength": 8192
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "PlaceOsoResult": {
        "type": "object",
        "properties": {
          "failureReason": {
            "type": "string",
            "description": "AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported",
            "enum": [
              "AccountClosed",
              "AdvancedTrailingStopUnsupported",
              "AnotherCommandPending",
              "BackMonthProhibited",
              "ExecutionProviderNotConfigured",
              "ExecutionProviderUnavailable",
              "InvalidContract",
              "InvalidPrice",
              "LiquidationOnly",
              "LiquidationOnlyBeforeExpiration",
              "MaxOrderQtyIsNotSpecified",
              "MaxOrderQtyLimitReached",
              "MaxPosLimitMisconfigured",
              "MaxPosLimitReached",
              "MaxTotalPosLimitReached",
              "MultipleAccountPlanRequired",
              "NoQuote",
              "NotEnoughLiquidity",
              "OtherExecutionRelated",
              "ParentRejected",
              "RiskCheckTimeout",
              "SessionClosed",
              "Success",
              "TooLate",
              "TradingLocked",
              "TrailingStopNonOrderQtyModify",
              "Unauthorized",
              "UnknownReason",
              "Unsupported"
            ]
          },
          "failureText": {
            "type": "string",
            "maxLength": 8192
          },
          "orderId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "oso1Id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "oso2Id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "Position": {
        "type": "object",
        "required": [
          "accountId",
          "contractId",
          "timestamp",
          "tradeDate",
          "netPos",
          "bought",
          "boughtValue",
          "sold",
          "soldValue",
          "prevPos"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "netPos": {
            "type": "integer",
            "format": "int32"
          },
          "netPrice": {
            "type": "number",
            "format": "double"
          },
          "bought": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "boughtValue": {
            "type": "number",
            "format": "double"
          },
          "sold": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "soldValue": {
            "type": "number",
            "format": "double"
          },
          "prevPos": {
            "type": "integer",
            "format": "int32"
          },
          "prevPrice": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PostChatMessage": {
        "type": "object",
        "required": [
          "category",
          "text"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "category": {
            "type": "string",
            "description": "Support, TradeDesk",
            "enum": [
              "Support",
              "TradeDesk"
            ]
          },
          "text": {
            "type": "string",
            "maxLength": 1024
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "name",
          "currencyId",
          "productType",
          "description",
          "exchangeId",
          "contractGroupId",
          "status",
          "valuePerPoint",
          "priceFormatType",
          "priceFormat",
          "tickSize"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "currencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productType": {
            "type": "string",
            "description": "CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread",
            "enum": [
              "CommonStock",
              "Continuous",
              "Cryptocurrency",
              "Futures",
              "MarketInternals",
              "Options",
              "Spread"
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "exchangeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "contractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "riskDiscountContractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "status": {
            "type": "string",
            "description": "Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified",
            "enum": [
              "Inactive",
              "Locked",
              "ReadyForContracts",
              "ReadyToTrade",
              "Verified"
            ]
          },
          "months": {
            "type": "string",
            "maxLength": 64
          },
          "isSecured": {
            "type": "boolean"
          },
          "valuePerPoint": {
            "type": "number",
            "format": "double",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "priceFormatType": {
            "type": "string",
            "description": "Decimal, Fractional",
            "enum": [
              "Decimal",
              "Fractional"
            ]
          },
          "priceFormat": {
            "type": "integer",
            "format": "int32"
          },
          "tickSize": {
            "type": "number",
            "format": "double",
            "description": "Product Tick Size",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "ProductFeeParams": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "clearingFee": {
            "type": "number",
            "format": "double"
          },
          "clearingCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "exchangeFee": {
            "type": "number",
            "format": "double"
          },
          "exchangeCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "nfaFee": {
            "type": "number",
            "format": "double"
          },
          "nfaCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "brokerageFee": {
            "type": "number",
            "format": "double"
          },
          "brokerageCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ipFee": {
            "type": "number",
            "format": "double",
            "description": "IP/TT Fee"
          },
          "ipCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "commission": {
            "type": "number",
            "format": "double"
          },
          "commissionCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "orderRoutingFee": {
            "type": "number",
            "format": "double"
          },
          "orderRoutingCurrencyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "dayMargin": {
            "type": "number",
            "format": "double"
          },
          "nightMargin": {
            "type": "number",
            "format": "double"
          },
          "fullMargin": {
            "$ref": "#/components/schemas/ProductMargin"
          }
        }
      },
      "ProductFeeParamsResponse": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeeParams"
            }
          }
        }
      },
      "ProductMargin": {
        "type": "object",
        "required": [
          "initialMargin",
          "maintenanceMargin",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "initialMargin": {
            "type": "number",
            "format": "double"
          },
          "maintenanceMargin": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductSession": {
        "type": "object",
        "required": [
          "openTime",
          "startTime",
          "stopTime",
          "closeTime"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "openTime": {
            "$ref": "#/components/schemas/TradeTime"
          },
          "startTime": {
            "$ref": "#/components/schemas/TradeTime"
          },
          "stopTime": {
            "$ref": "#/components/schemas/TradeTime"
          },
          "closeTime": {
            "$ref": "#/components/schemas/TradeTime"
          },
          "sundayOpenTime": {
            "$ref": "#/components/schemas/TradeTime"
          }
        }
      },
      "Property": {
        "type": "object",
        "required": [
          "name",
          "propertyType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "propertyType": {
            "type": "string",
            "description": "Boolean, Enum, Integer, String",
            "enum": [
              "Boolean",
              "Enum",
              "Integer",
              "String"
            ]
          },
          "enumOptions": {
            "type": "string",
            "maxLength": 8192
          },
          "defaultValue": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "RenewAccessToken": {
        "type": "object"
      },
      "RequestTradingPermission": {
        "type": "object",
        "required": [
          "accountId",
          "ctaContact",
          "ctaEmail"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ctaContact": {
            "type": "string",
            "maxLength": 64
          },
          "ctaEmail": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ResetAlert": {
        "type": "object",
        "required": [
          "alertId"
        ],
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "ResetDemoAccountState": {
        "type": "object",
        "required": [
          "accountIds",
          "resetTradeDate"
        ],
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "resetTradeDate": {
            "$ref": "#/components/schemas/TradeDate"
          }
        }
      },
      "RestrainedOrderVersion": {
        "type": "object",
        "required": [
          "action",
          "orderType"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "clOrdId": {
            "type": "string",
            "maxLength": 64
          },
          "orderType": {
            "type": "string",
            "description": "Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit",
            "enum": [
              "Limit",
              "MIT",
              "Market",
              "QTS",
              "Stop",
              "StopLimit",
              "TrailingStop",
              "TrailingStopLimit"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "stopPrice": {
            "type": "number",
            "format": "double"
          },
          "maxShow": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pegDifference": {
            "type": "number",
            "format": "double"
          },
          "timeInForce": {
            "type": "string",
            "description": "Day, FOK, GTC, GTD, IOC",
            "enum": [
              "Day",
              "FOK",
              "GTC",
              "GTD",
              "IOC"
            ]
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "RevokeTradingPermission": {
        "type": "object",
        "required": [
          "tradingPermissionId"
        ],
        "properties": {
          "tradingPermissionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "RevokeTradingPermissions": {
        "type": "object",
        "required": [
          "tradingPermissionIds"
        ],
        "properties": {
          "tradingPermissionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "RollContract": {
        "type": "object",
        "required": [
          "name",
          "forward"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "forward": {
            "type": "boolean"
          },
          "ifExpired": {
            "type": "boolean"
          }
        }
      },
      "RollContractBase": {
        "type": "object",
        "required": [
          "name",
          "forward"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "forward": {
            "type": "boolean"
          },
          "ifExpired": {
            "type": "boolean"
          }
        }
      },
      "RollContractResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "RollContracts": {
        "type": "object",
        "required": [
          "rollContracts"
        ],
        "properties": {
          "rollContracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RollContractBase"
            }
          }
        }
      },
      "RollContractsResponse": {
        "type": "object",
        "required": [
          "contracts"
        ],
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "contracts": {
            "type": "object"
          }
        }
      },
      "SecondMarketDataSubscription": {
        "type": "object",
        "required": [
          "userId",
          "timestamp",
          "year",
          "month"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 2015,
            "maximum": 2030
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12
          },
          "cancelledRenewal": {
            "type": "boolean"
          },
          "cancellationTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecondMarketDataSubscriptionCostResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "monthlyCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SecondMarketDataSubscriptionResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "errorCode": {
            "type": "string",
            "description": "ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError",
            "enum": [
              "ConflictWithExisting",
              "DowngradeNotAllowed",
              "IncompatibleCMEMarketDataSubscriptionPlans",
              "IncorrectPaymentMethod",
              "InsufficientFunds",
              "PaymentProviderError",
              "PlanDiscontinued",
              "SingleTrialOnly",
              "Success",
              "UnknownError"
            ]
          },
          "secondMarketDataSubscription": {
            "$ref": "#/components/schemas/SecondMarketDataSubscription"
          }
        }
      },
      "SignUpOrganizationMember": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "firstName",
          "lastName"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          },
          "firstName": {
            "type": "string",
            "maxLength": 64
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          }
        }
      },
      "SignUpResponse": {
        "type": "object",
        "required": [
          "errorCode",
          "emailVerified"
        ],
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "errorCode": {
            "type": "string",
            "description": "DataError, EmailAlreadyRegistered, EmailPolicyFailed, FailedRecaptcha, Success, UnknownError, UserAlreadyExists, WeakPassword, WrongChallenge, WrongChallengeOrigin",
            "enum": [
              "DataError",
              "EmailAlreadyRegistered",
              "EmailPolicyFailed",
              "FailedRecaptcha",
              "Success",
              "UnknownError",
              "UserAlreadyExists",
              "WeakPassword",
              "WrongChallenge",
              "WrongChallengeOrigin"
            ]
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "emailVerified": {
            "type": "boolean"
          }
        }
      },
      "SimpleResponse": {
        "type": "object",
        "required": [
          "ok"
        ],
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "ok": {
            "type": "boolean"
          }
        }
      },
      "SpreadDefinition": {
        "type": "object",
        "required": [
          "timestamp",
          "spreadType",
          "uds"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "spreadType": {
            "type": "string",
            "description": "Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread",
            "enum": [
              "Bundle",
              "BundleSpread",
              "Butterfly",
              "CalendarSpread",
              "Condor",
              "Crack",
              "DoubleButterfly",
              "General",
              "IntercommoditySpread",
              "LaggedIntercommoditySpread",
              "Pack",
              "PackButterfly",
              "PackSpread",
              "ReducedTickCalendarSpread",
              "ReverseIntercommoditySpread",
              "ReverseSpread",
              "Strip",
              "TreasuryIntercommoditySpread"
            ]
          },
          "uds": {
            "type": "boolean"
          }
        }
      },
      "StartOrderStrategy": {
        "type": "object",
        "required": [
          "symbol",
          "orderStrategyTypeId",
          "action"
        ],
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountSpec": {
            "type": "string",
            "maxLength": 64
          },
          "symbol": {
            "type": "string",
            "maxLength": 64
          },
          "orderStrategyTypeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "action": {
            "type": "string",
            "description": "Buy, Sell",
            "enum": [
              "Buy",
              "Sell"
            ]
          },
          "params": {
            "type": "string",
            "maxLength": 8192
          },
          "uuid": {
            "type": "string",
            "maxLength": 64
          },
          "customTag50": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "SyncMessage": {
        "type": "object",
        "required": [
          "users",
          "contractGroups"
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "accountRiskStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountRiskStatus"
            }
          },
          "marginSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarginSnapshot"
            }
          },
          "userAccountAutoLiqs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccountAutoLiq"
            }
          },
          "cashBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashBalance"
            }
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Position"
            }
          },
          "fillPairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FillPair"
            }
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            }
          },
          "contractMaturities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractMaturity"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "exchanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exchange"
            }
          },
          "spreadDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpreadDefinition"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Command"
            }
          },
          "commandReports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommandReport"
            }
          },
          "executionReports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionReport"
            }
          },
          "orderVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderVersion"
            }
          },
          "fills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fill"
            }
          },
          "orderStrategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStrategy"
            }
          },
          "orderStrategyLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStrategyLink"
            }
          },
          "userProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProperty"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "userPlugins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPlugin"
            }
          },
          "contractGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractGroup"
            }
          },
          "orderStrategyTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStrategyType"
            }
          }
        }
      },
      "SyncRequest": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "splitResponses": {
            "type": "boolean"
          }
        }
      },
      "TakeAlertSignalOwnership": {
        "type": "object",
        "required": [
          "adminAlertSignalId"
        ],
        "properties": {
          "adminAlertSignalId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "TradingPermission": {
        "type": "object",
        "required": [
          "userId",
          "accountId",
          "accountHolderContact",
          "accountHolderEmail",
          "ctaContact",
          "ctaEmail",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountHolderContact": {
            "type": "string",
            "maxLength": 64
          },
          "accountHolderEmail": {
            "type": "string",
            "maxLength": 64
          },
          "ctaContact": {
            "type": "string",
            "maxLength": 64
          },
          "ctaEmail": {
            "type": "string",
            "maxLength": 64
          },
          "status": {
            "type": "string",
            "description": "Accepted, Approved, Declined, Requested, Revoked",
            "enum": [
              "Accepted",
              "Approved",
              "Declined",
              "Requested",
              "Revoked"
            ]
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "approvedById": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "TradingPermissionResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "tradingPermission": {
            "$ref": "#/components/schemas/TradingPermission"
          }
        }
      },
      "TradingPermissionsResponse": {
        "type": "object",
        "required": [
          "tradingPermissions"
        ],
        "properties": {
          "tradingPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradingPermission"
            }
          }
        }
      },
      "TradovateSubscription": {
        "type": "object",
        "required": [
          "userId",
          "timestamp",
          "planPrice",
          "tradovateSubscriptionPlanId",
          "startDate",
          "expirationDate",
          "paidAmount"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "planPrice": {
            "type": "number",
            "format": "double"
          },
          "creditCardTransactionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "cashBalanceLogId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tradovateSubscriptionPlanId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "startDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "paidAmount": {
            "type": "number",
            "format": "double"
          },
          "cancelledRenewal": {
            "type": "boolean"
          },
          "cancelReason": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "TradovateSubscriptionPlan": {
        "type": "object",
        "required": [
          "name",
          "title",
          "price",
          "category",
          "trial",
          "duration",
          "durationUnits"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "title": {
            "type": "string",
            "maxLength": 64
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "discontinuedDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "category": {
            "type": "string",
            "maxLength": 64
          },
          "trial": {
            "type": "boolean"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "durationUnits": {
            "type": "string",
            "description": "Lifetime, Month, Quarter, Week, Year",
            "enum": [
              "Lifetime",
              "Month",
              "Quarter",
              "Week",
              "Year"
            ]
          },
          "riskCategoryId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "multipleAccounts": {
            "type": "boolean"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "replaySessions": {
            "type": "integer",
            "format": "int32"
          },
          "footnote": {
            "type": "string",
            "maxLength": 8192
          },
          "simOnly": {
            "type": "boolean"
          }
        }
      },
      "TradovateSubscriptionResponse": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "errorCode": {
            "type": "string",
            "description": "ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError",
            "enum": [
              "ConflictWithExisting",
              "DowngradeNotAllowed",
              "IncompatibleCMEMarketDataSubscriptionPlans",
              "IncorrectPaymentMethod",
              "InsufficientFunds",
              "PaymentProviderError",
              "PlanDiscontinued",
              "SingleTrialOnly",
              "Success",
              "UnknownError"
            ]
          },
          "tradovateSubscription": {
            "$ref": "#/components/schemas/TradovateSubscription"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "name",
          "timestamp",
          "email",
          "status",
          "professional"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 64
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "maxLength": 64
          },
          "status": {
            "type": "string",
            "description": "Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail",
            "enum": [
              "Active",
              "Closed",
              "Initiated",
              "TemporaryLocked",
              "UnconfirmedEmail"
            ]
          },
          "professional": {
            "type": "boolean"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "linkedUserId": {
            "type": "integer",
            "format": "int64",
            "description": "Linked Live",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "foreignIntroducingBrokerId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "UserAccountAutoLiq": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "changesLocked": {
            "type": "boolean",
            "description": "Changes Locked"
          },
          "marginPercentageAlert": {
            "type": "number",
            "format": "double",
            "description": "Margin % for an Alert"
          },
          "dailyLossPercentageAlert": {
            "type": "number",
            "format": "double",
            "description": "Daily Loss % for an Alert"
          },
          "dailyLossAlert": {
            "type": "number",
            "format": "double",
            "description": "$ Daily Loss for an Alert"
          },
          "marginPercentageLiqOnly": {
            "type": "number",
            "format": "double",
            "description": "Margin % for an Liq Only"
          },
          "dailyLossPercentageLiqOnly": {
            "type": "number",
            "format": "double",
            "description": "Daily Loss % for an Liq Only"
          },
          "dailyLossLiqOnly": {
            "type": "number",
            "format": "double",
            "description": "$ Daily Loss for an Liq Only"
          },
          "marginPercentageAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "Margin % for an Auto-Liq"
          },
          "dailyLossPercentageAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "Daily Loss % for an AutoLiq"
          },
          "dailyLossAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "$ Daily Loss for an Auto-Liq"
          },
          "weeklyLossAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "$ Weekly Loss for an Auto-Liq"
          },
          "flattenTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Flatten &amp; Cancel"
          },
          "trailingMaxDrawdown": {
            "type": "number",
            "format": "double",
            "description": "$ Trailing Max Drawdown"
          },
          "trailingMaxDrawdownLimit": {
            "type": "number",
            "format": "double",
            "description": "$ Trailing Max Drawdown Limit"
          },
          "trailingMaxDrawdownMode": {
            "type": "string",
            "description": "EOD, RealTime",
            "enum": [
              "EOD",
              "RealTime"
            ]
          },
          "dailyProfitAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "$ Daily Profit for an Auto-Liq"
          },
          "weeklyProfitAutoLiq": {
            "type": "number",
            "format": "double",
            "description": "$ Weekly Profit for an Auto-Liq"
          },
          "doNotUnlock": {
            "type": "boolean",
            "description": "Do not automatically unlock account if triggered"
          }
        }
      },
      "UserAccountPositionLimit": {
        "type": "object",
        "required": [
          "active",
          "totalBy",
          "accountId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "exchangeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productType": {
            "type": "string",
            "description": "CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread",
            "enum": [
              "CommonStock",
              "Continuous",
              "Cryptocurrency",
              "Futures",
              "MarketInternals",
              "Options",
              "Spread"
            ]
          },
          "riskDiscountContractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productVerificationStatus": {
            "type": "string",
            "description": "Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified",
            "enum": [
              "Inactive",
              "Locked",
              "ReadyForContracts",
              "ReadyToTrade",
              "Verified"
            ]
          },
          "contractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "active": {
            "type": "boolean"
          },
          "riskTimePeriodId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "totalBy": {
            "type": "string",
            "description": "Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType",
            "enum": [
              "Contract",
              "ContractGroup",
              "DiscountGroup",
              "Exchange",
              "Overall",
              "Product",
              "ProductType"
            ]
          },
          "shortLimit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "longLimit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "exposedLimit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "description": {
            "type": "string",
            "maxLength": 64
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "UserAccountRiskParameter": {
        "type": "object",
        "required": [
          "userAccountPositionLimitId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "exchangeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productType": {
            "type": "string",
            "description": "CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread",
            "enum": [
              "CommonStock",
              "Continuous",
              "Cryptocurrency",
              "Futures",
              "MarketInternals",
              "Options",
              "Spread"
            ]
          },
          "riskDiscountContractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "productVerificationStatus": {
            "type": "string",
            "description": "Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified",
            "enum": [
              "Inactive",
              "Locked",
              "ReadyForContracts",
              "ReadyToTrade",
              "Verified"
            ]
          },
          "contractGroupId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "maxOpeningOrderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxClosingOrderQty": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxBackMonth": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "preExpirationDays": {
            "type": "integer",
            "format": "int32"
          },
          "marginPercentage": {
            "type": "number",
            "format": "double"
          },
          "marginDollarValue": {
            "type": "number",
            "format": "double"
          },
          "hardLimit": {
            "type": "boolean"
          },
          "userAccountPositionLimitId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "UserPlugin": {
        "type": "object",
        "required": [
          "userId",
          "timestamp",
          "planPrice",
          "pluginName",
          "approval",
          "startDate",
          "paidAmount"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "planPrice": {
            "type": "number",
            "format": "double"
          },
          "creditCardTransactionId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "cashBalanceLogId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "creditCardId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "pluginName": {
            "type": "string",
            "maxLength": 64
          },
          "approval": {
            "type": "boolean"
          },
          "entitlementId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "startDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/TradeDate"
          },
          "paidAmount": {
            "type": "number",
            "format": "double"
          },
          "autorenewal": {
            "type": "boolean"
          },
          "planCategories": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "UserProperty": {
        "type": "object",
        "required": [
          "userId",
          "propertyId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "propertyId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "value": {
            "type": "string",
            "maxLength": 8192
          }
        }
      },
      "UserSession": {
        "type": "object",
        "required": [
          "userId",
          "startTime",
          "clientAppId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "ipAddress": {
            "type": "string",
            "maxLength": 64
          },
          "appId": {
            "type": "string",
            "maxLength": 64
          },
          "appVersion": {
            "type": "string",
            "maxLength": 64
          },
          "clientAppId": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "UserSessionStats": {
        "type": "object",
        "required": [
          "lastSessionTime",
          "failedPasswords"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastSessionTime": {
            "type": "string",
            "format": "date-time"
          },
          "failedPasswords": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserStatusMessage": {
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Non-empty if the request failed",
            "maxLength": 8192
          },
          "status": {
            "type": "string",
            "description": "Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail",
            "enum": [
              "Active",
              "Closed",
              "Initiated",
              "TemporaryLocked",
              "UnconfirmedEmail"
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Access",
      "description": "# Tutorials and Guides\n- The JavaScript tutorial: [https://github.com/tradovate/example-api-js](https://github.com/tradovate/example-api-js)\n- C# API and WebSocket guide: [https://github.com/tradovate/example-api-csharp-trading](https://github.com/tradovate/example-api-csharp-trading)\n- JavaScript OAuth guide: [https://github.com/tradovate/example-api-oauth](https://github.com/tradovate/example-api-oauth)\n- API FAQ and code samples: [https://github.com/tradovate/example-api-faq](https://github.com/tradovate/example-api-faq)\n\n# Directly Accessing the REST API\nUsers can access the API by using client libraries, by making REST requests, or by establishing a WebSocket connection. If you'd like to follow\nalong with our comprehensive **JavaScript guide to the Tradovate API**, you can find it [here](https://github.com/tradovate/example-api-js). \n\n[Follow along with this document to gain access to the API.](https://community.tradovate.com/t/how-do-i-access-the-api/2380)\n\nTo access a server, you need to know the location of the server and have credentials to access it. Typically, credentials are automatically set-up when \nyou open a demo account via signup process of regular Tradovate web-site or an application. You can also gain access to the Tradovate servers by \ndelegating authentication to [OAuth](https://github.com/tradovate/example-api-oauth).\n\nThe domains of the API services are split up based on what service each provides. You can use the server that corresponds to the service that you need:\n\n- `live.tradovateapi.com` for Live only functionality.\n- `demo.tradovateapi.com` for simulation engine.\n- `md.tradovateapi.com` and for a market data feed.\n\nWe support a relaxed REST API. We recommend using `GET` or `POST` methods based on the particular endpoints you'd like to access,\nbut do not enforce the request method you use. It is generally the case that if you need to send a JSON body with your request it should be a `POST`,\nwhile requests that require no body can use the `GET` method. All responses from the Tradovate REST API are in JSON format.\n\n# Access Tokens\nBefore a client can access a protected resource, that client must obtain an access token. To do so, a client can directly exchange its own credentials to\nfor an access token, it can use a social login via Google or Facebook, or it can delegate the authentication process to the OAuth service.\n\nIn order to use the access token, the client uses the \"Bearer\" authentication scheme to transmit the access token in \"Authorization\" request header field.\n\n# Get An Access Token Using Client Credentials\n\nIn cURL:\n\n```curl\ncurl -X POST https://demo.tradovateapi.com/v1/auth/accesstokenrequest\n\t -H \"Content-Type: application/json\" \n     -H \"Accept: application/json\"\n     -d \"{\n          \\\"name\\\": \\\"your credentials here\\\",\n          \\\"password\\\": \\\"your credentials here\\\",\n          \\\"appId\\\": \\\"Sample App\\\",\n          \\\"appVersion\\\": \\\"1.0\\\",\n          \\\"cid\\\": 8,          \n          \\\"deviceId\\\": \\\"123e4567-e89b-12d3-a456-426614174000\\\",\n          \\\"sec\\\": \\\"f03741b6-f634-48d6-9308-c8fb871150c2\\\"\n     \t}\"\n\n# returns:\n\n{\n    \"accessToken\": <your access token response here>,\n    \"mdAccessToken\": <your md access token response here>,\n    \"expirationTime\": \"2021-06-15T15:40:30.056Z\",\n    \"userStatus\": \"Active\",\n    \"userId\": 15460,\n    \"name\": \"alennert02\",\n    \"hasLive\": true,\n    \"outdatedTaC\": false,\n    \"hasFunded\": true,\n    \"hasMarketData\": true,\n    \"outdatedLiquidationPolicy\": false\n}\n```\n...or in JavaScript:\n\n```js\nconst body = {\n    name:       \"<replace with your credentials>\",\n    password:   \"<replace with your credentials>\",\n    appId:      \"Sample App\",\n    appVersion: \"1.0\",\n    cid:        8,\n    sec:        \"f03741b6-f634-48d6-9308-c8fb871150c2\",\n    deviceId:   \"123e4567-e89b-12d3-a456-426614174000\"\n}\n\nconst response = await fetch('https://live.tradovateapi.com/v1/auth/accesstokenrequest', {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify(body)\n})\n\nconst json = await response.json()\n```\n\nThe client can use the access token until it expires. Your access token's expiry is sent in the JSON response in the `expirationTime` field.\n\n**[Try it!](/#operation/accessTokenRequest)**\n\n# Two-Factor Authentication\nIn order to enable two factor authentication for your application, you will need to supply three special fields in the JSON body of your\naccess token request:\n\n- `deviceId` is a string up to 64 characters that uniquely and permanently identify the physical device. For example, the app can use https://github.com/MatthewKing/DeviceId package to get an id for C#, or use a package like [device-uuid](https://www.npmjs.com/package/device-uuid) for JS. Please note that it is up to the developer to supply this functionality, we offer no built-in solution to identify a device using the Tradovate API.\n- `cid` is a client app id  provided by Tradovate. \n- `sec` is a secret (or API key) provided by Tradovate. This key should be kept away from public access - don't include the file you keep your key in on GitHub if you keep your code in the public realm.\n\nUnlike `cid`, the `appId` and `appVersion` fields are app identifiers in free form that can be displayed to the end-users in Tradovate Trader UI to show what apps are connected.\n\n> NOTE: **Use Two-Factor Authentication!** Remember that this is yours or your client's money and identity at stake,\n> and two factor authentication is an industry standard in the world of financial technology. Don't take risks with your clients' credentials.\n\n# OAuth\nThe Tradovate API supports authentication via OAuth as well. For an example on how to use OAuth to access the API see [this tutorial](https://github.com/tradovate/example-api-oauth).\n\n# Using Your Access Token\nIn order to access the REST API endpoints, your requests will need to follow the Bearer authentication schema. We can do so by setting the Authorization\nheader. Below, in cURL:\n\n```\ncurl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer ag_8a97la5-T6PqMfUhu-NReEUxW4cFq_dxw-jx6SUWeqqgF6YQ5BIRZK7-rKl0zxXeOUWAYpSZLzFsv11sNlMVza1NDGuKETtTCayV7oIhWpsmg7KSpidMYPBg_J05rC_9vobaw-jA1JuCgrlman_L5G2KCl0choVttLNw' 'https://live.tradovateapi.com/v1/account/list'\n\n[\n  {\n    \"id\": 33,\n    \"name\": \"X0314\",\n    \"userId\": 90,\n    \"accountType\": \"Customer\",\n    \"active\": true,\n    \"clearingHouseId\": 1,\n    \"riskCategoryId\": 5,\n    \"autoLiqProfileId\": 1,\n    \"marginAccountType\": \"Speculator\",\n    \"legalStatus\": \"Individual\"\n  }\n]\n```\n\n...or in JavaScript:\n\n```js\nconst response = await fetch('https://live.tradovateapi.com/v1/account/list', {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${my_access_token_here}`, //<-- your token, provided following the Bearer schema\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n})\n\nconst json = await response.json()\n```\n\n**[Try it!](/#operation/accountList)**\n\n> Note: currently, social logins are not allowed for customers with live accounts.\n\n# Streaming via WebSocket\nWebSockets make it possible to open an interactive communication session. This means you can receive and respond to data in real time and synchronize\nyour users' experiences. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.\nOur protocol over WebSocket uses the same semantics for requests as the REST API, but tailored to fit the JSON format expected by the standard WebSocket\nprotocol. We describe the WebSocket protocol in further detail [here](/#tag/WebSockets).\n\n# Request Rate Limits And Time Penalty\nTo prevent things like DDoS attacks, we limit request rates and impose time penalties when certain thresholds are triggered. There are request limits on the hour, minute, and second intervals. As soon as a limit reached, our server stops handling requests for a period of time and responds to each new request with 429 status code, 'Too Many Requests'. Generally, the limits are high enough not to hit them during normal operations.\n\nNovel operations that are known to be called infrequently have further constraints placed upon them. These operations include requesting an access token, \nsigning up for an account, changing a password, or changing contact information. These operations are not intended for frequent use. If a client\nreaches one of these limits, a special time-penalty response will be issued. This response is a JSON object with the fields `\"p-ticket\"` and `\"p-time\"`. \nIf you receive this response, it means that the request was not handled and the server imposed a time penalty on that request. The client can retry the call in `\"p-time\"` seconds and should include `\"p-ticket\"` as an additional parameter in the request body's JSON. Additional to this, there is a field called `\"p-captcha\"`. When this field is marked `true`, it means the operation that failed cannot be tried again from a third party application and users should be alerted that they should try the operation again in an hour. One time this can occur is upon too many authentication requests with sent bad data (incorrect username or password).\n\nThere is more information available on rate limits in the [API FAQ](https://github.com/tradovate/example-api-faq).\n\n# Connection limits\nWe have a limit for a number of one simultaneous client connection per customer. Multiple simultaneous connections are supported by subscription, see the Application Settings > Connections section of the Trader application for details about simultaneous connection allowances and pricing.\nWhen a customer reaches their limit of connections, the server will disconnect the oldest ones.\n\n# Account Risk Status\nAt Tradovate, we auto-liquidate accounts that have fallen below a health set of criteria. You can view our full liquidation policy [here](https://tradovate.com/liquidation-policy/). The easiest way to retrieve information about an account's current liquidation status is by using the [`/accountRiskStatus/list`](#operation/accountRiskStatusList) operation. This endpoint will retrieve the liquidation statuses for the calling account. This endpoint will show you your current status as `adminAction`, timestamps for your last auto-liquidation period and the time of review, a reason code for the action taken, and an auto-liquidation counter to track the number of times this account has been auto-liquidated. \n\nTo protect yourself from falling into auto-liquidation status, we offer a variety of risk management services which you can access and modify using the Tradovate REST API. If you're familiar with trading using the Trader application, you may already know about our available Risk Limits. Take a look at the [Risks](#tag/Risks) section of the API documentation. Some of the possible ways you can limit your risk include:\n\n- Position limits (limit how much you can trade),\n- Product limitations (limit what you can trade),\n- Daily/Weekly loss limits,\n- Trailing max drawdown (more info [here](https://tradovate.zendesk.com/hc/en-us/articles/360035269274-How-do-I-set-a-Trailing-Max-Drawdown-on-my-account-))\n\nYou can easily query your current Risk Limits using the [`/userAccountPositionLimit/deps`](#operation/userAccountPositionLimitDependents) or [`/userAccountPositionLimit/ldeps`](#operation/userAccountPositionLimitLDependents) endpoints, supplying your account ID as a query parameter. This will return a list of `UserAccountPositionLimit` entities. Note the IDs of these items, because we can use them to get the actual parameters paired with\nthese risk limits.\n> *Note*: Your account ID is not the 'LIVE12345' or 'DEMO12345' strings, it is the actual integer entity ID. You can retrieve your account(s) information by using the  [`/account/list`](#operation/accountList) operation. The `id` field is the real entity ID of an account.\n\nTo get the related Risk Parameter entities (the actual values that get set by Risk Limits), we can use the [`/userAccountRiskParameter/deps`](#operation/userAccountRiskParameterDependents) operation. This will return all the related parameters to the given `UserAccountPositionLimit` entity. If you have placed a limit on products that you can trade, you'll see references to those products in the `productId` field of the response object. If the limit isn't on products, you'll get different parameters. For example, if you've set a hard position limit of 30 open contracts, you'll receive a Risk Parameter object that looks like this:\n\n```js\n[\n    {\n        \"id\": 20745,\n        \"hardLimit\": true,\n        \"userAccountPositionLimitId\": 17180\n    }\n]\n```\n\nTo set your own risk limits via the API, you need to use a combination of both the [`/userAccountPositionLimit/create`](#operation/userAccountPositionLimitCreate) and [`/userAccountRiskParameter/create`](#operation/userAccountRiskParameterCreate) endpoints. First you need to create a Position Limit entity, and then you must parameterize it using a Risk Parameter entity.\n\nAs an example, let's say you want to limit your maximum allowed position to 30 open contracts. To do so we will create a new Position Limit entity and parameterize it with an appropriate Risk Parameter entity:\n\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst posLimitBody = {\n    accountId: myAccountId,\n    active: true,\n    totalBy: 'Overall',\n    exposedLimit: 30, //this is max open contracts amount\n    description: 'Max Position Size',\n}\n\nconst posLimitRes = await fetch(URL + '/userAccountPositionLimit/create', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`\n    },\n    body: JSON.stringify(posLimitBody)\n})\n\nconst { id } = await posLimitRes.json()\n\nconst riskParamBody = {\n    hardLimit: true,\n    userAccountPositionLimitId: id\n}\n\nconst riskParamRes = await fetch(URL + '/userAccountRiskParameter/create', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`\n    },\n    body: JSON.stringify(riskParamBody)\n})\n\nconst riskParams = await riskParamRes.json()\n```"
    },
    {
      "name": "Conventions",
      "description": "# Understanding the API Structure\nThe Tradovate API is a low-level HTTP-based API that you can use to query data, submit orders, create alerts, receive notifications - almost everything that is available in the Tradovate Trader application.\n\nThe Tradovate REST API can be split into two parts: a set of endpoints to query data (typically `GET` method endpoints) and\nendpoints to modify (or submit) data (typically `POST` method endpoints). With rare exceptions, endpoint's paths consist of two parts:\nentity name and the operation type. For example, `/account/find` or `/order/cancelorder`.\n\nThe API exposes data with fine granularity to avoid limiting how applications would like\nto compose them. It is the responsibility of client applications to request all needed\ndependencies and join them. For example, to calculate your open P&L you would need to pull information from at least two domains - your positions data, and real-time market data for comparing those positions to live quotes.\n\n\n# Query Data\nQuery operations should use the HTTP GET method if called via REST API.\n\n## By ID\nAll entities that can be requested via API have unique IDs. `item` is an operation\nthat can be used to get an entity using that ID as a parameter. Here's an example of requesting an Order entity by ID in cURL:\n\n```\ncurl -X GET --header 'Accept: application/json' 'https://demo.tradovateapi.com/v1/order/item?id=1000'\n```\n\nSuch methods are translated to .NET reference API in the form `apiInstance.[Entity]Item(id)`:\n\n```c#\nAccount result = apiInstance.AccountItem(1000);\n```\n\nAnd in JavaScript we can use the `fetch` function:\n\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await fetch(URL + '/order/item?id=1000', {\n    headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n\nconst account = await response.json()\n```\n\nOr on Node JS we can use Axios:\n\n```js\nconst axios = require('axios')\n\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await axios.get(URL + '/position/item?id=1000', {\n    headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n```\n\n## All Entities at Once\nUsing the `/list` endpoint, we can retrieve all of the entities of a particular type. For example:\n\ncURL\n```\ncurl -X GET --header 'Accept: application/json' 'https://demo.tradovateapi.com/v1/fill/list'\n```\n\nAnd in C#:\n\n```c#\nList<Account> result = apiInstance.FillList();\n```\n\nIn JavaScript:\n\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await fetch(URL + '/fill/list', {\n   headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n\nconst fills = await response.json()\n```\n\n## Via Master-Details Dependency\nThe `deps` operation is intended to load only dependent or owned entities for another entity.\nThe `masterid` parameter should be an ID of `master` entity. For example, all positions\nthat are owned by an account with ID=123:\n\ncURL\n```\ncurl -X GET --header 'Accept: application/json' 'https://demo.tradovateapi.com/v1/position/deps?masterid=123'\n```\n\nC#:\n```c#\nList<Position> result = apiInstance.PositionDependents(accountId);\n```\n\nJS:\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await fetch(URL + '/position/deps?masterid=123', {\n    headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n\nconst result = await response.json()\n```\n\n## By name\nSome entities - like accounts, products, contracts, and currencies - have names. Here is\nan example of a `find` operation with the `name` parameter used to find a product with the name \"ES\":\n\ncURL:\n```\ncurl -X GET --header 'Accept: application/json' 'https://demo.tradovateapi.com/v1/product/find?name=ES'\n```\n\nC#:\n```c#\nProduct result = apiInstance.ProductFind(\"ES\");\n```\n\nJS:\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await fetch(URL + '/product/find?name=ES', {\n    headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n\nconst es = await response.json()\n```\n\n## Batch Loading\nThe Tradovate API exposes endpoints to load multiple entities in batch. It is more efficient to\nreplace multiple `item` operations for the same entity with one `items` operation and pass `ids` parameter\nas comma-separated list of IDs. Note: a number of loaded entities can be less than a number of IDs (in the case of an ID not found) and\na sequence of entities can be different than a sequence of IDs (we shouldn't expect data to be returned in the same order as it was requested). \n\ncURL:\n```\ncurl -X GET --header 'Accept: application/json' 'https://demo.tradovateapi.com/v1/contract/items?ids=840972%2C840944'\n```\n\nC#:\n```c#\nvar ids = new List<int?>();\n//...\nList<Contract> result = apiInstance.ContractItems(ids);\n```\n\nJS:\n```js\nconst URL = 'https://demo.tradovateapi.com/v1'\n\nconst response = await fetch(URL + '/contract/items?ids=840972%C840944', {\n    headers: {\n        Authorization: `Bearer ${myAccessToken}`,\n        'Content-Type': 'application/json'\n    }\n})\n\nconst contracts = await response.json()\n```\n\nSimilar batching can be applied to `deps` operations - it is faster to run the `ldeps`\noperation with the `masterids` to retrieve batched dependent entities.\n\n# Submit Data\nWhen using the REST API, the HTTP POST method should be used when we need to submit data. Data should be formatted as a valid JSON object\nand passed in the request body.\n\nThe naming conventions of these operations do not have any general rule and the name of each\noperation reflects the semantics behind its use. For example, `/order/placeorder` is used to make a request to place order and `/order/liquidateposition` is used to make a request to attempt to cancel all orders for a specified position.\n\nHere's a JS example of how to use the `placeOrder` endpoint with an HTTP POST request.\n```js\nconst URL = 'demo.tradovateapi.com/v1'\n\nconst body = {\n    accountSpec: yourUserName,\n    accountId: yourAcctId,\n    action: \"Buy\",\n    symbol: \"MYMM1\",\n    orderQty: 1,\n    orderType: \"Market\",\n    isAutomated: true //must be true if this isn't an order made directly by a human\n}\n\nconst response = await fetch(URL + '/order/placeorder', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${myAccessToken}`,\n    },\n    body: JSON.stringify(body)\n})\n\nconst json = await response.json() // { orderId: 0000000 }\n\n```\n\n# Error Handling\nThe Tradovate API has two paths by which to pass errors to the client - via HTTP status codes\nor via custom `errorText` fields in some endpoints. \n\nHTTP codes are used mostly in situations when required data or an operation is\nunavailable (404), inaccessible (401 or 403), or responds with Too Many Requests (429, 423). These are errors that prevent you from reaching an endpoint. \n\nThe `errorText` field in responses is used to describe business level violations in text format. This will happen in a situation where your request\nsucceeded at the HTTP level but server-side business logic constraints caused your request to be rejected. Usually there will be a description in the text that reflects what went wrong.\n\n# Automated Orders\nWhen placing an order via code or automated process (like with a trade bot perhaps), you **MUST** include the `isAutomated` flag in your request body. `isAutomated` defaults to false, which is what would be typical of an order placed by a human via click. However, if you were to place an order by bot or through some other algorithmic process, `isAutomated` has to be true. The exchange is _very serious_ about this requirement and failing to do so could violate exchange policies.\n\n# WebSockets Conventions\n## Clean up subscriptions\nWhen using websockets for real-time data, you should be aware of the requirement to clean up your subscriptions. With each real-time subscription (such as those created by requesting market data, or a chart) you will be given a subscription ID as a field on the data object. You should cache those IDs locally so that you can unsubscribe from those subscriptions later. Unsubscribing from a real-time data stream requires the real-time ID of that subscription as a parameter.\n> *Note*: You cannot unsubscribe from a `user/syncRequest` subscription other than by closing the connection. However, for the lifetime of your application you will likely not want to or need to unsubscribe from a `syncRequest`.\n\n## Use user/syncrequest\nWhen working with real-time user data, it is best practice to respond to the changes in user data. To do so, we make a request to `user/syncrequest` using a WebSocket. Every time a change occurs for the subscribed user, the linked Tradovate WebSocket Server will push updates to the client that subscribed via the `user/syncrequest` endpoint. These updates come in the form of messages, as described [here](/#section/Tradovate-Specific-Message-Types) This is intended to be called using a WebSocket, and not via HTTP. Permissions on your API Key may affect the available fields on the response object.\n\nSee Also: [`user/syncRequest`](/#operation/syncRequest) The response to this request details what the initial response from the server will look like. The individual entity types that you can receive updates for will have data that matches the interfaces listed in response object."
    },
    {
      "name": "Market Data",
      "description": "# Accessing Market Data\nThe Tradovate Market Data API provides a way to access market data such as quotes, DOM, charts and histograms.\nThe API uses JSON format for request bodies and response data. The exchange of requests and responses are transmitted via the \n[Tradovate WebSocket protocol](/#tag/WebSockets). We have example projects available in both [C#](https://github.com/tradovate/example-api-csharp-trading) \nand [JavaScript](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-08-Realtime-Market-Data). \n\nIn a typical scenario using the Market Data API consists of the following steps:\n\n## 1. Acquire An Access Token Using Credentials\nClient uses the standard [Access](/#tag/Access) procedure to acquire an Access Token.\n\n## 2. Open a WebSocket and Get Authorized\nClient opens a WebSocket connection and sends their access token using the authorization procedure noted in the [WebSockets section](/#tag/WebSockets).\n\n## 3. Build a Request\nRequest parameters are an object in JSON format. Each request for real-time data requires a `symbol` parameter that specifies the contract for which \nmarket data is requested. Contract can be specified either by the contract symbol string or by the contract ID integer:\n\n```js\n{\n    \"symbol\":\"ESM7\" // Contract is specified by contract symbol\n    ...\n}\n// or\n{\n    \"symbol\":123456 // Contract is specified by contract ID\n    ...\n}\n```\n\nRequests may have additional parameters, which are described in the corresponding sections.\n\n## 4. Subscribe to Real-Time Data\nThe client sends the request parameters via WebSocket message to the server, specifying an endpoint such as `md/subscribeQuote`. The server sends back a \n[response message](/#tag/WebSockets#response-message):\n\n- If a response has an error, client can perform [error handling](/#tag/Conventions#error-handling).\n\n- If a response is successful, the corresponding subscription is activated. The client will begin to receive market data. In order to properly \nunsubscribe from market data, the client is responsible for keeping track of the contracts for which subscriptions are activated. A client can have\na single subscription of each type (quotes, DOM, or charts) per contract.\n\n# Handling Market Data\nMarket data arrives from the Tradovate server to the client asynchronously as [event messages](/#tag/Conventions#event-message) of `md` or `chart` types, for example:\n\n  ```js\n  {\n    \"e\":\"md\",\n    \"d\": {\n      \"quotes\": [\n        {\n          \"timestamp\":\"2021-04-13T04:59:06.588Z\",\n          \"contractId\":123456,\n          \"entries\": {\n            \"Bid\": { \"price\":18405.123, \"size\":7.123 },\n            \"TotalTradeVolume\": { \"size\":4118.123 },\n            \"Offer\": { \"price\":18410.012, \"size\":12.35 },\n            \"LowPrice\": { \"price\":18355.23 },\n            \"Trade\": { \"price\":18405.023, \"size\":2.10 },\n            \"OpenInterest\": { \"size\":40702.024 },\n            \"OpeningPrice\": { \"price\":18515.123 },\n            \"HighPrice\": { \"price\":18520.125 },\n            \"SettlementPrice\": { \"price\":18520.257 }\n          }\n        }\n      ]\n    }\n  }\n  ```\n\n# Unsubscribing From Market Data\nMirroring the process for market data subscription, the client creates request parameters, specifies request endpoint such as `md/unsubscribeQuote` and\nsends the request to the Tradovate server. If the request is successful, the server will deactivate your subscription and the client will stop receiving real-time data.\n\n# Request Reference\n\n## Subscribe Quote\n\n**Endpoint**: `md/subscribeQuote`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n**Data message**\n\n```js\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"quotes\": [ // \"quotes\" may contain multiple quote objects\n      {\n        \"timestamp\":\"2021-04-13T04:59:06.588Z\",\n        \"contractId\":123456,\n        \"entries\": {\n            \"Bid\": { \"price\":18405.123, \"size\":7.123 },\n            \"TotalTradeVolume\": { \"size\":4118.123 },\n            \"Offer\": { \"price\":18410.012, \"size\":12.35 },\n            \"LowPrice\": { \"price\":18355.23 },\n            \"Trade\": { \"price\":18405.023, \"size\":2.10 },\n            \"OpenInterest\": { \"size\":40702.024 },\n            \"OpeningPrice\": { \"price\":18515.123 },\n            \"HighPrice\": { \"price\":18520.125 },\n            \"SettlementPrice\": { \"price\":18520.257 }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n## Unsubscribe Quote\n\n**Endpoint**: `md/unsubscribeQuote`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n\n## Subscribe DOM\n\n**Endpoint**: `md/subscribeDOM`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n**Data message**\n\n```js\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"doms\": [ // \"doms\" may contain multiple DOM objects\n      {\n        \"contractId\":123456, // ID of the DOM contract\n        \"timestamp\":\"2021-04-13T11:33:57.488Z\",\n        \"bids\": [ // Actual depth of \"bids\" may varies depending on available data\n          {\"price\":2335.25,\"size\":33.54},\n          ...\n          {\"price\":2333,\"size\":758.21}\n        ],\n        \"offers\": [ // Actual depth of \"offers\" may varies depending on available data\n          {\"price\":2335.5,\"size\":255.12},\n          ...\n          {\"price\":2337.75,\"size\":466.64}\n        ]\n      }\n    ]\n  }\n}\n```\n\n\n## Unsubscribe DOM\n\n**Endpoint**: `md/unsubscribeDOM`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n\n## Subscribe Histogram\n\n**Endpoint**: `md/subscribeHistogram`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n**Data message**\n\n```js\n{\n  \"e\":\"md\",\n  \"d\": {\n    \"histograms\": [ // \"histograms\" may contain multiple histogram objects\n      {\n        \"contractId\":123456, // ID of the histogram contract\n        \"timestamp\":\"2017-04-13T11:33:57.412Z\",\n        \"tradeDate\": {\n          \"year\":2022,\n          \"month\":4,\n          \"day\":13\n        },\n        \"base\":2338.75,\n        \"items\": { // Actual number of histogram items may depend on data\n          \"-14\":5906.67,\n          ...\n          \"2\":1234.55,\n        },\n        \"refresh\":false\n      }\n    ]\n  }\n}\n```\n\n\n## Unsubscribe Histogram\n\n**Endpoint**: `md/unsubscribeHistogram`\n\n**Parameters**:\n\n```js\n{ \"symbol\": \"ESM7\" | 123456 }\n```\n\n\n\n## Get Chart\n\n**Description**: Client may have multiple charts for the same contract, so the response for `md/getChart` request contains a subscription ID to properly track and unsubscribe from a real-time chart subscription. If you're using JavaScript, don't forget to check the [section on charts](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-10-Chart-Data) in our API's [comprehensive JavaScript tutorial](https://github.com/tradovate/example-api-js).\n\n**Endpoint**: `md/getChart`\n\n**Parameters**:\n\n```js\n{\n  \"symbol\":\"ESM7\" | 123456,\n  \"chartDescription\": {\n    \"underlyingType\":\"MinuteBar\", // Available values: Tick, DailyBar, MinuteBar, Custom, DOM\n    \"elementSize\":15,\n    \"elementSizeUnit\":\"UnderlyingUnits\", // Available values: Volume, Range, UnderlyingUnits, Renko, MomentumRange, PointAndFigure, OFARange\n    \"withHistogram\": true | false\n  },\n  \"timeRange\": {\n    // All fields in \"timeRange\" are optional, but at least anyone is required\n    \"closestTimestamp\":\"2017-04-13T11:33Z\",\n    \"closestTickId\":123,\n    \"asFarAsTimestamp\":\"2017-04-13T11:33Z\",\n    \"asMuchAsElements\":66\n  },\n}\n```\n\n**Response**\n\nA response for `md/getChart` request contains two subscription ID, `historicalId` and `realtimeId`. Client needs to store `realtimeId` value to properly cancel real-time chart subscription via `md/cancelChart` request.\n\n```js\n{\n  \"s\":200,\n  \"i\":13,\n  \"d\":{\n    \"historicalId\":32,\n    \"realtimeId\":31\n  }\n}\n```\n\n**Data message**\n\n```js\n{\n  \"e\":\"chart\",\n  \"d\": {\n    \"charts\": [ // \"charts\" may contain multiple chart objects\n      {\n        \"id\":9, // \"id\" matches either historicalId or realtimeId values from response\n        \"td\":20170413, // Trade date as a number with value YYYYMMDD\n        \"bars\": [ // \"bars\" may contain multiple bar objects\n          {\n            \"timestamp\":\"2017-04-13T11:00:00.000Z\",\n            \"open\":2334.25,\n            \"high\":2334.5,\n            \"low\":2333,\n            \"close\":2333.75,\n            \"upVolume\":4712.234,\n            \"downVolume\":201.124,\n            \"upTicks\":1333.567,\n            \"downTicks\":82.890,\n            \"bidVolume\":2857.123,\n            \"offerVolume\":2056.224\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n## Cancel Chart\n\n**Endpoint**: `md/cancelChart`\n\n**Parameters**:\n\n```js\n{\n  \"subscriptionId\": 123456 // The value of historical chart subscription ID from `md/getChart` response\n}\n```\n"
    },
    {
      "name": "Using Tick Charts",
      "description": "# Requesting Tick Charts\nTo get Tick Chart data, we can use the same process described in the [Market Data](/#tag/MarketData) section. Just like with Market Data, we need\nto open and authorize a WebSocket first. If you're following the [comprehensive JavaScript tutorial](https://github.com/tradovate/example-api-js),\nyou can find tick chart examples [here](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-11-Tick-Charts).\n\nJust like requesting regular chart data, we must construct a request body with the `symbol`, `chartDescription`,\nand `timeRange` fields. However, we need to lock `elementSize` to 1 and set `underlyingType` to `\"Tick\"`. For example:\n\n```js\n{\n  \"symbol\": \"ESU9\",\n  \"chartDescription\": {\n    \"underlyingType\": \"Tick\",\n    \"elementSize\": 1,\n    \"elementSizeUnit\": \"UnderlyingUnits\"\n  },\n  \"timeRange\": {\n    ...\n  }\n}\n```\n\nThen client then calls the standard `md/getChart` endpoint and passes the request to it. The Tradovate server responds with the standard JSON object schema\nfor chart data. Because an unsubscription request requires the real-time subscription ID sent with this response, the client should store the ID of each \nsubscription that they create so that they can properly unsubscribe later.\n\n# Data stream messages\n\nA typical data stream message has the following structure:\n\n```js\n{\n    \"charts\": [                     // Array of packets.\n        {\n            \"id\": 16335,            // Subscription ID, the same as historical/real-time subscription IDs from request response.\n            \"s\": \"db\",              // Source of packet data.\n            \"td\": 20210718,         // Trade date YYYYMMDD.\n            \"bp\": 11917,            // Base price of the packet (integer number of contract tick sizes).\n                                    // Tick prices are calculated as relative from this one.\n            \"bt\": 1563421179735,    // Base timestamp of the packet.\n                                    // Tick timestamps are calculated as relative from this value.\n            \"ts\": 0.25,             // Tick size of the contract for which the tick chart is requested.\n            \"tks\": [                // Array of ticks of this packet.\n                {\n                    \"t\": 0,         // Tick relative timestamp.\n                                    // Actual tick timestamp is packet.bt + tick.t\n                    \"p\": 0,         // Tick relative price (in contract tick sizes).\n                                    // Actual tick price is packet.bp + tick.p\n                    \"s\": 3,         // Tick size (seems more proper name should be tick volume).\n                                    // Please don't confuse with contract tick size (packet.ts).\n                    \"b\": -1,        // Bid relative price (optional).\n                                    // Actual bid price is packet.bp + tick.b\n                    \"a\": 0,         // Ask relative price (optional).\n                                    // Actual ask price is packet.bp + tick.a\n                    \"bs\": 122.21,   // Bid size (optional).\n                    \"as\": 28.35,    // Ask size (optional).\n                    \"id\": 11768401  // Tick ID\n                },\n                ...\n            ]\n        },\n        // Multiple packets are possible...\n        {\n            \"id\": 16335,\n            eoh: true               // End of history flag.\n                                    // If the request time range assumes historical data,\n                                    // this flag indicates that historical ticks are loaded and\n                                    // further packets will contain real-time ticks.\n        }\n    ]\n};\n```\n\n## Using the Tick Stream\nThe following code snippet is an example of how to process tick chart data stream messages and calculate actual ticks for client consumption.\n\nThe function takes a data stream message and converts its packets into a list of actual ticks. Usage of this function assumes that you'll be passing\nit the message data retrieved from the WebSocket. Because tick stream data can arrive out of chronological order, it is the client's responsibility to \nstore and sort pertinent portions of this data.\n\n```js\nfunction processTickChartMessage(msg) {\n    const result = [];\n    if (msg.charts && msg.charts.length) {\n        for (let i = 0; i < msg.charts.length; ++i) {\n            const packet = msg.charts[i];\n            if (packet.eoh) { //end-of-history,\n                // Historical ticks are loaded.\n            }\n            else if (packet.tks && packet.tks.length) {\n                for (let j = 0; j < packet.tks.length; ++j) {\n                    const tick = packet.tks[j];\n\n                    const timestamp = packet.bt + tick.t;   // Actual tick timestamp\n                    const price = packet.bp + tick.p;       // Actual tick price\n\n                    const bid = tick.bs && (packet.bp + tick.b);    // Actual bid price (if bid size defined)\n                    const ask = tick.as && (packet.bp + tick.a);    // Actual ask price (if ask size defined)\n\n                    result.push({\n                        id: tick.id,\n                        timestamp: new Date(timestamp),\n\n                        price: price * packet.ts,           // Tick price as contract price\n                        size: tick.s,                       // Tick size (tick volume)\n\n                        bidPrice: bid && (bid * packet.ts), // Bid price as contract price\n                        bidSize: tick.bs,\n\n                        askPrice: ask && (ask * packet.ts), // Ask price as contract price\n                        askSize: tick.as,\n                    });\n                }\n            }\n        }\n    }\n    return result;\n}\n```\n"
    },
    {
      "name": "WebSockets",
      "description": "# Connecting to the WebSocket Server\nThe current version of our WebSocket-based protocol is inherited from [SockJS protocol](http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-42) which was used in earlier versions. For the WebSockets section of the comprehensive JavaScript guide to the Tradovate API, go [here](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-05-WebSockets-Start). For the C# sample project, go [here](https://github.com/tradovate/example-api-csharp-trading) \n\nYou'll need to create a WebSocket instance using one of the real-time API URL's. However, instead of using the `https://` prefix we will\nneed to use the `wss://` WebSocket protocol prefix. Here's an example using our demo API URL:\n\n`wss://demo.tradovateapi.com/v1/websocket`\n\n# Server Frames\nThe WebSocket server communicates in _frames_. A frame consists of two parts - a 'type' prefix character and an array of JSON data. These two parts are concatenated into a string, and we will be responsible for creating the logic to deconstruct such messages on the client. The following are the message types supported and sent by the Tradovate WebSocket:\n\n\n- `'o'`: Open frame. Every time a new session is established, the server must immediately send the open frame. This is required, as some protocols (mostly polling) can't distinguish between a properly established connection and a broken one - we must convince the client that it is indeed a valid URL and it can be expecting further messages in the future via that URL.\n\n- `'h'`: Heartbeat frame. Most loadbalancers have arbitrary timeouts on connections. In order to keep connections from breaking, the server must send a heartbeat frame every now and then. The server sends a heartbeat about every 2.5 seconds, and to keep the connection alive the client must also send a response beat in the form of an empty array, stringified (`'[]'`)\n\n- `'a'`: A string containing an Array of JSON-encoded messages. For example: `'a[{\"data\": \"value\"}]'`.\n\n- `'c'`: Close frame. This frame is send to the browser every time the client asks for data on closed connection. This may happen multiple times. Close frame contains a code and a string explaining a reason of closure, like: `c[3000, \"Go away!\"]`.\n\n## Decoding Server Frames\n\nTradovate uses 'a' frames as a backbone for its own message protocol. Below are a few bits of example data.\n```\na[{\"s\":200,\"i\":23,\"d\":{\"id\":65543,\"name\":\"CLZ6\",\"contractMaturityId\":6727}}]\na[{\"e\":\"props\",\"d\":{\"entityType\":\"order\",\"eventType\":\"Created\",\"entity\":{\"id\":210518,\"accountId\":25,\"contractId\":560901,\"timestamp\":\"2016-11-04T00:02:36.626Z\",\"action\":\"Sell\",\"ordStatus\":\"PendingNew\",\"admin\":false}}}]\n```\n\nYou can quickly parse frames into more consumable data using a function such as the `prepareMsg` example below. It will turn the string message into a tuple that you can destructure.\n\n```js\nfunction prepareMsg(raw) {\n    const T = raw.slice(0, 1)\n    let payload = null\n    const data = raw.slice(1)\n    if(data) {\n        payload = JSON.parse(data)\n    }\n    return [T, payload]\n}\n\n//usage:\nmySocket.onmessage = msg => {\n    //data may be null\n    const [T, data] = prepareMsg(msg.data)\n    switch(T) {\n        case 'a': {\n            //react to data\n            break\n        }\n    }\n}\n```\n\n# Tradovate-Specific Message Types\nThe Tradovate Socket Servers interact with WebSocket clients by sending messages. The data portion of these messages is always an array of JSON objects. There are two main categories of messages that the Tradovate Servers will send - server events and responses to client request.\n\n## Server Event Message\nAn event message has the following structure:\n\n```\n{\n  \"e\":\"props\",\n  \"d\":{\n    \"entityType\":\"order\",\n    \"eventType\":\"Created\",\n    \"entity\":{\n      \"id\":210518,\n      \"accountId\":25,\n      \"contractId\":560901,\n      \"timestamp\":\"2016-11-04T00:02:36.626Z\",\n      \"action\":\"Sell\",\n      \"ordStatus\":\"PendingNew\",\n      \"admin\":false\n    }\n  }\n}\n```\n\nThe `\"e\"` field specifies an event kind:\n- `\"props\"`: this is a notification that some entity was created, updated or deleted. \"d\" field specifies details of the event with the next structure:\n  * `\"entityType\"` field\n  * `\"entity\"` field. JSON structure of object (or array of objects) specified in this field is identical to JSON of entity that accessible via corresponding REST API request like *entityType*/item. For example, if entityType=account, JSON can be found in the [response specification of account/item call](/#operation/accountItem)\n  * `\"eventType\"` field with options \"Created\", \"Updated\" or \"Deleted\"\n- `\"shutdown\"`: a notification before graceful shutdown of connection. \"d\" field specifies details:\n  * `\"reasonCode\"` field with options \"Maintenance\", \"ConnectionQuotaReached\", \"IPQuotaReached\"\n  * `\"reason\"` field is optional and may contain a readable explanation\n- `\"md\"` and \"chart\": these notifications are used by market data feed services only, the description of \"d\" field is [here](/#tag/MarketData)\n- `\"clock\"`: Market Replay clock synchronization message. See the [Market Replay](/#section/Request-Examples/Market-Replay) section below.\n\n## Response Message\n\nA response message is issued when a client makes a request. These messages are intended to mimic REST API responses and have the following structure:\n\n```\n{\n  \"i\":26,\n  \"s\":200,\n  \"d\":{\n    \"id\":478866,\n    \"name\":\"6EZ6\",\n    \"contractMaturityId\":23574\n  }\n}\n```\n- `\"i\"` field is a id of corresponding client request (see \"Client requests\" below). A responses id will always match the id of the request that generated it.\n- `\"s\"` field is a HTTP status code of response\n- `\"d\"` field is a content of response. If HTTP status is 2xx, this field contains JSON response as defined in Swagger specification of the corresponding request. Otherwise, `\"d\"` is a string representation of error text.\n\n# Client Requests\nSockJS doesn't define framing for client requests. For this reason, we use standard text for our client request protocol.\n\nEach frame sent by the client contains exactly one request. The frame consists of four fields:\n- An endpoint name as defined in the spec. These are any of the endpoints that you could request from the standard REST API.\n- A unique integer ID of the request. The ID should be unique in the scope of the current connection. This ID will be used as a reference by the server in\nthe response messages (see \"Response Message\" above)\n- an optional field with parameters identical to query parameters of REST API\n- an optional field that is identical to a body parameter of REST API\n\nThe four fields _must be_ separated by the `'\\n'` (\"new line\") character. This is how message parameters are delimited when they get decoded.\n\n\n## Request Examples\nAn example of a request without query or body:\n\n```\nexecutionReport/list\n4\n\n```\n\nAn example of a request with a query parameter:\n\n```\ntradingPermission/ldeps\n8\nmasterids=1\n```\n\nAn example of a request with a body:\n\n```\ncontract/rollcontract\n33\n\n{\"name\":\"YMZ6\",\"forward\":true,\"ifExpired\":true}\n```\n\n# Authorization\nBecause WebSocket is a permanent connection, it is sufficient to authorize the connection just once per application instance.\nWe use a special request with the `authorize` endpoint and an access token in in the message body.\n\n```\nauthorize\n2\n\nuST01MhJMF3cR3lCs-gdQ9W0AzomYLaqsWcZ_GYgAspPRf-ZS-Wb7q3sW3pUafTm90ba4\n```\nDon't forget to add the newline in between parameters.\nA successful response will look like this, were `s` represents the status code (200 here) and `i` is the ID of the request sent:\n\n```\na[{\"s\":200,\"i\":2}]\n```\n\n# User Synchronization\nOnce you've opened a real-time connection via WebSocket, it is a good idea to synchronize your user data. Using the `user/syncrequest` endpoint will allow us to get an update with any data changes that pertain to your user. This is the core of digesting real-time data about your user, like calculating profits and losses, or getting a snapshot of your current margins. For more information on the response object, see the [syncRequest operation](/#operation/syncRequest). Remember that this endpoint is intended for use via WebSocket. \n> Keep in mind that the fields present on the response object of a `'user/syncrequest'` may be affected by your API Key's permissions settings.\n\n# Market Replay\nMarket Replay service follows the same protocols for trading and market data as regular Tradovate services. \n\nHostnames: `wss://replay.tradovateapi.com/v1/websocket`\n\nThe client application should set initial parameters for replay session right after successful authorization. The request should be formatted like any other client request. The endpoint name of the request should be `replay/initializeclock`. Parameters:\n* `startTimestamp`: start time of the session\n* `speed`: speed of replaying in percents. The valid range is 0-400 \n* `initialBalance`: a dollar amount of replay account. The account will be created automatically with the specified cash balance and will be discarded at the end of the replay session.\n\nExample:\n\n```\nreplay/initializeclock\n3\n\n{\"startTimestamp\":\"2019-08-26T16:43:00.000Z\",\"speed\":20,\"initialBalance\":51000}\n```\n\nThe response will indicate if a session started successfully:\n\n```\na[{\"s\":200,\"i\":3,\"d\":{\"ok\":true}}]\n```\n\nThere is allowed only one replay session per user. An attempt to initialize a new session will reset the currently running one. Multiple connections can join to the same session. A lack of initialization request is treated as a joining to existing one.\n\nTo maintain the clock synchronization between the server-side 'replay' clock and the client clock, the server pushes periodical clock synch event messages like this:\n\n```\na[{\"e\":\"clock\",\"d\":\"{\\\"t\\\":\\\"2019-08-26T16:43:08.599Z\\\",\\\"s\\\":20}\"}]\n```\n\n`d` field contains a text representation of JSON entity with the next fields:\n- `t`: the current replay timestamp\n- `s`: the current replay speed\n\nThe clock event can typically be used to determine whether your replay session has reached a certain time. It is also useful to know when the server has limited your speed, in which case you'll need to send a request to change the replay speed, mentioned below.\n\nThe client app can control the speed of the replay session via `replay/changespeed` request. The request should include `speed` parameter with a range from 0 to 400 (in percents), 400 being 4X the real-time speed of the market.\n\nExample:\n```\nreplay/changespeed\n49\n\n{\"speed\":100}\n```\n\nSometimes the server will pause your replay. In this case, the client will continue to receive clock synch messages with `speed` field equals to 0. The client app can unpause it via `replay/changespeed` request.\n\nThe session is discarded automatically when there are no connections associated with it.\n\nDepending on the customer's entitlements, Market Replay functionality can be limited or disallowed at all. To check if a picked date/time is permitted for the user, the client app can use the next REST API call [replay/checkReplaySession](/#operation/checkReplaySession) before initiating replay connection.\n\n\n## Client Heartbeats\nEven WebSockets have built-in pings. As mentioned in the [Server Frames](/#tag/WebSockets#Server-Frames) section, a client is responsible to send heartbeats every 2.5 seconds to avoid closing by server due to inactivity. A heartbeat should be a frame with \"[]\" (empty array) as its text, which you can send using the `WebSocket.send` method. It is best to adopt a mechanism that doesn't rely on `setInterval` when developing for web - this function can be throttled by the browser leading to disconnection ultimately. Instead generate a timestamp (`new Date()` will do) with each received message. Check that against the timestamp of the last message received, and if the time has exceeded 2500ms send a heartbeat frame. You can find an example of how to do this [here](https://github.com/tradovate/example-api-js/tree/main/tutorial/WebSockets/EX-06-Heartbeats).\n> Note: A server that is actively streaming live data (such as a market data subscription) will not send heartbeats while outputting messages. So long as the developer ensures that the client sends heartbeats every 2.5 seconds, the connection will stay alive.\n\n## Reference implementations\nWe have reference projects for both C# and JavaScript users. You can find the C# project [here](https://github.com/tradovate/example-api-csharp-trading), and the JavaScript tutorial [here](https://github.com/tradovate/example-api-js).\n"
    }
  ],
  "x-traitTag": true,
  "x-tagGroups": [
    {
      "name": "Guides",
      "tags": [
        "Access",
        "Conventions",
        "WebSockets",
        "Market Data",
        "Using Tick Charts"
      ]
    },
    {
      "name": "API",
      "tags": [
        "Authentication",
        "ContractLibrary",
        "Orders",
        "Positions",
        "Accounting",
        "Risks",
        "Fees",
        "Prices",
        "Alerts",
        "Configuration",
        "Users",
        "Chat"
      ]
    }
  ],
  "x-logo": {
    "url": "https://cdn-d.tradovate.com/tradovate/img/icons/iphone-retina.png",
    "backgroundColor": "#FFFFFF",
    "altText": "Tradovate"
  }
}