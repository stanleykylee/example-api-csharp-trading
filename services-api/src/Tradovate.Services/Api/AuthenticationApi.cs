/* 
 * Tradovate API
 *
 * # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/_*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse AccessTokenRequest (AccessTokenRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> AccessTokenRequestWithHttpInfo (AccessTokenRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Shows Basic user data for the calling user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuthMeResponse</returns>
        OAuthMeResponse Me ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Shows Basic user data for the calling user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuthMeResponse</returns>
        ApiResponse<OAuthMeResponse> MeWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OAuthTokenResponse</returns>
        OAuthTokenResponse OAuthToken (OAuthToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthTokenResponse</returns>
        ApiResponse<OAuthTokenResponse> OAuthTokenWithHttpInfo (OAuthToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request a renewal for an existing access token.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse RenewAccessToken ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request a renewal for an existing access token.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> RenewAccessTokenWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> AccessTokenRequestAsync (AccessTokenRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> AccessTokenRequestAsyncWithHttpInfo (AccessTokenRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Shows Basic user data for the calling user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OAuthMeResponse</returns>
        System.Threading.Tasks.Task<OAuthMeResponse> MeAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Shows Basic user data for the calling user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OAuthMeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthMeResponse>> MeAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OAuthTokenResponse</returns>
        System.Threading.Tasks.Task<OAuthTokenResponse> OAuthTokenAsync (OAuthToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthTokenResponse>> OAuthTokenAsyncWithHttpInfo (OAuthToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request a renewal for an existing access token.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> RenewAccessTokenAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request a renewal for an existing access token.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> RenewAccessTokenAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthenticationApi : IAuthenticationApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Tradovate.Services.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi()
        {
            this.Configuration = Tradovate.Services.Client.Configuration.Default;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Tradovate.Services.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tradovate.Services.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradovate.Services.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse AccessTokenRequest (AccessTokenRequest body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = AccessTokenRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > AccessTokenRequestWithHttpInfo (AccessTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AccessTokenRequest");

            var localVarPath = "/auth/accesstokenrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccessTokenRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> AccessTokenRequestAsync (AccessTokenRequest body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await AccessTokenRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  #### Request an access token using your user credentials and API Key.   See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.  ### Acquiring an Access Token  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;https://live.tradovateapi.com/v1&#x27;  const credentials &#x3D; {     name:       \&quot;Your credentials here\&quot;,     password:   \&quot;Your credentials here\&quot;,     appId:      \&quot;Sample App\&quot;,     appVersion: \&quot;1.0\&quot;,     cid:        0,     sec:        \&quot;Your API secret here\&quot; }  async function getAccessToken() {     let response &#x3D; await fetch(URL + &#x27;/auth/accessTokenRequest&#x27;, {         method: &#x27;POST&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;         }     })     let result &#x3D; await response.json()     return result // { accessToken, mdAccessToken, userId, ... } }  //...  async function main() {     const { accessToken, mdAccessToken, userId } &#x3D; await getAccessToken()      //use access token } &#x60;&#x60;&#x60;  ### Using an Access Token  &#x60;&#x60;&#x60;js //use the Authorization: Bearer schema in API POST and GET requests  //simple /account/list endpoint requires no body or query async function getAccounts() {     let response &#x3D; await fetch(URL + &#x27;/account/list&#x27;, {         method: &#x27;GET&#x27;,         headers: {             &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,             Authorization: &#x60;Bearer ${accessToken}&#x60; //Access Token use in HTTP requests         }     })     let result &#x3D; await response.json()     return result }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> AccessTokenRequestAsyncWithHttpInfo (AccessTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AccessTokenRequest");

            var localVarPath = "/auth/accesstokenrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccessTokenRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Shows Basic user data for the calling user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuthMeResponse</returns>
        public OAuthMeResponse Me ()
        {
             ApiResponse<OAuthMeResponse> localVarResponse = MeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Shows Basic user data for the calling user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuthMeResponse</returns>
        public ApiResponse< OAuthMeResponse > MeWithHttpInfo ()
        {

            var localVarPath = "/auth/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Me", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuthMeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuthMeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuthMeResponse)));
        }

        /// <summary>
        ///  ### Shows Basic user data for the calling user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OAuthMeResponse</returns>
        public async System.Threading.Tasks.Task<OAuthMeResponse> MeAsync ()
        {
             ApiResponse<OAuthMeResponse> localVarResponse = await MeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Shows Basic user data for the calling user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OAuthMeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthMeResponse>> MeAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Me", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuthMeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuthMeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuthMeResponse)));
        }

        /// <summary>
        ///  ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OAuthTokenResponse</returns>
        public OAuthTokenResponse OAuthToken (OAuthToken body)
        {
             ApiResponse<OAuthTokenResponse> localVarResponse = OAuthTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthTokenResponse</returns>
        public ApiResponse< OAuthTokenResponse > OAuthTokenWithHttpInfo (OAuthToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->OAuthToken");

            var localVarPath = "/auth/oauthtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuthTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuthTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuthTokenResponse)));
        }

        /// <summary>
        ///  ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OAuthTokenResponse</returns>
        public async System.Threading.Tasks.Task<OAuthTokenResponse> OAuthTokenAsync (OAuthToken body)
        {
             ApiResponse<OAuthTokenResponse> localVarResponse = await OAuthTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used to exchange your OAuth code for an access token. Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthTokenResponse>> OAuthTokenAsyncWithHttpInfo (OAuthToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->OAuthToken");

            var localVarPath = "/auth/oauthtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuthTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuthTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuthTokenResponse)));
        }

        /// <summary>
        ///  ### Request a renewal for an existing access token.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse RenewAccessToken ()
        {
             ApiResponse<AccessTokenResponse> localVarResponse = RenewAccessTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Request a renewal for an existing access token.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > RenewAccessTokenWithHttpInfo ()
        {

            var localVarPath = "/auth/renewaccesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Request a renewal for an existing access token.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> RenewAccessTokenAsync ()
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await RenewAccessTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Request a renewal for an existing access token.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> RenewAccessTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/renewaccesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

    }
}
