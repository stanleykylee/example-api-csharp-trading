/* 
 * Tradovate API
 *
 * # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/_*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Called to accept a given trading permission granted by another party.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        TradingPermissionResponse AcceptTradingPermission (AcceptTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Called to accept a given trading permission granted by another party.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        ApiResponse<TradingPermissionResponse> AcceptTradingPermissionWithHttpInfo (AcceptTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to setup a second market data subscription with active auto-renewal.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        SecondMarketDataSubscriptionResponse ActivateSecondMarketDataSubscriptionRenewal (ActivateSecondMarketDataSubscriptionRenewal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to setup a second market data subscription with active auto-renewal.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        ApiResponse<SecondMarketDataSubscriptionResponse> ActivateSecondMarketDataSubscriptionRenewalWithHttpInfo (ActivateSecondMarketDataSubscriptionRenewal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EntitlementSubscriptionResponse</returns>
        EntitlementSubscriptionResponse AddEntitlementSubscription (AddEntitlementSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EntitlementSubscriptionResponse</returns>
        ApiResponse<EntitlementSubscriptionResponse> AddEntitlementSubscriptionWithHttpInfo (AddEntitlementSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a subscription to Market Data for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscriptionResponse</returns>
        MarketDataSubscriptionResponse AddMarketDataSubscription (AddMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a subscription to Market Data for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscriptionResponse</returns>
        ApiResponse<MarketDataSubscriptionResponse> AddMarketDataSubscriptionWithHttpInfo (AddMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        SecondMarketDataSubscriptionResponse AddSecondMarketDataSubscription (AddSecondMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        ApiResponse<SecondMarketDataSubscriptionResponse> AddSecondMarketDataSubscriptionWithHttpInfo (AddSecondMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to add a Tradovate Trader membership plan for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscriptionResponse</returns>
        TradovateSubscriptionResponse AddTradovateSubscription (AddTradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to add a Tradovate Trader membership plan for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscriptionResponse</returns>
        ApiResponse<TradovateSubscriptionResponse> AddTradovateSubscriptionWithHttpInfo (AddTradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CancelEverythingResponse</returns>
        CancelEverythingResponse CancelEverything (CancelEverything body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CancelEverythingResponse</returns>
        ApiResponse<CancelEverythingResponse> CancelEverythingWithHttpInfo (CancelEverything body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        SecondMarketDataSubscriptionResponse CancelSecondMarketDataSubscription (CancelSecondMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        ApiResponse<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionWithHttpInfo (CancelSecondMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        SecondMarketDataSubscriptionResponse CancelSecondMarketDataSubscriptionRenewal (CancelSecondMarketDataSubscriptionRenewal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        ApiResponse<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionRenewalWithHttpInfo (CancelSecondMarketDataSubscriptionRenewal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a Tradovate Trader membership plan.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscriptionResponse</returns>
        TradovateSubscriptionResponse CancelTradovateSubscription (CancelTradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a Tradovate Trader membership plan.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscriptionResponse</returns>
        ApiResponse<TradovateSubscriptionResponse> CancelTradovateSubscriptionWithHttpInfo (CancelTradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the permissions for a Trader plugin.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse ChangePluginPermission (ChangePluginPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the permissions for a Trader plugin.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> ChangePluginPermissionWithHttpInfo (ChangePluginPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        List<ContactInfo> ContactInfoDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        ApiResponse<List<ContactInfo>> ContactInfoDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContactInfo type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactInfo</returns>
        ContactInfo ContactInfoItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContactInfo type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactInfo</returns>
        ApiResponse<ContactInfo> ContactInfoItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContactInfo type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        List<ContactInfo> ContactInfoItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContactInfo type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        ApiResponse<List<ContactInfo>> ContactInfoItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        List<ContactInfo> ContactInfoLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        ApiResponse<List<ContactInfo>> ContactInfoLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        TradingPermissionResponse CreateTradingPermission (CreateTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        ApiResponse<TradingPermissionResponse> CreateTradingPermissionWithHttpInfo (CreateTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the granted trading permissions associated with this account.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionsResponse</returns>
        TradingPermissionsResponse GetAccountTradingPermissions (GetAccountTradingPermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the granted trading permissions associated with this account.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionsResponse</returns>
        ApiResponse<TradingPermissionsResponse> GetAccountTradingPermissionsWithHttpInfo (GetAccountTradingPermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the current price of a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionCostResponse</returns>
        SecondMarketDataSubscriptionCostResponse GetSecondMarketDataSubscriptionCost (GetSecondMarketDataSubscriptionCost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the current price of a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionCostResponse</returns>
        ApiResponse<SecondMarketDataSubscriptionCostResponse> GetSecondMarketDataSubscriptionCostWithHttpInfo (GetSecondMarketDataSubscriptionCost body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscription</returns>
        MarketDataSubscription MarketDataSubscriptionCreate (MarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        ApiResponse<MarketDataSubscription> MarketDataSubscriptionCreateWithHttpInfo (MarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        List<MarketDataSubscription> MarketDataSubscriptionDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        ApiResponse<List<MarketDataSubscription>> MarketDataSubscriptionDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of MarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MarketDataSubscription</returns>
        MarketDataSubscription MarketDataSubscriptionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of MarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        ApiResponse<MarketDataSubscription> MarketDataSubscriptionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        List<MarketDataSubscription> MarketDataSubscriptionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        ApiResponse<List<MarketDataSubscription>> MarketDataSubscriptionItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        List<MarketDataSubscription> MarketDataSubscriptionLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        ApiResponse<List<MarketDataSubscription>> MarketDataSubscriptionLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        List<MarketDataSubscription> MarketDataSubscriptionList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        ApiResponse<List<MarketDataSubscription>> MarketDataSubscriptionListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscription</returns>
        MarketDataSubscription MarketDataSubscriptionUpdate (MarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        ApiResponse<MarketDataSubscription> MarketDataSubscriptionUpdateWithHttpInfo (MarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to modify account username and password.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse ModifyCredentials (ModifyCredentials body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to modify account username and password.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> ModifyCredentialsWithHttpInfo (ModifyCredentials body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account email address information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserStatusMessage</returns>
        UserStatusMessage ModifyEmailAddress (ModifyEmailAddress body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account email address information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserStatusMessage</returns>
        ApiResponse<UserStatusMessage> ModifyEmailAddressWithHttpInfo (ModifyEmailAddress body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account password information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse ModifyPassword (ModifyPassword body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account password information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> ModifyPasswordWithHttpInfo (ModifyPassword body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request to open a Demo account for a user. 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OpenDemoAccountResponse</returns>
        OpenDemoAccountResponse OpenDemoAccount (OpenDemoAccount body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request to open a Demo account for a user. 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OpenDemoAccountResponse</returns>
        ApiResponse<OpenDemoAccountResponse> OpenDemoAccountWithHttpInfo (OpenDemoAccount body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Organization</returns>
        Organization OrganizationFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> OrganizationFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Organization</returns>
        Organization OrganizationItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> OrganizationItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Organization type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> OrganizationItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Organization type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> OrganizationItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Organization type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> OrganizationList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Organization type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> OrganizationListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> OrganizationSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> OrganizationSuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        TradingPermissionResponse RequestTradingPermission (RequestTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        ApiResponse<TradingPermissionResponse> RequestTradingPermissionWithHttpInfo (RequestTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        TradingPermissionResponse RevokeTradingPermission (RevokeTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        ApiResponse<TradingPermissionResponse> RevokeTradingPermissionWithHttpInfo (RevokeTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse RevokeTradingPermissions (RevokeTradingPermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> RevokeTradingPermissionsWithHttpInfo (RevokeTradingPermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        List<SecondMarketDataSubscription> SecondMarketDataSubscriptionDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        ApiResponse<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SecondMarketDataSubscription</returns>
        SecondMarketDataSubscription SecondMarketDataSubscriptionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscription</returns>
        ApiResponse<SecondMarketDataSubscription> SecondMarketDataSubscriptionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        List<SecondMarketDataSubscription> SecondMarketDataSubscriptionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        ApiResponse<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        List<SecondMarketDataSubscription> SecondMarketDataSubscriptionLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        ApiResponse<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        List<SecondMarketDataSubscription> SecondMarketDataSubscriptionList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        ApiResponse<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used by B2B partners to create users for their own organizations.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignUpResponse</returns>
        SignUpResponse SignUpOrganizationMember (SignUpOrganizationMember body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used by B2B partners to create users for their own organizations.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignUpResponse</returns>
        ApiResponse<SignUpResponse> SignUpOrganizationMemberWithHttpInfo (SignUpOrganizationMember body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SyncMessage</returns>
        SyncMessage SyncRequest (SyncRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SyncMessage</returns>
        ApiResponse<SyncMessage> SyncRequestWithHttpInfo (SyncRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscription</returns>
        TradovateSubscription TradovateSubscriptionCreate (TradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        ApiResponse<TradovateSubscription> TradovateSubscriptionCreateWithHttpInfo (TradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        List<TradovateSubscription> TradovateSubscriptionDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        ApiResponse<List<TradovateSubscription>> TradovateSubscriptionDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of TradovateSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TradovateSubscription</returns>
        TradovateSubscription TradovateSubscriptionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of TradovateSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        ApiResponse<TradovateSubscription> TradovateSubscriptionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of TradovateSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        List<TradovateSubscription> TradovateSubscriptionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of TradovateSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        ApiResponse<List<TradovateSubscription>> TradovateSubscriptionItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        List<TradovateSubscription> TradovateSubscriptionLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        ApiResponse<List<TradovateSubscription>> TradovateSubscriptionLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        List<TradovateSubscription> TradovateSubscriptionList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        ApiResponse<List<TradovateSubscription>> TradovateSubscriptionListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscription</returns>
        TradovateSubscription TradovateSubscriptionUpdate (TradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        ApiResponse<TradovateSubscription> TradovateSubscriptionUpdateWithHttpInfo (TradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>User</returns>
        User UserFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User UserItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of User type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of User type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserPlugin</returns>
        UserPlugin UserPluginCreate (UserPlugin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        ApiResponse<UserPlugin> UserPluginCreateWithHttpInfo (UserPlugin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        List<UserPlugin> UserPluginDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        ApiResponse<List<UserPlugin>> UserPluginDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserPlugin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserPlugin</returns>
        UserPlugin UserPluginItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserPlugin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        ApiResponse<UserPlugin> UserPluginItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserPlugin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        List<UserPlugin> UserPluginItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserPlugin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        ApiResponse<List<UserPlugin>> UserPluginItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        List<UserPlugin> UserPluginLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        ApiResponse<List<UserPlugin>> UserPluginLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        List<UserPlugin> UserPluginList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        ApiResponse<List<UserPlugin>> UserPluginListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserPlugin</returns>
        UserPlugin UserPluginUpdate (UserPlugin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        ApiResponse<UserPlugin> UserPluginUpdateWithHttpInfo (UserPlugin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        List<UserProperty> UserPropertyDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        ApiResponse<List<UserProperty>> UserPropertyDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserProperty type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserProperty</returns>
        UserProperty UserPropertyItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserProperty type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserProperty</returns>
        ApiResponse<UserProperty> UserPropertyItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserProperty type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        List<UserProperty> UserPropertyItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserProperty type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        ApiResponse<List<UserProperty>> UserPropertyItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        List<UserProperty> UserPropertyLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        ApiResponse<List<UserProperty>> UserPropertyLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserSession</returns>
        UserSession UserSessionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserSession</returns>
        ApiResponse<UserSession> UserSessionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserSession&gt;</returns>
        List<UserSession> UserSessionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserSession&gt;</returns>
        ApiResponse<List<UserSession>> UserSessionItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        List<UserSessionStats> UserSessionStatsDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        ApiResponse<List<UserSessionStats>> UserSessionStatsDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSessionStats type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserSessionStats</returns>
        UserSessionStats UserSessionStatsItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSessionStats type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserSessionStats</returns>
        ApiResponse<UserSessionStats> UserSessionStatsItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSessionStats type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        List<UserSessionStats> UserSessionStatsItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSessionStats type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        ApiResponse<List<UserSessionStats>> UserSessionStatsItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        List<UserSessionStats> UserSessionStatsLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        ApiResponse<List<UserSessionStats>> UserSessionStatsLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        List<UserSessionStats> UserSessionStatsList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        ApiResponse<List<UserSessionStats>> UserSessionStatsListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserSuggestWithHttpInfo (string t, int? l);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Called to accept a given trading permission granted by another party.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        System.Threading.Tasks.Task<TradingPermissionResponse> AcceptTradingPermissionAsync (AcceptTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Called to accept a given trading permission granted by another party.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> AcceptTradingPermissionAsyncWithHttpInfo (AcceptTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to setup a second market data subscription with active auto-renewal.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> ActivateSecondMarketDataSubscriptionRenewalAsync (ActivateSecondMarketDataSubscriptionRenewal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to setup a second market data subscription with active auto-renewal.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> ActivateSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo (ActivateSecondMarketDataSubscriptionRenewal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EntitlementSubscriptionResponse</returns>
        System.Threading.Tasks.Task<EntitlementSubscriptionResponse> AddEntitlementSubscriptionAsync (AddEntitlementSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EntitlementSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementSubscriptionResponse>> AddEntitlementSubscriptionAsyncWithHttpInfo (AddEntitlementSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a subscription to Market Data for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscriptionResponse</returns>
        System.Threading.Tasks.Task<MarketDataSubscriptionResponse> AddMarketDataSubscriptionAsync (AddMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a subscription to Market Data for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketDataSubscriptionResponse>> AddMarketDataSubscriptionAsyncWithHttpInfo (AddMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> AddSecondMarketDataSubscriptionAsync (AddSecondMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Add a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> AddSecondMarketDataSubscriptionAsyncWithHttpInfo (AddSecondMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to add a Tradovate Trader membership plan for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<TradovateSubscriptionResponse> AddTradovateSubscriptionAsync (AddTradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to add a Tradovate Trader membership plan for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradovateSubscriptionResponse>> AddTradovateSubscriptionAsyncWithHttpInfo (AddTradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CancelEverythingResponse</returns>
        System.Threading.Tasks.Task<CancelEverythingResponse> CancelEverythingAsync (CancelEverything body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CancelEverythingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelEverythingResponse>> CancelEverythingAsyncWithHttpInfo (CancelEverything body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionAsync (CancelSecondMarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> CancelSecondMarketDataSubscriptionAsyncWithHttpInfo (CancelSecondMarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionRenewalAsync (CancelSecondMarketDataSubscriptionRenewal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> CancelSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo (CancelSecondMarketDataSubscriptionRenewal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a Tradovate Trader membership plan.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<TradovateSubscriptionResponse> CancelTradovateSubscriptionAsync (CancelTradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Cancel a Tradovate Trader membership plan.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradovateSubscriptionResponse>> CancelTradovateSubscriptionAsyncWithHttpInfo (CancelTradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the permissions for a Trader plugin.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> ChangePluginPermissionAsync (ChangePluginPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the permissions for a Trader plugin.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> ChangePluginPermissionAsyncWithHttpInfo (ChangePluginPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContactInfo type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactInfo</returns>
        System.Threading.Tasks.Task<ContactInfo> ContactInfoItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContactInfo type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactInfo>> ContactInfoItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContactInfo type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContactInfo type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        System.Threading.Tasks.Task<TradingPermissionResponse> CreateTradingPermissionAsync (CreateTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> CreateTradingPermissionAsyncWithHttpInfo (CreateTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the granted trading permissions associated with this account.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionsResponse</returns>
        System.Threading.Tasks.Task<TradingPermissionsResponse> GetAccountTradingPermissionsAsync (GetAccountTradingPermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the granted trading permissions associated with this account.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingPermissionsResponse>> GetAccountTradingPermissionsAsyncWithHttpInfo (GetAccountTradingPermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the current price of a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionCostResponse</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscriptionCostResponse> GetSecondMarketDataSubscriptionCostAsync (GetSecondMarketDataSubscriptionCost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the current price of a second market data subscription for a user.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionCostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionCostResponse>> GetSecondMarketDataSubscriptionCostAsyncWithHttpInfo (GetSecondMarketDataSubscriptionCost body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionCreateAsync (MarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionCreateAsyncWithHttpInfo (MarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of MarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of MarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of MarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionUpdateAsync (MarketDataSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of MarketDataSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionUpdateAsyncWithHttpInfo (MarketDataSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to modify account username and password.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> ModifyCredentialsAsync (ModifyCredentials body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used to modify account username and password.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> ModifyCredentialsAsyncWithHttpInfo (ModifyCredentials body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account email address information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserStatusMessage</returns>
        System.Threading.Tasks.Task<UserStatusMessage> ModifyEmailAddressAsync (ModifyEmailAddress body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account email address information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserStatusMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserStatusMessage>> ModifyEmailAddressAsyncWithHttpInfo (ModifyEmailAddress body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account password information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> ModifyPasswordAsync (ModifyPassword body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change account password information.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> ModifyPasswordAsyncWithHttpInfo (ModifyPassword body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request to open a Demo account for a user. 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OpenDemoAccountResponse</returns>
        System.Threading.Tasks.Task<OpenDemoAccountResponse> OpenDemoAccountAsync (OpenDemoAccount body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request to open a Demo account for a user. 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OpenDemoAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OpenDemoAccountResponse>> OpenDemoAccountAsyncWithHttpInfo (OpenDemoAccount body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> OrganizationFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> OrganizationItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Organization type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Organization type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> OrganizationItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Organization type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Organization type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> OrganizationListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Organization type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> OrganizationSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationSuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        System.Threading.Tasks.Task<TradingPermissionResponse> RequestTradingPermissionAsync (RequestTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> RequestTradingPermissionAsyncWithHttpInfo (RequestTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        System.Threading.Tasks.Task<TradingPermissionResponse> RevokeTradingPermissionAsync (RevokeTradingPermission body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> RevokeTradingPermissionAsyncWithHttpInfo (RevokeTradingPermission body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> RevokeTradingPermissionsAsync (RevokeTradingPermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> RevokeTradingPermissionsAsyncWithHttpInfo (RevokeTradingPermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SecondMarketDataSubscription</returns>
        System.Threading.Tasks.Task<SecondMarketDataSubscription> SecondMarketDataSubscriptionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscription>> SecondMarketDataSubscriptionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of SecondMarketDataSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used by B2B partners to create users for their own organizations.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SignUpResponse</returns>
        System.Threading.Tasks.Task<SignUpResponse> SignUpOrganizationMemberAsync (SignUpOrganizationMember body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used by B2B partners to create users for their own organizations.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SignUpResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignUpResponse>> SignUpOrganizationMemberAsyncWithHttpInfo (SignUpOrganizationMember body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SyncMessage</returns>
        System.Threading.Tasks.Task<SyncMessage> SyncRequestAsync (SyncRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SyncMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncMessage>> SyncRequestAsyncWithHttpInfo (SyncRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscription</returns>
        System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionCreateAsync (TradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionCreateAsyncWithHttpInfo (TradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of TradovateSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TradovateSubscription</returns>
        System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of TradovateSubscription type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of TradovateSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of TradovateSubscription type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of TradovateSubscription type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscription</returns>
        System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionUpdateAsync (TradovateSubscription body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of TradovateSubscription
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionUpdateAsyncWithHttpInfo (TradovateSubscription body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of User type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of User type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of User type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserPlugin</returns>
        System.Threading.Tasks.Task<UserPlugin> UserPluginCreateAsync (UserPlugin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginCreateAsyncWithHttpInfo (UserPlugin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        System.Threading.Tasks.Task<List<UserPlugin>> UserPluginDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserPlugin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserPlugin</returns>
        System.Threading.Tasks.Task<UserPlugin> UserPluginItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserPlugin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserPlugin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        System.Threading.Tasks.Task<List<UserPlugin>> UserPluginItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserPlugin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        System.Threading.Tasks.Task<List<UserPlugin>> UserPluginLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        System.Threading.Tasks.Task<List<UserPlugin>> UserPluginListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserPlugin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserPlugin</returns>
        System.Threading.Tasks.Task<UserPlugin> UserPluginUpdateAsync (UserPlugin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserPlugin
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginUpdateAsyncWithHttpInfo (UserPlugin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        System.Threading.Tasks.Task<List<UserProperty>> UserPropertyDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserProperty type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserProperty</returns>
        System.Threading.Tasks.Task<UserProperty> UserPropertyItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserProperty type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProperty>> UserPropertyItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserProperty type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        System.Threading.Tasks.Task<List<UserProperty>> UserPropertyItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserProperty type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        System.Threading.Tasks.Task<List<UserProperty>> UserPropertyLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserSession</returns>
        System.Threading.Tasks.Task<UserSession> UserSessionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSession>> UserSessionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserSession&gt;</returns>
        System.Threading.Tasks.Task<List<UserSession>> UserSessionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSession>>> UserSessionItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSessionStats type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserSessionStats</returns>
        System.Threading.Tasks.Task<UserSessionStats> UserSessionStatsItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserSessionStats type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserSessionStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSessionStats>> UserSessionStatsItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSessionStats type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserSessionStats type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserSessionStats type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserSuggestAsyncWithHttpInfo (string t, int? l);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Tradovate.Services.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = Tradovate.Services.Client.Configuration.Default;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Tradovate.Services.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tradovate.Services.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradovate.Services.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  ### Called to accept a given trading permission granted by another party.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        public TradingPermissionResponse AcceptTradingPermission (AcceptTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = AcceptTradingPermissionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Called to accept a given trading permission granted by another party.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        public ApiResponse< TradingPermissionResponse > AcceptTradingPermissionWithHttpInfo (AcceptTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AcceptTradingPermission");

            var localVarPath = "/user/accepttradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Called to accept a given trading permission granted by another party.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        public async System.Threading.Tasks.Task<TradingPermissionResponse> AcceptTradingPermissionAsync (AcceptTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = await AcceptTradingPermissionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Called to accept a given trading permission granted by another party.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> AcceptTradingPermissionAsyncWithHttpInfo (AcceptTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AcceptTradingPermission");

            var localVarPath = "/user/accepttradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Used to setup a second market data subscription with active auto-renewal.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        public SecondMarketDataSubscriptionResponse ActivateSecondMarketDataSubscriptionRenewal (ActivateSecondMarketDataSubscriptionRenewal body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = ActivateSecondMarketDataSubscriptionRenewalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used to setup a second market data subscription with active auto-renewal.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        public ApiResponse< SecondMarketDataSubscriptionResponse > ActivateSecondMarketDataSubscriptionRenewalWithHttpInfo (ActivateSecondMarketDataSubscriptionRenewal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ActivateSecondMarketDataSubscriptionRenewal");

            var localVarPath = "/user/activatesecondmarketdatasubscriptionrenewal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateSecondMarketDataSubscriptionRenewal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Used to setup a second market data subscription with active auto-renewal.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> ActivateSecondMarketDataSubscriptionRenewalAsync (ActivateSecondMarketDataSubscriptionRenewal body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = await ActivateSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used to setup a second market data subscription with active auto-renewal.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> ActivateSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo (ActivateSecondMarketDataSubscriptionRenewal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ActivateSecondMarketDataSubscriptionRenewal");

            var localVarPath = "/user/activatesecondmarketdatasubscriptionrenewal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateSecondMarketDataSubscriptionRenewal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EntitlementSubscriptionResponse</returns>
        public EntitlementSubscriptionResponse AddEntitlementSubscription (AddEntitlementSubscription body)
        {
             ApiResponse<EntitlementSubscriptionResponse> localVarResponse = AddEntitlementSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EntitlementSubscriptionResponse</returns>
        public ApiResponse< EntitlementSubscriptionResponse > AddEntitlementSubscriptionWithHttpInfo (AddEntitlementSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddEntitlementSubscription");

            var localVarPath = "/userPlugin/addentitlementsubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntitlementSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntitlementSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementSubscriptionResponse)));
        }

        /// <summary>
        ///  ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EntitlementSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<EntitlementSubscriptionResponse> AddEntitlementSubscriptionAsync (AddEntitlementSubscription body)
        {
             ApiResponse<EntitlementSubscriptionResponse> localVarResponse = await AddEntitlementSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EntitlementSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementSubscriptionResponse>> AddEntitlementSubscriptionAsyncWithHttpInfo (AddEntitlementSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddEntitlementSubscription");

            var localVarPath = "/userPlugin/addentitlementsubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntitlementSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntitlementSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Add a subscription to Market Data for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscriptionResponse</returns>
        public MarketDataSubscriptionResponse AddMarketDataSubscription (AddMarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscriptionResponse> localVarResponse = AddMarketDataSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Add a subscription to Market Data for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscriptionResponse</returns>
        public ApiResponse< MarketDataSubscriptionResponse > AddMarketDataSubscriptionWithHttpInfo (AddMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddMarketDataSubscription");

            var localVarPath = "/user/addmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Add a subscription to Market Data for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<MarketDataSubscriptionResponse> AddMarketDataSubscriptionAsync (AddMarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscriptionResponse> localVarResponse = await AddMarketDataSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Add a subscription to Market Data for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketDataSubscriptionResponse>> AddMarketDataSubscriptionAsyncWithHttpInfo (AddMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddMarketDataSubscription");

            var localVarPath = "/user/addmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Add a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        public SecondMarketDataSubscriptionResponse AddSecondMarketDataSubscription (AddSecondMarketDataSubscription body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = AddSecondMarketDataSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Add a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        public ApiResponse< SecondMarketDataSubscriptionResponse > AddSecondMarketDataSubscriptionWithHttpInfo (AddSecondMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddSecondMarketDataSubscription");

            var localVarPath = "/user/addsecondmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSecondMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Add a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> AddSecondMarketDataSubscriptionAsync (AddSecondMarketDataSubscription body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = await AddSecondMarketDataSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Add a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> AddSecondMarketDataSubscriptionAsyncWithHttpInfo (AddSecondMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddSecondMarketDataSubscription");

            var localVarPath = "/user/addsecondmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSecondMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Used to add a Tradovate Trader membership plan for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscriptionResponse</returns>
        public TradovateSubscriptionResponse AddTradovateSubscription (AddTradovateSubscription body)
        {
             ApiResponse<TradovateSubscriptionResponse> localVarResponse = AddTradovateSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used to add a Tradovate Trader membership plan for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscriptionResponse</returns>
        public ApiResponse< TradovateSubscriptionResponse > AddTradovateSubscriptionWithHttpInfo (AddTradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddTradovateSubscription");

            var localVarPath = "/user/addtradovatesubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTradovateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Used to add a Tradovate Trader membership plan for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<TradovateSubscriptionResponse> AddTradovateSubscriptionAsync (AddTradovateSubscription body)
        {
             ApiResponse<TradovateSubscriptionResponse> localVarResponse = await AddTradovateSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used to add a Tradovate Trader membership plan for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradovateSubscriptionResponse>> AddTradovateSubscriptionAsyncWithHttpInfo (AddTradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddTradovateSubscription");

            var localVarPath = "/user/addtradovatesubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTradovateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscriptionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CancelEverythingResponse</returns>
        public CancelEverythingResponse CancelEverything (CancelEverything body)
        {
             ApiResponse<CancelEverythingResponse> localVarResponse = CancelEverythingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CancelEverythingResponse</returns>
        public ApiResponse< CancelEverythingResponse > CancelEverythingWithHttpInfo (CancelEverything body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelEverything");

            var localVarPath = "/user/canceleverything";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEverything", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelEverythingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelEverythingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelEverythingResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CancelEverythingResponse</returns>
        public async System.Threading.Tasks.Task<CancelEverythingResponse> CancelEverythingAsync (CancelEverything body)
        {
             ApiResponse<CancelEverythingResponse> localVarResponse = await CancelEverythingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CancelEverythingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelEverythingResponse>> CancelEverythingAsyncWithHttpInfo (CancelEverything body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelEverything");

            var localVarPath = "/user/canceleverything";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEverything", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelEverythingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelEverythingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelEverythingResponse)));
        }

        /// <summary>
        ///  ### Cancel a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        public SecondMarketDataSubscriptionResponse CancelSecondMarketDataSubscription (CancelSecondMarketDataSubscription body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = CancelSecondMarketDataSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Cancel a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        public ApiResponse< SecondMarketDataSubscriptionResponse > CancelSecondMarketDataSubscriptionWithHttpInfo (CancelSecondMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelSecondMarketDataSubscription");

            var localVarPath = "/user/cancelsecondmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSecondMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Cancel a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionAsync (CancelSecondMarketDataSubscription body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = await CancelSecondMarketDataSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Cancel a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> CancelSecondMarketDataSubscriptionAsyncWithHttpInfo (CancelSecondMarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelSecondMarketDataSubscription");

            var localVarPath = "/user/cancelsecondmarketdatasubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSecondMarketDataSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionResponse</returns>
        public SecondMarketDataSubscriptionResponse CancelSecondMarketDataSubscriptionRenewal (CancelSecondMarketDataSubscriptionRenewal body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = CancelSecondMarketDataSubscriptionRenewalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionResponse</returns>
        public ApiResponse< SecondMarketDataSubscriptionResponse > CancelSecondMarketDataSubscriptionRenewalWithHttpInfo (CancelSecondMarketDataSubscriptionRenewal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelSecondMarketDataSubscriptionRenewal");

            var localVarPath = "/user/cancelsecondmarketdatasubscriptionrenewal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSecondMarketDataSubscriptionRenewal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscriptionResponse> CancelSecondMarketDataSubscriptionRenewalAsync (CancelSecondMarketDataSubscriptionRenewal body)
        {
             ApiResponse<SecondMarketDataSubscriptionResponse> localVarResponse = await CancelSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Cancel the auto-renewal for a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionResponse>> CancelSecondMarketDataSubscriptionRenewalAsyncWithHttpInfo (CancelSecondMarketDataSubscriptionRenewal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelSecondMarketDataSubscriptionRenewal");

            var localVarPath = "/user/cancelsecondmarketdatasubscriptionrenewal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSecondMarketDataSubscriptionRenewal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Cancel a Tradovate Trader membership plan.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscriptionResponse</returns>
        public TradovateSubscriptionResponse CancelTradovateSubscription (CancelTradovateSubscription body)
        {
             ApiResponse<TradovateSubscriptionResponse> localVarResponse = CancelTradovateSubscriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Cancel a Tradovate Trader membership plan.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscriptionResponse</returns>
        public ApiResponse< TradovateSubscriptionResponse > CancelTradovateSubscriptionWithHttpInfo (CancelTradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelTradovateSubscription");

            var localVarPath = "/user/canceltradovatesubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTradovateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Cancel a Tradovate Trader membership plan.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<TradovateSubscriptionResponse> CancelTradovateSubscriptionAsync (CancelTradovateSubscription body)
        {
             ApiResponse<TradovateSubscriptionResponse> localVarResponse = await CancelTradovateSubscriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Cancel a Tradovate Trader membership plan.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradovateSubscriptionResponse>> CancelTradovateSubscriptionAsyncWithHttpInfo (CancelTradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CancelTradovateSubscription");

            var localVarPath = "/user/canceltradovatesubscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTradovateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscriptionResponse)));
        }

        /// <summary>
        ///  ### Change the permissions for a Trader plugin.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse ChangePluginPermission (ChangePluginPermission body)
        {
             ApiResponse<SimpleResponse> localVarResponse = ChangePluginPermissionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Change the permissions for a Trader plugin.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public ApiResponse< SimpleResponse > ChangePluginPermissionWithHttpInfo (ChangePluginPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ChangePluginPermission");

            var localVarPath = "/userPlugin/changepluginpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePluginPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  ### Change the permissions for a Trader plugin.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> ChangePluginPermissionAsync (ChangePluginPermission body)
        {
             ApiResponse<SimpleResponse> localVarResponse = await ChangePluginPermissionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Change the permissions for a Trader plugin.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> ChangePluginPermissionAsyncWithHttpInfo (ChangePluginPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ChangePluginPermission");

            var localVarPath = "/userPlugin/changepluginpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePluginPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        public List<ContactInfo> ContactInfoDependents (long? masterid)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = ContactInfoDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        public ApiResponse< List<ContactInfo> > ContactInfoDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->ContactInfoDependents");

            var localVarPath = "/contactInfo/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoDependentsAsync (long? masterid)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = await ContactInfoDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->ContactInfoDependents");

            var localVarPath = "/contactInfo/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  Retrieves an entity of ContactInfo type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactInfo</returns>
        public ContactInfo ContactInfoItem (long? id)
        {
             ApiResponse<ContactInfo> localVarResponse = ContactInfoItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ContactInfo type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactInfo</returns>
        public ApiResponse< ContactInfo > ContactInfoItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ContactInfoItem");

            var localVarPath = "/contactInfo/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactInfo)));
        }

        /// <summary>
        ///  Retrieves an entity of ContactInfo type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactInfo</returns>
        public async System.Threading.Tasks.Task<ContactInfo> ContactInfoItemAsync (long? id)
        {
             ApiResponse<ContactInfo> localVarResponse = await ContactInfoItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ContactInfo type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactInfo>> ContactInfoItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ContactInfoItem");

            var localVarPath = "/contactInfo/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactInfo)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContactInfo type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        public List<ContactInfo> ContactInfoItems (List<long?> ids)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = ContactInfoItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ContactInfo type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        public ApiResponse< List<ContactInfo> > ContactInfoItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->ContactInfoItems");

            var localVarPath = "/contactInfo/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContactInfo type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoItemsAsync (List<long?> ids)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = await ContactInfoItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ContactInfo type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->ContactInfoItems");

            var localVarPath = "/contactInfo/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;ContactInfo&gt;</returns>
        public List<ContactInfo> ContactInfoLDependents (List<long?> masterids)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = ContactInfoLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;ContactInfo&gt;</returns>
        public ApiResponse< List<ContactInfo> > ContactInfoLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->ContactInfoLDependents");

            var localVarPath = "/contactInfo/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;ContactInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactInfo>> ContactInfoLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<ContactInfo>> localVarResponse = await ContactInfoLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContactInfo type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContactInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContactInfo>>> ContactInfoLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->ContactInfoLDependents");

            var localVarPath = "/contactInfo/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInfoLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContactInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactInfo>)));
        }

        /// <summary>
        ///  ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        public TradingPermissionResponse CreateTradingPermission (CreateTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = CreateTradingPermissionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        public ApiResponse< TradingPermissionResponse > CreateTradingPermissionWithHttpInfo (CreateTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CreateTradingPermission");

            var localVarPath = "/user/createtradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        public async System.Threading.Tasks.Task<TradingPermissionResponse> CreateTradingPermissionAsync (CreateTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = await CreateTradingPermissionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Create a trading permission Create a new trading permission to account with ID &#x60;accountId&#x60; via that user&#x27;s ID, &#x60;userId&#x60;.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> CreateTradingPermissionAsyncWithHttpInfo (CreateTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CreateTradingPermission");

            var localVarPath = "/user/createtradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Query the granted trading permissions associated with this account.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionsResponse</returns>
        public TradingPermissionsResponse GetAccountTradingPermissions (GetAccountTradingPermissions body)
        {
             ApiResponse<TradingPermissionsResponse> localVarResponse = GetAccountTradingPermissionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Query the granted trading permissions associated with this account.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionsResponse</returns>
        public ApiResponse< TradingPermissionsResponse > GetAccountTradingPermissionsWithHttpInfo (GetAccountTradingPermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->GetAccountTradingPermissions");

            var localVarPath = "/user/getaccounttradingpermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTradingPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionsResponse)));
        }

        /// <summary>
        ///  ### Query the granted trading permissions associated with this account.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<TradingPermissionsResponse> GetAccountTradingPermissionsAsync (GetAccountTradingPermissions body)
        {
             ApiResponse<TradingPermissionsResponse> localVarResponse = await GetAccountTradingPermissionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Query the granted trading permissions associated with this account.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingPermissionsResponse>> GetAccountTradingPermissionsAsyncWithHttpInfo (GetAccountTradingPermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->GetAccountTradingPermissions");

            var localVarPath = "/user/getaccounttradingpermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTradingPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionsResponse)));
        }

        /// <summary>
        ///  ### Query the current price of a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SecondMarketDataSubscriptionCostResponse</returns>
        public SecondMarketDataSubscriptionCostResponse GetSecondMarketDataSubscriptionCost (GetSecondMarketDataSubscriptionCost body)
        {
             ApiResponse<SecondMarketDataSubscriptionCostResponse> localVarResponse = GetSecondMarketDataSubscriptionCostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Query the current price of a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscriptionCostResponse</returns>
        public ApiResponse< SecondMarketDataSubscriptionCostResponse > GetSecondMarketDataSubscriptionCostWithHttpInfo (GetSecondMarketDataSubscriptionCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->GetSecondMarketDataSubscriptionCost");

            var localVarPath = "/user/getsecondmarketdatasubscriptioncost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecondMarketDataSubscriptionCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionCostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionCostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionCostResponse)));
        }

        /// <summary>
        ///  ### Query the current price of a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SecondMarketDataSubscriptionCostResponse</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscriptionCostResponse> GetSecondMarketDataSubscriptionCostAsync (GetSecondMarketDataSubscriptionCost body)
        {
             ApiResponse<SecondMarketDataSubscriptionCostResponse> localVarResponse = await GetSecondMarketDataSubscriptionCostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Query the current price of a second market data subscription for a user.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscriptionCostResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscriptionCostResponse>> GetSecondMarketDataSubscriptionCostAsyncWithHttpInfo (GetSecondMarketDataSubscriptionCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->GetSecondMarketDataSubscriptionCost");

            var localVarPath = "/user/getsecondmarketdatasubscriptioncost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecondMarketDataSubscriptionCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscriptionCostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscriptionCostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscriptionCostResponse)));
        }

        /// <summary>
        ///  Creates a new entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscription</returns>
        public MarketDataSubscription MarketDataSubscriptionCreate (MarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = MarketDataSubscriptionCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        public ApiResponse< MarketDataSubscription > MarketDataSubscriptionCreateWithHttpInfo (MarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->MarketDataSubscriptionCreate");

            var localVarPath = "/marketDataSubscription/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  Creates a new entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        public async System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionCreateAsync (MarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = await MarketDataSubscriptionCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionCreateAsyncWithHttpInfo (MarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->MarketDataSubscriptionCreate");

            var localVarPath = "/marketDataSubscription/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        public List<MarketDataSubscription> MarketDataSubscriptionDependents (long? masterid)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = MarketDataSubscriptionDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        public ApiResponse< List<MarketDataSubscription> > MarketDataSubscriptionDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->MarketDataSubscriptionDependents");

            var localVarPath = "/marketDataSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionDependentsAsync (long? masterid)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = await MarketDataSubscriptionDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->MarketDataSubscriptionDependents");

            var localVarPath = "/marketDataSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves an entity of MarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MarketDataSubscription</returns>
        public MarketDataSubscription MarketDataSubscriptionItem (long? id)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = MarketDataSubscriptionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of MarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        public ApiResponse< MarketDataSubscription > MarketDataSubscriptionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->MarketDataSubscriptionItem");

            var localVarPath = "/marketDataSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  Retrieves an entity of MarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        public async System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionItemAsync (long? id)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = await MarketDataSubscriptionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of MarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->MarketDataSubscriptionItem");

            var localVarPath = "/marketDataSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        public List<MarketDataSubscription> MarketDataSubscriptionItems (List<long?> ids)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = MarketDataSubscriptionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        public ApiResponse< List<MarketDataSubscription> > MarketDataSubscriptionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->MarketDataSubscriptionItems");

            var localVarPath = "/marketDataSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = await MarketDataSubscriptionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of MarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->MarketDataSubscriptionItems");

            var localVarPath = "/marketDataSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        public List<MarketDataSubscription> MarketDataSubscriptionLDependents (List<long?> masterids)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = MarketDataSubscriptionLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        public ApiResponse< List<MarketDataSubscription> > MarketDataSubscriptionLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->MarketDataSubscriptionLDependents");

            var localVarPath = "/marketDataSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = await MarketDataSubscriptionLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->MarketDataSubscriptionLDependents");

            var localVarPath = "/marketDataSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarketDataSubscription&gt;</returns>
        public List<MarketDataSubscription> MarketDataSubscriptionList ()
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = MarketDataSubscriptionListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarketDataSubscription&gt;</returns>
        public ApiResponse< List<MarketDataSubscription> > MarketDataSubscriptionListWithHttpInfo ()
        {

            var localVarPath = "/marketDataSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarketDataSubscription>> MarketDataSubscriptionListAsync ()
        {
             ApiResponse<List<MarketDataSubscription>> localVarResponse = await MarketDataSubscriptionListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of MarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarketDataSubscription>>> MarketDataSubscriptionListAsyncWithHttpInfo ()
        {

            var localVarPath = "/marketDataSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarketDataSubscription>)));
        }

        /// <summary>
        ///  Updates an existing entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MarketDataSubscription</returns>
        public MarketDataSubscription MarketDataSubscriptionUpdate (MarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = MarketDataSubscriptionUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MarketDataSubscription</returns>
        public ApiResponse< MarketDataSubscription > MarketDataSubscriptionUpdateWithHttpInfo (MarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->MarketDataSubscriptionUpdate");

            var localVarPath = "/marketDataSubscription/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  Updates an existing entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MarketDataSubscription</returns>
        public async System.Threading.Tasks.Task<MarketDataSubscription> MarketDataSubscriptionUpdateAsync (MarketDataSubscription body)
        {
             ApiResponse<MarketDataSubscription> localVarResponse = await MarketDataSubscriptionUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of MarketDataSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MarketDataSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketDataSubscription>> MarketDataSubscriptionUpdateAsyncWithHttpInfo (MarketDataSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->MarketDataSubscriptionUpdate");

            var localVarPath = "/marketDataSubscription/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketDataSubscriptionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketDataSubscription)));
        }

        /// <summary>
        ///  ### Used to modify account username and password.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse ModifyCredentials (ModifyCredentials body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = ModifyCredentialsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used to modify account username and password.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > ModifyCredentialsWithHttpInfo (ModifyCredentials body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyCredentials");

            var localVarPath = "/user/modifycredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Used to modify account username and password.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> ModifyCredentialsAsync (ModifyCredentials body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await ModifyCredentialsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used to modify account username and password.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> ModifyCredentialsAsyncWithHttpInfo (ModifyCredentials body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyCredentials");

            var localVarPath = "/user/modifycredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Change account email address information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserStatusMessage</returns>
        public UserStatusMessage ModifyEmailAddress (ModifyEmailAddress body)
        {
             ApiResponse<UserStatusMessage> localVarResponse = ModifyEmailAddressWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Change account email address information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserStatusMessage</returns>
        public ApiResponse< UserStatusMessage > ModifyEmailAddressWithHttpInfo (ModifyEmailAddress body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyEmailAddress");

            var localVarPath = "/user/modifyemailaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserStatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserStatusMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserStatusMessage)));
        }

        /// <summary>
        ///  ### Change account email address information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserStatusMessage</returns>
        public async System.Threading.Tasks.Task<UserStatusMessage> ModifyEmailAddressAsync (ModifyEmailAddress body)
        {
             ApiResponse<UserStatusMessage> localVarResponse = await ModifyEmailAddressAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Change account email address information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserStatusMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserStatusMessage>> ModifyEmailAddressAsyncWithHttpInfo (ModifyEmailAddress body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyEmailAddress");

            var localVarPath = "/user/modifyemailaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserStatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserStatusMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserStatusMessage)));
        }

        /// <summary>
        ///  ### Change account password information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse ModifyPassword (ModifyPassword body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = ModifyPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Change account password information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > ModifyPasswordWithHttpInfo (ModifyPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyPassword");

            var localVarPath = "/user/modifypassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Change account password information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> ModifyPasswordAsync (ModifyPassword body)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await ModifyPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Change account password information.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> ModifyPasswordAsyncWithHttpInfo (ModifyPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ModifyPassword");

            var localVarPath = "/user/modifypassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        ///  ### Request to open a Demo account for a user. 
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OpenDemoAccountResponse</returns>
        public OpenDemoAccountResponse OpenDemoAccount (OpenDemoAccount body)
        {
             ApiResponse<OpenDemoAccountResponse> localVarResponse = OpenDemoAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Request to open a Demo account for a user. 
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OpenDemoAccountResponse</returns>
        public ApiResponse< OpenDemoAccountResponse > OpenDemoAccountWithHttpInfo (OpenDemoAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->OpenDemoAccount");

            var localVarPath = "/user/opendemoaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenDemoAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OpenDemoAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OpenDemoAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OpenDemoAccountResponse)));
        }

        /// <summary>
        ///  ### Request to open a Demo account for a user. 
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OpenDemoAccountResponse</returns>
        public async System.Threading.Tasks.Task<OpenDemoAccountResponse> OpenDemoAccountAsync (OpenDemoAccount body)
        {
             ApiResponse<OpenDemoAccountResponse> localVarResponse = await OpenDemoAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Request to open a Demo account for a user. 
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OpenDemoAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OpenDemoAccountResponse>> OpenDemoAccountAsyncWithHttpInfo (OpenDemoAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->OpenDemoAccount");

            var localVarPath = "/user/opendemoaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenDemoAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OpenDemoAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OpenDemoAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OpenDemoAccountResponse)));
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Organization</returns>
        public Organization OrganizationFind (string name)
        {
             ApiResponse<Organization> localVarResponse = OrganizationFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse< Organization > OrganizationFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->OrganizationFind");

            var localVarPath = "/organization/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> OrganizationFindAsync (string name)
        {
             ApiResponse<Organization> localVarResponse = await OrganizationFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->OrganizationFind");

            var localVarPath = "/organization/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Organization</returns>
        public Organization OrganizationItem (long? id)
        {
             ApiResponse<Organization> localVarResponse = OrganizationItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse< Organization > OrganizationItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->OrganizationItem");

            var localVarPath = "/organization/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> OrganizationItemAsync (long? id)
        {
             ApiResponse<Organization> localVarResponse = await OrganizationItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Organization type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->OrganizationItem");

            var localVarPath = "/organization/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Organization type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> OrganizationItems (List<long?> ids)
        {
             ApiResponse<List<Organization>> localVarResponse = OrganizationItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Organization type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public ApiResponse< List<Organization> > OrganizationItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->OrganizationItems");

            var localVarPath = "/organization/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Organization type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> OrganizationItemsAsync (List<long?> ids)
        {
             ApiResponse<List<Organization>> localVarResponse = await OrganizationItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Organization type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->OrganizationItems");

            var localVarPath = "/organization/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  Retrieves all entities of Organization type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> OrganizationList ()
        {
             ApiResponse<List<Organization>> localVarResponse = OrganizationListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Organization type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public ApiResponse< List<Organization> > OrganizationListWithHttpInfo ()
        {

            var localVarPath = "/organization/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  Retrieves all entities of Organization type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> OrganizationListAsync ()
        {
             ApiResponse<List<Organization>> localVarResponse = await OrganizationListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Organization type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationListAsyncWithHttpInfo ()
        {

            var localVarPath = "/organization/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> OrganizationSuggest (string t, int? l)
        {
             ApiResponse<List<Organization>> localVarResponse = OrganizationSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public ApiResponse< List<Organization> > OrganizationSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling UsersApi->OrganizationSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling UsersApi->OrganizationSuggest");

            var localVarPath = "/organization/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> OrganizationSuggestAsync (string t, int? l)
        {
             ApiResponse<List<Organization>> localVarResponse = await OrganizationSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organization>>> OrganizationSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling UsersApi->OrganizationSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling UsersApi->OrganizationSuggest");

            var localVarPath = "/organization/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        ///  ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        public TradingPermissionResponse RequestTradingPermission (RequestTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = RequestTradingPermissionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        public ApiResponse< TradingPermissionResponse > RequestTradingPermissionWithHttpInfo (RequestTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RequestTradingPermission");

            var localVarPath = "/user/requesttradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        public async System.Threading.Tasks.Task<TradingPermissionResponse> RequestTradingPermissionAsync (RequestTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = await RequestTradingPermissionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Send a request to grant trading permission for your account to another party. Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party&#x27;s own accounts.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> RequestTradingPermissionAsyncWithHttpInfo (RequestTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RequestTradingPermission");

            var localVarPath = "/user/requesttradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradingPermissionResponse</returns>
        public TradingPermissionResponse RevokeTradingPermission (RevokeTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = RevokeTradingPermissionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradingPermissionResponse</returns>
        public ApiResponse< TradingPermissionResponse > RevokeTradingPermissionWithHttpInfo (RevokeTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RevokeTradingPermission");

            var localVarPath = "/user/revoketradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradingPermissionResponse</returns>
        public async System.Threading.Tasks.Task<TradingPermissionResponse> RevokeTradingPermissionAsync (RevokeTradingPermission body)
        {
             ApiResponse<TradingPermissionResponse> localVarResponse = await RevokeTradingPermissionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Revoke an existing trading permission granted to another party. If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradingPermissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingPermissionResponse>> RevokeTradingPermissionAsyncWithHttpInfo (RevokeTradingPermission body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RevokeTradingPermission");

            var localVarPath = "/user/revoketradingpermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeTradingPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingPermissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradingPermissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingPermissionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse RevokeTradingPermissions (RevokeTradingPermissions body)
        {
             ApiResponse<SimpleResponse> localVarResponse = RevokeTradingPermissionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public ApiResponse< SimpleResponse > RevokeTradingPermissionsWithHttpInfo (RevokeTradingPermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RevokeTradingPermissions");

            var localVarPath = "/user/revoketradingpermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeTradingPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> RevokeTradingPermissionsAsync (RevokeTradingPermissions body)
        {
             ApiResponse<SimpleResponse> localVarResponse = await RevokeTradingPermissionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> RevokeTradingPermissionsAsyncWithHttpInfo (RevokeTradingPermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->RevokeTradingPermissions");

            var localVarPath = "/user/revoketradingpermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeTradingPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        public List<SecondMarketDataSubscription> SecondMarketDataSubscriptionDependents (long? masterid)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = SecondMarketDataSubscriptionDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        public ApiResponse< List<SecondMarketDataSubscription> > SecondMarketDataSubscriptionDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->SecondMarketDataSubscriptionDependents");

            var localVarPath = "/secondMarketDataSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionDependentsAsync (long? masterid)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = await SecondMarketDataSubscriptionDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->SecondMarketDataSubscriptionDependents");

            var localVarPath = "/secondMarketDataSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SecondMarketDataSubscription</returns>
        public SecondMarketDataSubscription SecondMarketDataSubscriptionItem (long? id)
        {
             ApiResponse<SecondMarketDataSubscription> localVarResponse = SecondMarketDataSubscriptionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SecondMarketDataSubscription</returns>
        public ApiResponse< SecondMarketDataSubscription > SecondMarketDataSubscriptionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->SecondMarketDataSubscriptionItem");

            var localVarPath = "/secondMarketDataSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscription)));
        }

        /// <summary>
        ///  Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SecondMarketDataSubscription</returns>
        public async System.Threading.Tasks.Task<SecondMarketDataSubscription> SecondMarketDataSubscriptionItemAsync (long? id)
        {
             ApiResponse<SecondMarketDataSubscription> localVarResponse = await SecondMarketDataSubscriptionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of SecondMarketDataSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SecondMarketDataSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecondMarketDataSubscription>> SecondMarketDataSubscriptionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->SecondMarketDataSubscriptionItem");

            var localVarPath = "/secondMarketDataSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecondMarketDataSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecondMarketDataSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecondMarketDataSubscription)));
        }

        /// <summary>
        ///  Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        public List<SecondMarketDataSubscription> SecondMarketDataSubscriptionItems (List<long?> ids)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = SecondMarketDataSubscriptionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        public ApiResponse< List<SecondMarketDataSubscription> > SecondMarketDataSubscriptionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->SecondMarketDataSubscriptionItems");

            var localVarPath = "/secondMarketDataSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = await SecondMarketDataSubscriptionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of SecondMarketDataSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->SecondMarketDataSubscriptionItems");

            var localVarPath = "/secondMarketDataSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        public List<SecondMarketDataSubscription> SecondMarketDataSubscriptionLDependents (List<long?> masterids)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = SecondMarketDataSubscriptionLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        public ApiResponse< List<SecondMarketDataSubscription> > SecondMarketDataSubscriptionLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->SecondMarketDataSubscriptionLDependents");

            var localVarPath = "/secondMarketDataSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = await SecondMarketDataSubscriptionLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->SecondMarketDataSubscriptionLDependents");

            var localVarPath = "/secondMarketDataSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SecondMarketDataSubscription&gt;</returns>
        public List<SecondMarketDataSubscription> SecondMarketDataSubscriptionList ()
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = SecondMarketDataSubscriptionListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SecondMarketDataSubscription&gt;</returns>
        public ApiResponse< List<SecondMarketDataSubscription> > SecondMarketDataSubscriptionListWithHttpInfo ()
        {

            var localVarPath = "/secondMarketDataSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SecondMarketDataSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecondMarketDataSubscription>> SecondMarketDataSubscriptionListAsync ()
        {
             ApiResponse<List<SecondMarketDataSubscription>> localVarResponse = await SecondMarketDataSubscriptionListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of SecondMarketDataSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SecondMarketDataSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecondMarketDataSubscription>>> SecondMarketDataSubscriptionListAsyncWithHttpInfo ()
        {

            var localVarPath = "/secondMarketDataSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecondMarketDataSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecondMarketDataSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SecondMarketDataSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecondMarketDataSubscription>)));
        }

        /// <summary>
        ///  ### Used by B2B partners to create users for their own organizations.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignUpResponse</returns>
        public SignUpResponse SignUpOrganizationMember (SignUpOrganizationMember body)
        {
             ApiResponse<SignUpResponse> localVarResponse = SignUpOrganizationMemberWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used by B2B partners to create users for their own organizations.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignUpResponse</returns>
        public ApiResponse< SignUpResponse > SignUpOrganizationMemberWithHttpInfo (SignUpOrganizationMember body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->SignUpOrganizationMember");

            var localVarPath = "/user/signuporganizationmember";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignUpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignUpResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignUpResponse)));
        }

        /// <summary>
        ///  ### Used by B2B partners to create users for their own organizations.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SignUpResponse</returns>
        public async System.Threading.Tasks.Task<SignUpResponse> SignUpOrganizationMemberAsync (SignUpOrganizationMember body)
        {
             ApiResponse<SignUpResponse> localVarResponse = await SignUpOrganizationMemberAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used by B2B partners to create users for their own organizations.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SignUpResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignUpResponse>> SignUpOrganizationMemberAsyncWithHttpInfo (SignUpOrganizationMember body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->SignUpOrganizationMember");

            var localVarPath = "/user/signuporganizationmember";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignUpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignUpResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignUpResponse)));
        }

        /// <summary>
        ///  ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SyncMessage</returns>
        public SyncMessage SyncRequest (SyncRequest body)
        {
             ApiResponse<SyncMessage> localVarResponse = SyncRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SyncMessage</returns>
        public ApiResponse< SyncMessage > SyncRequestWithHttpInfo (SyncRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->SyncRequest");

            var localVarPath = "/user/syncrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyncMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyncMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyncMessage)));
        }

        /// <summary>
        ///  ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SyncMessage</returns>
        public async System.Threading.Tasks.Task<SyncMessage> SyncRequestAsync (SyncRequest body)
        {
             ApiResponse<SyncMessage> localVarResponse = await SyncRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Used with WebSocket protocol. Returns all data associated with the user.  This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.  &#x60;&#x60;&#x60;js const URL &#x3D; &#x27;wss://live.tradovateapi.com/v1/websocket&#x27;  const myWebSocket &#x3D; new WebSocket(URL)  //authorize websocket with your access token myWebSocket.onopen &#x3D; function() {     myWebSocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) }  const requestBody &#x3D; {     users: [12345] }  myWebSocket.send(&#x60;user/syncrequest\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)   //starts a subscription to real-time user data. &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SyncMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyncMessage>> SyncRequestAsyncWithHttpInfo (SyncRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->SyncRequest");

            var localVarPath = "/user/syncrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyncMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyncMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyncMessage)));
        }

        /// <summary>
        ///  Creates a new entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscription</returns>
        public TradovateSubscription TradovateSubscriptionCreate (TradovateSubscription body)
        {
             ApiResponse<TradovateSubscription> localVarResponse = TradovateSubscriptionCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        public ApiResponse< TradovateSubscription > TradovateSubscriptionCreateWithHttpInfo (TradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->TradovateSubscriptionCreate");

            var localVarPath = "/tradovateSubscription/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Creates a new entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscription</returns>
        public async System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionCreateAsync (TradovateSubscription body)
        {
             ApiResponse<TradovateSubscription> localVarResponse = await TradovateSubscriptionCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionCreateAsyncWithHttpInfo (TradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->TradovateSubscriptionCreate");

            var localVarPath = "/tradovateSubscription/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        public List<TradovateSubscription> TradovateSubscriptionDependents (long? masterid)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = TradovateSubscriptionDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        public ApiResponse< List<TradovateSubscription> > TradovateSubscriptionDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->TradovateSubscriptionDependents");

            var localVarPath = "/tradovateSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionDependentsAsync (long? masterid)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = await TradovateSubscriptionDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->TradovateSubscriptionDependents");

            var localVarPath = "/tradovateSubscription/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves an entity of TradovateSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TradovateSubscription</returns>
        public TradovateSubscription TradovateSubscriptionItem (long? id)
        {
             ApiResponse<TradovateSubscription> localVarResponse = TradovateSubscriptionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of TradovateSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        public ApiResponse< TradovateSubscription > TradovateSubscriptionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->TradovateSubscriptionItem");

            var localVarPath = "/tradovateSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Retrieves an entity of TradovateSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TradovateSubscription</returns>
        public async System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionItemAsync (long? id)
        {
             ApiResponse<TradovateSubscription> localVarResponse = await TradovateSubscriptionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of TradovateSubscription type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->TradovateSubscriptionItem");

            var localVarPath = "/tradovateSubscription/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Retrieves multiple entities of TradovateSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        public List<TradovateSubscription> TradovateSubscriptionItems (List<long?> ids)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = TradovateSubscriptionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of TradovateSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        public ApiResponse< List<TradovateSubscription> > TradovateSubscriptionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->TradovateSubscriptionItems");

            var localVarPath = "/tradovateSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of TradovateSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = await TradovateSubscriptionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of TradovateSubscription type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->TradovateSubscriptionItems");

            var localVarPath = "/tradovateSubscription/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        public List<TradovateSubscription> TradovateSubscriptionLDependents (List<long?> masterids)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = TradovateSubscriptionLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        public ApiResponse< List<TradovateSubscription> > TradovateSubscriptionLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->TradovateSubscriptionLDependents");

            var localVarPath = "/tradovateSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = await TradovateSubscriptionLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->TradovateSubscriptionLDependents");

            var localVarPath = "/tradovateSubscription/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TradovateSubscription&gt;</returns>
        public List<TradovateSubscription> TradovateSubscriptionList ()
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = TradovateSubscriptionListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TradovateSubscription&gt;</returns>
        public ApiResponse< List<TradovateSubscription> > TradovateSubscriptionListWithHttpInfo ()
        {

            var localVarPath = "/tradovateSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TradovateSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TradovateSubscription>> TradovateSubscriptionListAsync ()
        {
             ApiResponse<List<TradovateSubscription>> localVarResponse = await TradovateSubscriptionListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of TradovateSubscription type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TradovateSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TradovateSubscription>>> TradovateSubscriptionListAsyncWithHttpInfo ()
        {

            var localVarPath = "/tradovateSubscription/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradovateSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradovateSubscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradovateSubscription>)));
        }

        /// <summary>
        ///  Updates an existing entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TradovateSubscription</returns>
        public TradovateSubscription TradovateSubscriptionUpdate (TradovateSubscription body)
        {
             ApiResponse<TradovateSubscription> localVarResponse = TradovateSubscriptionUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TradovateSubscription</returns>
        public ApiResponse< TradovateSubscription > TradovateSubscriptionUpdateWithHttpInfo (TradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->TradovateSubscriptionUpdate");

            var localVarPath = "/tradovateSubscription/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Updates an existing entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TradovateSubscription</returns>
        public async System.Threading.Tasks.Task<TradovateSubscription> TradovateSubscriptionUpdateAsync (TradovateSubscription body)
        {
             ApiResponse<TradovateSubscription> localVarResponse = await TradovateSubscriptionUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of TradovateSubscription
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TradovateSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradovateSubscription>> TradovateSubscriptionUpdateAsyncWithHttpInfo (TradovateSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->TradovateSubscriptionUpdate");

            var localVarPath = "/tradovateSubscription/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradovateSubscriptionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradovateSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradovateSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradovateSubscription)));
        }

        /// <summary>
        ///  Retrieves an entity of User type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>User</returns>
        public User UserFind (string name)
        {
             ApiResponse<User> localVarResponse = UserFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of User type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UserFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->UserFind");

            var localVarPath = "/user/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieves an entity of User type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserFindAsync (string name)
        {
             ApiResponse<User> localVarResponse = await UserFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of User type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->UserFind");

            var localVarPath = "/user/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieves an entity of User type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User UserItem (long? id)
        {
             ApiResponse<User> localVarResponse = UserItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of User type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UserItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserItem");

            var localVarPath = "/user/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieves an entity of User type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserItemAsync (long? id)
        {
             ApiResponse<User> localVarResponse = await UserItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of User type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserItem");

            var localVarPath = "/user/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieves multiple entities of User type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserItems (List<long?> ids)
        {
             ApiResponse<List<User>> localVarResponse = UserItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of User type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > UserItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserItems");

            var localVarPath = "/user/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of User type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserItemsAsync (List<long?> ids)
        {
             ApiResponse<List<User>> localVarResponse = await UserItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of User type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserItems");

            var localVarPath = "/user/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Retrieves all entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserList ()
        {
             ApiResponse<List<User>> localVarResponse = UserListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > UserListWithHttpInfo ()
        {

            var localVarPath = "/user/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Retrieves all entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListAsync ()
        {
             ApiResponse<List<User>> localVarResponse = await UserListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListAsyncWithHttpInfo ()
        {

            var localVarPath = "/user/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Creates a new entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserPlugin</returns>
        public UserPlugin UserPluginCreate (UserPlugin body)
        {
             ApiResponse<UserPlugin> localVarResponse = UserPluginCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        public ApiResponse< UserPlugin > UserPluginCreateWithHttpInfo (UserPlugin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UserPluginCreate");

            var localVarPath = "/userPlugin/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Creates a new entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserPlugin</returns>
        public async System.Threading.Tasks.Task<UserPlugin> UserPluginCreateAsync (UserPlugin body)
        {
             ApiResponse<UserPlugin> localVarResponse = await UserPluginCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginCreateAsyncWithHttpInfo (UserPlugin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UserPluginCreate");

            var localVarPath = "/userPlugin/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        public List<UserPlugin> UserPluginDependents (long? masterid)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = UserPluginDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        public ApiResponse< List<UserPlugin> > UserPluginDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserPluginDependents");

            var localVarPath = "/userPlugin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserPlugin>> UserPluginDependentsAsync (long? masterid)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = await UserPluginDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserPluginDependents");

            var localVarPath = "/userPlugin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves an entity of UserPlugin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserPlugin</returns>
        public UserPlugin UserPluginItem (long? id)
        {
             ApiResponse<UserPlugin> localVarResponse = UserPluginItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserPlugin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        public ApiResponse< UserPlugin > UserPluginItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserPluginItem");

            var localVarPath = "/userPlugin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Retrieves an entity of UserPlugin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserPlugin</returns>
        public async System.Threading.Tasks.Task<UserPlugin> UserPluginItemAsync (long? id)
        {
             ApiResponse<UserPlugin> localVarResponse = await UserPluginItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserPlugin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserPluginItem");

            var localVarPath = "/userPlugin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserPlugin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        public List<UserPlugin> UserPluginItems (List<long?> ids)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = UserPluginItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserPlugin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        public ApiResponse< List<UserPlugin> > UserPluginItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserPluginItems");

            var localVarPath = "/userPlugin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserPlugin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserPlugin>> UserPluginItemsAsync (List<long?> ids)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = await UserPluginItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserPlugin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserPluginItems");

            var localVarPath = "/userPlugin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        public List<UserPlugin> UserPluginLDependents (List<long?> masterids)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = UserPluginLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        public ApiResponse< List<UserPlugin> > UserPluginLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserPluginLDependents");

            var localVarPath = "/userPlugin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserPlugin>> UserPluginLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<UserPlugin>> localVarResponse = await UserPluginLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserPluginLDependents");

            var localVarPath = "/userPlugin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserPlugin&gt;</returns>
        public List<UserPlugin> UserPluginList ()
        {
             ApiResponse<List<UserPlugin>> localVarResponse = UserPluginListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserPlugin&gt;</returns>
        public ApiResponse< List<UserPlugin> > UserPluginListWithHttpInfo ()
        {

            var localVarPath = "/userPlugin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserPlugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserPlugin>> UserPluginListAsync ()
        {
             ApiResponse<List<UserPlugin>> localVarResponse = await UserPluginListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserPlugin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserPlugin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserPlugin>>> UserPluginListAsyncWithHttpInfo ()
        {

            var localVarPath = "/userPlugin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserPlugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserPlugin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserPlugin>)));
        }

        /// <summary>
        ///  Updates an existing entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserPlugin</returns>
        public UserPlugin UserPluginUpdate (UserPlugin body)
        {
             ApiResponse<UserPlugin> localVarResponse = UserPluginUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserPlugin</returns>
        public ApiResponse< UserPlugin > UserPluginUpdateWithHttpInfo (UserPlugin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UserPluginUpdate");

            var localVarPath = "/userPlugin/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Updates an existing entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserPlugin</returns>
        public async System.Threading.Tasks.Task<UserPlugin> UserPluginUpdateAsync (UserPlugin body)
        {
             ApiResponse<UserPlugin> localVarResponse = await UserPluginUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of UserPlugin
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserPlugin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPlugin>> UserPluginUpdateAsyncWithHttpInfo (UserPlugin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UserPluginUpdate");

            var localVarPath = "/userPlugin/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPluginUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPlugin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPlugin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPlugin)));
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        public List<UserProperty> UserPropertyDependents (long? masterid)
        {
             ApiResponse<List<UserProperty>> localVarResponse = UserPropertyDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        public ApiResponse< List<UserProperty> > UserPropertyDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserPropertyDependents");

            var localVarPath = "/userProperty/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserProperty>> UserPropertyDependentsAsync (long? masterid)
        {
             ApiResponse<List<UserProperty>> localVarResponse = await UserPropertyDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserPropertyDependents");

            var localVarPath = "/userProperty/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves an entity of UserProperty type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserProperty</returns>
        public UserProperty UserPropertyItem (long? id)
        {
             ApiResponse<UserProperty> localVarResponse = UserPropertyItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserProperty type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserProperty</returns>
        public ApiResponse< UserProperty > UserPropertyItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserPropertyItem");

            var localVarPath = "/userProperty/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProperty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProperty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProperty)));
        }

        /// <summary>
        ///  Retrieves an entity of UserProperty type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserProperty</returns>
        public async System.Threading.Tasks.Task<UserProperty> UserPropertyItemAsync (long? id)
        {
             ApiResponse<UserProperty> localVarResponse = await UserPropertyItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserProperty type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserProperty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProperty>> UserPropertyItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserPropertyItem");

            var localVarPath = "/userProperty/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProperty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProperty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProperty)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserProperty type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        public List<UserProperty> UserPropertyItems (List<long?> ids)
        {
             ApiResponse<List<UserProperty>> localVarResponse = UserPropertyItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserProperty type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        public ApiResponse< List<UserProperty> > UserPropertyItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserPropertyItems");

            var localVarPath = "/userProperty/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserProperty type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserProperty>> UserPropertyItemsAsync (List<long?> ids)
        {
             ApiResponse<List<UserProperty>> localVarResponse = await UserPropertyItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserProperty type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserPropertyItems");

            var localVarPath = "/userProperty/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserProperty&gt;</returns>
        public List<UserProperty> UserPropertyLDependents (List<long?> masterids)
        {
             ApiResponse<List<UserProperty>> localVarResponse = UserPropertyLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserProperty&gt;</returns>
        public ApiResponse< List<UserProperty> > UserPropertyLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserPropertyLDependents");

            var localVarPath = "/userProperty/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserProperty&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserProperty>> UserPropertyLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<UserProperty>> localVarResponse = await UserPropertyLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserProperty type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserProperty&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserProperty>>> UserPropertyLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserPropertyLDependents");

            var localVarPath = "/userProperty/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPropertyLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserProperty>)));
        }

        /// <summary>
        ///  Retrieves an entity of UserSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserSession</returns>
        public UserSession UserSessionItem (long? id)
        {
             ApiResponse<UserSession> localVarResponse = UserSessionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserSession</returns>
        public ApiResponse< UserSession > UserSessionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserSessionItem");

            var localVarPath = "/userSession/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSession)));
        }

        /// <summary>
        ///  Retrieves an entity of UserSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserSession</returns>
        public async System.Threading.Tasks.Task<UserSession> UserSessionItemAsync (long? id)
        {
             ApiResponse<UserSession> localVarResponse = await UserSessionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSession>> UserSessionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserSessionItem");

            var localVarPath = "/userSession/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSession)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserSession&gt;</returns>
        public List<UserSession> UserSessionItems (List<long?> ids)
        {
             ApiResponse<List<UserSession>> localVarResponse = UserSessionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserSession&gt;</returns>
        public ApiResponse< List<UserSession> > UserSessionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserSessionItems");

            var localVarPath = "/userSession/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSession>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSession>> UserSessionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<UserSession>> localVarResponse = await UserSessionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSession>>> UserSessionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserSessionItems");

            var localVarPath = "/userSession/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSession>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        public List<UserSessionStats> UserSessionStatsDependents (long? masterid)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = UserSessionStatsDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        public ApiResponse< List<UserSessionStats> > UserSessionStatsDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserSessionStatsDependents");

            var localVarPath = "/userSessionStats/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsDependentsAsync (long? masterid)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = await UserSessionStatsDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling UsersApi->UserSessionStatsDependents");

            var localVarPath = "/userSessionStats/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves an entity of UserSessionStats type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserSessionStats</returns>
        public UserSessionStats UserSessionStatsItem (long? id)
        {
             ApiResponse<UserSessionStats> localVarResponse = UserSessionStatsItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserSessionStats type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserSessionStats</returns>
        public ApiResponse< UserSessionStats > UserSessionStatsItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserSessionStatsItem");

            var localVarPath = "/userSessionStats/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSessionStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSessionStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSessionStats)));
        }

        /// <summary>
        ///  Retrieves an entity of UserSessionStats type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserSessionStats</returns>
        public async System.Threading.Tasks.Task<UserSessionStats> UserSessionStatsItemAsync (long? id)
        {
             ApiResponse<UserSessionStats> localVarResponse = await UserSessionStatsItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserSessionStats type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserSessionStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSessionStats>> UserSessionStatsItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UserSessionStatsItem");

            var localVarPath = "/userSessionStats/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSessionStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSessionStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSessionStats)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSessionStats type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        public List<UserSessionStats> UserSessionStatsItems (List<long?> ids)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = UserSessionStatsItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSessionStats type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        public ApiResponse< List<UserSessionStats> > UserSessionStatsItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserSessionStatsItems");

            var localVarPath = "/userSessionStats/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of UserSessionStats type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsItemsAsync (List<long?> ids)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = await UserSessionStatsItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserSessionStats type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UsersApi->UserSessionStatsItems");

            var localVarPath = "/userSessionStats/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        public List<UserSessionStats> UserSessionStatsLDependents (List<long?> masterids)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = UserSessionStatsLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        public ApiResponse< List<UserSessionStats> > UserSessionStatsLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserSessionStatsLDependents");

            var localVarPath = "/userSessionStats/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = await UserSessionStatsLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling UsersApi->UserSessionStatsLDependents");

            var localVarPath = "/userSessionStats/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserSessionStats&gt;</returns>
        public List<UserSessionStats> UserSessionStatsList ()
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = UserSessionStatsListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserSessionStats&gt;</returns>
        public ApiResponse< List<UserSessionStats> > UserSessionStatsListWithHttpInfo ()
        {

            var localVarPath = "/userSessionStats/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserSessionStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSessionStats>> UserSessionStatsListAsync ()
        {
             ApiResponse<List<UserSessionStats>> localVarResponse = await UserSessionStatsListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserSessionStats type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserSessionStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSessionStats>>> UserSessionStatsListAsyncWithHttpInfo ()
        {

            var localVarPath = "/userSessionStats/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSessionStatsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSessionStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserSessionStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSessionStats>)));
        }

        /// <summary>
        ///  Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserSuggest (string t, int? l)
        {
             ApiResponse<List<User>> localVarResponse = UserSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > UserSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling UsersApi->UserSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling UsersApi->UserSuggest");

            var localVarPath = "/user/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserSuggestAsync (string t, int? l)
        {
             ApiResponse<List<User>> localVarResponse = await UserSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of User type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling UsersApi->UserSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling UsersApi->UserSuggest");

            var localVarPath = "/user/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

    }
}
