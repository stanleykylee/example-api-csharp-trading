/* 
 * Tradovate API
 *
 * # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/_*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPricesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the playback speed of a Market Replay session.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse ChangeSpeed (ChangeSpeed body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the playback speed of a Market Replay session.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> ChangeSpeedWithHttpInfo (ChangeSpeed body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CheckReplaySessionResponse</returns>
        CheckReplaySessionResponse CheckReplaySession (CheckReplaySession body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CheckReplaySessionResponse</returns>
        ApiResponse<CheckReplaySessionResponse> CheckReplaySessionWithHttpInfo (CheckReplaySession body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse InitializeClock (InitializeClock body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> InitializeClockWithHttpInfo (InitializeClock body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the playback speed of a Market Replay session.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> ChangeSpeedAsync (ChangeSpeed body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Change the playback speed of a Market Replay session.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> ChangeSpeedAsyncWithHttpInfo (ChangeSpeed body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CheckReplaySessionResponse</returns>
        System.Threading.Tasks.Task<CheckReplaySessionResponse> CheckReplaySessionAsync (CheckReplaySession body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CheckReplaySessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckReplaySessionResponse>> CheckReplaySessionAsyncWithHttpInfo (CheckReplaySession body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> InitializeClockAsync (InitializeClock body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> InitializeClockAsyncWithHttpInfo (InitializeClock body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PricesApi : IPricesApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi(String basePath)
        {
            this.Configuration = new Tradovate.Services.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// </summary>
        /// <returns></returns>
        public PricesApi()
        {
            this.Configuration = Tradovate.Services.Client.Configuration.Default;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricesApi(Tradovate.Services.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tradovate.Services.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradovate.Services.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  ### Change the playback speed of a Market Replay session.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse ChangeSpeed (ChangeSpeed body)
        {
             ApiResponse<SimpleResponse> localVarResponse = ChangeSpeedWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Change the playback speed of a Market Replay session.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public ApiResponse< SimpleResponse > ChangeSpeedWithHttpInfo (ChangeSpeed body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->ChangeSpeed");

            var localVarPath = "/replay/changespeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeSpeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  ### Change the playback speed of a Market Replay session.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> ChangeSpeedAsync (ChangeSpeed body)
        {
             ApiResponse<SimpleResponse> localVarResponse = await ChangeSpeedAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Change the playback speed of a Market Replay session.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> ChangeSpeedAsyncWithHttpInfo (ChangeSpeed body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->ChangeSpeed");

            var localVarPath = "/replay/changespeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeSpeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CheckReplaySessionResponse</returns>
        public CheckReplaySessionResponse CheckReplaySession (CheckReplaySession body)
        {
             ApiResponse<CheckReplaySessionResponse> localVarResponse = CheckReplaySessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CheckReplaySessionResponse</returns>
        public ApiResponse< CheckReplaySessionResponse > CheckReplaySessionWithHttpInfo (CheckReplaySession body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->CheckReplaySession");

            var localVarPath = "/replay/checkreplaysession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckReplaySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckReplaySessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckReplaySessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckReplaySessionResponse)));
        }

        /// <summary>
        ///  ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CheckReplaySessionResponse</returns>
        public async System.Threading.Tasks.Task<CheckReplaySessionResponse> CheckReplaySessionAsync (CheckReplaySession body)
        {
             ApiResponse<CheckReplaySessionResponse> localVarResponse = await CheckReplaySessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user&#x27;s entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen &#x3D; function() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  //JSON string for midnight April 30th 2018 const startTimestamp &#x3D; new Date(&#x27;2018-04-30&#x27;).toJSON() myMarketReplaySocket.send(&#x60;replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}&#x60;)  //listen for response myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1)) //chop off leading &#x27;frame&#x27; char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: &#x27;OK&#x27; } }]     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1)  { //id of our sent message is 1, response&#x27;s &#x60;i&#x60; field will be 1.                 console.log(d) //&#x3D;&gt; { checkStatus: &#x27;OK&#x27; }                 //if the status is OK we can send the initializeClock message             }         })     }  }  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CheckReplaySessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckReplaySessionResponse>> CheckReplaySessionAsyncWithHttpInfo (CheckReplaySession body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->CheckReplaySession");

            var localVarPath = "/replay/checkreplaysession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckReplaySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckReplaySessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckReplaySessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckReplaySessionResponse)));
        }

        /// <summary>
        ///  ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse InitializeClock (InitializeClock body)
        {
             ApiResponse<SimpleResponse> localVarResponse = InitializeClockWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public ApiResponse< SimpleResponse > InitializeClockWithHttpInfo (InitializeClock body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->InitializeClock");

            var localVarPath = "/replay/initializeclock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitializeClock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

        /// <summary>
        ///  ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> InitializeClockAsync (InitializeClock body)
        {
             ApiResponse<SimpleResponse> localVarResponse = await InitializeClockAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. &#x60;&#x60;&#x60;js  const URL &#x3D; &#x27;wss://replay.tradovateapi.com/v1/websocket&#x27;  const myMarketReplaySocket &#x3D; new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen &#x3D; function onOpen() {     myMarketReplaySocket.send(&#x60;authorize\\n0\\n\\n${accessToken}&#x60;) })  const requestBody &#x3D; {     startTimestamp: new Date(&#x27;2018-04-30&#x27;).toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(&#x60;replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}&#x60;)  myMarketReplaySocket.addEventListener(&#x27;message&#x27;, msg &#x3D;&gt; {     const datas &#x3D; JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) &#x3D;&gt; {             if(i &amp;&amp; i &#x3D;&#x3D;&#x3D; 1) { //sent id is 1, response id will be 1                 console.log(d) //&#x3D;&gt; { ok: true }             }         })     } })  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> InitializeClockAsyncWithHttpInfo (InitializeClock body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PricesApi->InitializeClock");

            var localVarPath = "/replay/initializeclock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitializeClock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleResponse)));
        }

    }
}
