/* 
 * Tradovate API
 *
 * # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/_*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IContractLibraryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to ContractMaturity entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> ContractDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to ContractMaturity entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> ContractDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Contract</returns>
        Contract ContractFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ContractGroup</returns>
        ContractGroup ContractGroupFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of ContractGroup</returns>
        ApiResponse<ContractGroup> ContractGroupFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractGroup</returns>
        ContractGroup ContractGroupItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractGroup</returns>
        ApiResponse<ContractGroup> ContractGroupItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractGroup type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        List<ContractGroup> ContractGroupItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractGroup type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        ApiResponse<List<ContractGroup>> ContractGroupItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractGroup type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        List<ContractGroup> ContractGroupList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractGroup type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        ApiResponse<List<ContractGroup>> ContractGroupListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        List<ContractGroup> ContractGroupSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        ApiResponse<List<ContractGroup>> ContractGroupSuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Contract</returns>
        Contract ContractItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Contract type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> ContractItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Contract type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> ContractItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> ContractLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> ContractLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        List<ContractMaturity> ContractMaturityDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        ApiResponse<List<ContractMaturity>> ContractMaturityDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMaturity type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractMaturity</returns>
        ContractMaturity ContractMaturityItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMaturity type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractMaturity</returns>
        ApiResponse<ContractMaturity> ContractMaturityItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMaturity type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        List<ContractMaturity> ContractMaturityItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMaturity type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        ApiResponse<List<ContractMaturity>> ContractMaturityItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        List<ContractMaturity> ContractMaturityLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        ApiResponse<List<ContractMaturity>> ContractMaturityLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> ContractSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> ContractSuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Currency</returns>
        Currency CurrencyFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Currency</returns>
        ApiResponse<Currency> CurrencyFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Currency</returns>
        Currency CurrencyItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Currency</returns>
        ApiResponse<Currency> CurrencyItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Currency type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> CurrencyItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Currency type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> CurrencyItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> CurrencyList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> CurrencyListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to Currency entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        List<CurrencyRate> CurrencyRateDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to Currency entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        ApiResponse<List<CurrencyRate>> CurrencyRateDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of CurrencyRate type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CurrencyRate</returns>
        CurrencyRate CurrencyRateItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of CurrencyRate type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CurrencyRate</returns>
        ApiResponse<CurrencyRate> CurrencyRateItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of CurrencyRate type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        List<CurrencyRate> CurrencyRateItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of CurrencyRate type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        ApiResponse<List<CurrencyRate>> CurrencyRateItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        List<CurrencyRate> CurrencyRateLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        ApiResponse<List<CurrencyRate>> CurrencyRateLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        List<CurrencyRate> CurrencyRateList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        ApiResponse<List<CurrencyRate>> CurrencyRateListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> CurrencySuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> CurrencySuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Exchange</returns>
        Exchange ExchangeFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Exchange</returns>
        ApiResponse<Exchange> ExchangeFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Exchange</returns>
        Exchange ExchangeItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Exchange</returns>
        ApiResponse<Exchange> ExchangeItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Exchange type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Exchange&gt;</returns>
        List<Exchange> ExchangeItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Exchange type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        ApiResponse<List<Exchange>> ExchangeItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Exchange&gt;</returns>
        List<Exchange> ExchangeList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        ApiResponse<List<Exchange>> ExchangeListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Exchange&gt;</returns>
        List<Exchange> ExchangeSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        ApiResponse<List<Exchange>> ExchangeSuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the a product&#x27;s fee parameters.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProductFeeParamsResponse</returns>
        ProductFeeParamsResponse GetProductFeeParams (GetProductFeeParams body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the a product&#x27;s fee parameters.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProductFeeParamsResponse</returns>
        ApiResponse<ProductFeeParamsResponse> GetProductFeeParamsWithHttpInfo (GetProductFeeParams body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to Exchange entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to Exchange entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Product</returns>
        Product ProductFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Product</returns>
        Product ProductItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Product type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Product type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        List<ProductSession> ProductSessionDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        ApiResponse<List<ProductSession>> ProductSessionDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductSession</returns>
        ProductSession ProductSessionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductSession</returns>
        ApiResponse<ProductSession> ProductSessionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        List<ProductSession> ProductSessionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        ApiResponse<List<ProductSession>> ProductSessionItemsWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        List<ProductSession> ProductSessionLDependents (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        ApiResponse<List<ProductSession>> ProductSessionLDependentsWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductSuggest (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductSuggestWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request the best upcoming maturity date for a given contract.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollContractResponse</returns>
        RollContractResponse RollContract (RollContract body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request the best upcoming maturity date for a given contract.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollContractResponse</returns>
        ApiResponse<RollContractResponse> RollContractWithHttpInfo (RollContract body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollContractsResponse</returns>
        RollContractsResponse RollContracts (RollContracts body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollContractsResponse</returns>
        ApiResponse<RollContractsResponse> RollContractsWithHttpInfo (RollContracts body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SpreadDefinition type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SpreadDefinition</returns>
        SpreadDefinition SpreadDefinitionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SpreadDefinition type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SpreadDefinition</returns>
        ApiResponse<SpreadDefinition> SpreadDefinitionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SpreadDefinition type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;SpreadDefinition&gt;</returns>
        List<SpreadDefinition> SpreadDefinitionItems (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SpreadDefinition type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;SpreadDefinition&gt;</returns>
        ApiResponse<List<SpreadDefinition>> SpreadDefinitionItemsWithHttpInfo (List<long?> ids);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to ContractMaturity entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> ContractDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to ContractMaturity entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ContractGroup</returns>
        System.Threading.Tasks.Task<ContractGroup> ContractGroupFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (ContractGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractGroup>> ContractGroupFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractGroup</returns>
        System.Threading.Tasks.Task<ContractGroup> ContractGroupItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractGroup type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractGroup>> ContractGroupItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractGroup type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractGroup type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractGroup type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractGroup type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupSuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Contract type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Contract type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> ContractItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Contract type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> ContractLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMaturity type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractMaturity</returns>
        System.Threading.Tasks.Task<ContractMaturity> ContractMaturityItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMaturity type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractMaturity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractMaturity>> ContractMaturityItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMaturity type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMaturity type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> ContractSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractSuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Currency</returns>
        System.Threading.Tasks.Task<Currency> CurrencyFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currency>> CurrencyFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Currency</returns>
        System.Threading.Tasks.Task<Currency> CurrencyItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Currency type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currency>> CurrencyItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Currency type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        System.Threading.Tasks.Task<List<Currency>> CurrencyItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Currency type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencyItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        System.Threading.Tasks.Task<List<Currency>> CurrencyListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencyListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to Currency entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to Currency entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of CurrencyRate type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CurrencyRate</returns>
        System.Threading.Tasks.Task<CurrencyRate> CurrencyRateItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of CurrencyRate type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CurrencyRate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyRate>> CurrencyRateItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of CurrencyRate type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of CurrencyRate type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of CurrencyRate type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        System.Threading.Tasks.Task<List<Currency>> CurrencySuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencySuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Exchange</returns>
        System.Threading.Tasks.Task<Exchange> ExchangeFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        System.Threading.Tasks.Task<ApiResponse<Exchange>> ExchangeFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Exchange</returns>
        System.Threading.Tasks.Task<Exchange> ExchangeItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Exchange type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        System.Threading.Tasks.Task<ApiResponse<Exchange>> ExchangeItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Exchange type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        System.Threading.Tasks.Task<List<Exchange>> ExchangeItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Exchange type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        System.Threading.Tasks.Task<List<Exchange>> ExchangeListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        System.Threading.Tasks.Task<List<Exchange>> ExchangeSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeSuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the a product&#x27;s fee parameters.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProductFeeParamsResponse</returns>
        System.Threading.Tasks.Task<ProductFeeParamsResponse> GetProductFeeParamsAsync (GetProductFeeParams body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Query the a product&#x27;s fee parameters.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProductFeeParamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductFeeParamsResponse>> GetProductFeeParamsAsyncWithHttpInfo (GetProductFeeParams body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to Exchange entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to Exchange entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Product type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Product type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Product type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSession>> ProductSessionDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductSession</returns>
        System.Threading.Tasks.Task<ProductSession> ProductSessionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductSession type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSession>> ProductSessionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSession>> ProductSessionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductSession type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionItemsAsyncWithHttpInfo (List<long?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSession>> ProductSessionLDependentsAsync (List<long?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionLDependentsAsyncWithHttpInfo (List<long?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductSuggestAsync (string t, int? l);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductSuggestAsyncWithHttpInfo (string t, int? l);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request the best upcoming maturity date for a given contract.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollContractResponse</returns>
        System.Threading.Tasks.Task<RollContractResponse> RollContractAsync (RollContract body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Request the best upcoming maturity date for a given contract.
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollContractResponse>> RollContractAsyncWithHttpInfo (RollContract body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollContractsResponse</returns>
        System.Threading.Tasks.Task<RollContractsResponse> RollContractsAsync (RollContracts body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollContractsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollContractsResponse>> RollContractsAsyncWithHttpInfo (RollContracts body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SpreadDefinition type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SpreadDefinition</returns>
        System.Threading.Tasks.Task<SpreadDefinition> SpreadDefinitionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of SpreadDefinition type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SpreadDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpreadDefinition>> SpreadDefinitionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SpreadDefinition type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;SpreadDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<SpreadDefinition>> SpreadDefinitionItemsAsync (List<long?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of SpreadDefinition type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;SpreadDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SpreadDefinition>>> SpreadDefinitionItemsAsyncWithHttpInfo (List<long?> ids);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ContractLibraryApi : IContractLibraryApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractLibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractLibraryApi(String basePath)
        {
            this.Configuration = new Tradovate.Services.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractLibraryApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContractLibraryApi()
        {
            this.Configuration = Tradovate.Services.Client.Configuration.Default;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractLibraryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractLibraryApi(Tradovate.Services.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tradovate.Services.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradovate.Services.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to ContractMaturity entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> ContractDependents (long? masterid)
        {
             ApiResponse<List<Contract>> localVarResponse = ContractDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to ContractMaturity entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > ContractDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ContractDependents");

            var localVarPath = "/contract/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to ContractMaturity entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> ContractDependentsAsync (long? masterid)
        {
             ApiResponse<List<Contract>> localVarResponse = await ContractDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to ContractMaturity entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of ContractMaturity entity</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ContractDependents");

            var localVarPath = "/contract/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Contract</returns>
        public Contract ContractFind (string name)
        {
             ApiResponse<Contract> localVarResponse = ContractFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > ContractFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ContractFind");

            var localVarPath = "/contract/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractFindAsync (string name)
        {
             ApiResponse<Contract> localVarResponse = await ContractFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ContractFind");

            var localVarPath = "/contract/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ContractGroup</returns>
        public ContractGroup ContractGroupFind (string name)
        {
             ApiResponse<ContractGroup> localVarResponse = ContractGroupFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of ContractGroup</returns>
        public ApiResponse< ContractGroup > ContractGroupFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ContractGroupFind");

            var localVarPath = "/contractGroup/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractGroup)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ContractGroup</returns>
        public async System.Threading.Tasks.Task<ContractGroup> ContractGroupFindAsync (string name)
        {
             ApiResponse<ContractGroup> localVarResponse = await ContractGroupFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (ContractGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractGroup>> ContractGroupFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ContractGroupFind");

            var localVarPath = "/contractGroup/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractGroup)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractGroup</returns>
        public ContractGroup ContractGroupItem (long? id)
        {
             ApiResponse<ContractGroup> localVarResponse = ContractGroupItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractGroup</returns>
        public ApiResponse< ContractGroup > ContractGroupItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractGroupItem");

            var localVarPath = "/contractGroup/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractGroup)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractGroup</returns>
        public async System.Threading.Tasks.Task<ContractGroup> ContractGroupItemAsync (long? id)
        {
             ApiResponse<ContractGroup> localVarResponse = await ContractGroupItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ContractGroup type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractGroup>> ContractGroupItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractGroupItem");

            var localVarPath = "/contractGroup/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractGroup)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractGroup type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        public List<ContractGroup> ContractGroupItems (List<long?> ids)
        {
             ApiResponse<List<ContractGroup>> localVarResponse = ContractGroupItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractGroup type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        public ApiResponse< List<ContractGroup> > ContractGroupItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractGroupItems");

            var localVarPath = "/contractGroup/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractGroup type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupItemsAsync (List<long?> ids)
        {
             ApiResponse<List<ContractGroup>> localVarResponse = await ContractGroupItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ContractGroup type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractGroupItems");

            var localVarPath = "/contractGroup/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractGroup type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        public List<ContractGroup> ContractGroupList ()
        {
             ApiResponse<List<ContractGroup>> localVarResponse = ContractGroupListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContractGroup type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        public ApiResponse< List<ContractGroup> > ContractGroupListWithHttpInfo ()
        {

            var localVarPath = "/contractGroup/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractGroup type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupListAsync ()
        {
             ApiResponse<List<ContractGroup>> localVarResponse = await ContractGroupListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContractGroup type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupListAsyncWithHttpInfo ()
        {

            var localVarPath = "/contractGroup/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;ContractGroup&gt;</returns>
        public List<ContractGroup> ContractGroupSuggest (string t, int? l)
        {
             ApiResponse<List<ContractGroup>> localVarResponse = ContractGroupSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;ContractGroup&gt;</returns>
        public ApiResponse< List<ContractGroup> > ContractGroupSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ContractGroupSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ContractGroupSuggest");

            var localVarPath = "/contractGroup/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;ContractGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractGroup>> ContractGroupSuggestAsync (string t, int? l)
        {
             ApiResponse<List<ContractGroup>> localVarResponse = await ContractGroupSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractGroup>>> ContractGroupSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ContractGroupSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ContractGroupSuggest");

            var localVarPath = "/contractGroup/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractGroupSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractGroup>)));
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Contract</returns>
        public Contract ContractItem (long? id)
        {
             ApiResponse<Contract> localVarResponse = ContractItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > ContractItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractItem");

            var localVarPath = "/contract/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractItemAsync (long? id)
        {
             ApiResponse<Contract> localVarResponse = await ContractItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Contract type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractItem");

            var localVarPath = "/contract/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Contract type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> ContractItems (List<long?> ids)
        {
             ApiResponse<List<Contract>> localVarResponse = ContractItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Contract type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > ContractItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractItems");

            var localVarPath = "/contract/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Contract type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> ContractItemsAsync (List<long?> ids)
        {
             ApiResponse<List<Contract>> localVarResponse = await ContractItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Contract type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractItems");

            var localVarPath = "/contract/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> ContractLDependents (List<long?> masterids)
        {
             ApiResponse<List<Contract>> localVarResponse = ContractLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > ContractLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ContractLDependents");

            var localVarPath = "/contract/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> ContractLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<Contract>> localVarResponse = await ContractLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of ContractMaturity entities</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ContractLDependents");

            var localVarPath = "/contract/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        public List<ContractMaturity> ContractMaturityDependents (long? masterid)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = ContractMaturityDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        public ApiResponse< List<ContractMaturity> > ContractMaturityDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ContractMaturityDependents");

            var localVarPath = "/contractMaturity/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityDependentsAsync (long? masterid)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = await ContractMaturityDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ContractMaturityDependents");

            var localVarPath = "/contractMaturity/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractMaturity type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractMaturity</returns>
        public ContractMaturity ContractMaturityItem (long? id)
        {
             ApiResponse<ContractMaturity> localVarResponse = ContractMaturityItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ContractMaturity type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractMaturity</returns>
        public ApiResponse< ContractMaturity > ContractMaturityItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractMaturityItem");

            var localVarPath = "/contractMaturity/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractMaturity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractMaturity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractMaturity)));
        }

        /// <summary>
        ///  Retrieves an entity of ContractMaturity type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractMaturity</returns>
        public async System.Threading.Tasks.Task<ContractMaturity> ContractMaturityItemAsync (long? id)
        {
             ApiResponse<ContractMaturity> localVarResponse = await ContractMaturityItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ContractMaturity type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractMaturity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractMaturity>> ContractMaturityItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ContractMaturityItem");

            var localVarPath = "/contractMaturity/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractMaturity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractMaturity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractMaturity)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMaturity type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        public List<ContractMaturity> ContractMaturityItems (List<long?> ids)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = ContractMaturityItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMaturity type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        public ApiResponse< List<ContractMaturity> > ContractMaturityItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractMaturityItems");

            var localVarPath = "/contractMaturity/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMaturity type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityItemsAsync (List<long?> ids)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = await ContractMaturityItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMaturity type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ContractMaturityItems");

            var localVarPath = "/contractMaturity/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ContractMaturity&gt;</returns>
        public List<ContractMaturity> ContractMaturityLDependents (List<long?> masterids)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = ContractMaturityLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ContractMaturity&gt;</returns>
        public ApiResponse< List<ContractMaturity> > ContractMaturityLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ContractMaturityLDependents");

            var localVarPath = "/contractMaturity/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ContractMaturity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMaturity>> ContractMaturityLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<ContractMaturity>> localVarResponse = await ContractMaturityLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContractMaturity type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMaturity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMaturity>>> ContractMaturityLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ContractMaturityLDependents");

            var localVarPath = "/contractMaturity/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractMaturityLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMaturity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractMaturity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMaturity>)));
        }

        /// <summary>
        ///  Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> ContractSuggest (string t, int? l)
        {
             ApiResponse<List<Contract>> localVarResponse = ContractSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > ContractSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ContractSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ContractSuggest");

            var localVarPath = "/contract/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> ContractSuggestAsync (string t, int? l)
        {
             ApiResponse<List<Contract>> localVarResponse = await ContractSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ContractSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ContractSuggest");

            var localVarPath = "/contract/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Currency</returns>
        public Currency CurrencyFind (string name)
        {
             ApiResponse<Currency> localVarResponse = CurrencyFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Currency</returns>
        public ApiResponse< Currency > CurrencyFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->CurrencyFind");

            var localVarPath = "/currency/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Currency</returns>
        public async System.Threading.Tasks.Task<Currency> CurrencyFindAsync (string name)
        {
             ApiResponse<Currency> localVarResponse = await CurrencyFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Currency>> CurrencyFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->CurrencyFind");

            var localVarPath = "/currency/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Currency</returns>
        public Currency CurrencyItem (long? id)
        {
             ApiResponse<Currency> localVarResponse = CurrencyItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Currency</returns>
        public ApiResponse< Currency > CurrencyItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->CurrencyItem");

            var localVarPath = "/currency/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Currency</returns>
        public async System.Threading.Tasks.Task<Currency> CurrencyItemAsync (long? id)
        {
             ApiResponse<Currency> localVarResponse = await CurrencyItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Currency type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Currency>> CurrencyItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->CurrencyItem");

            var localVarPath = "/currency/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Currency type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> CurrencyItems (List<long?> ids)
        {
             ApiResponse<List<Currency>> localVarResponse = CurrencyItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Currency type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse< List<Currency> > CurrencyItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->CurrencyItems");

            var localVarPath = "/currency/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Currency type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async System.Threading.Tasks.Task<List<Currency>> CurrencyItemsAsync (List<long?> ids)
        {
             ApiResponse<List<Currency>> localVarResponse = await CurrencyItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Currency type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencyItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->CurrencyItems");

            var localVarPath = "/currency/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves all entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> CurrencyList ()
        {
             ApiResponse<List<Currency>> localVarResponse = CurrencyListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse< List<Currency> > CurrencyListWithHttpInfo ()
        {

            var localVarPath = "/currency/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves all entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async System.Threading.Tasks.Task<List<Currency>> CurrencyListAsync ()
        {
             ApiResponse<List<Currency>> localVarResponse = await CurrencyListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencyListAsyncWithHttpInfo ()
        {

            var localVarPath = "/currency/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to Currency entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        public List<CurrencyRate> CurrencyRateDependents (long? masterid)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = CurrencyRateDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to Currency entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        public ApiResponse< List<CurrencyRate> > CurrencyRateDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->CurrencyRateDependents");

            var localVarPath = "/currencyRate/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to Currency entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateDependentsAsync (long? masterid)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = await CurrencyRateDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to Currency entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Currency entity</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->CurrencyRateDependents");

            var localVarPath = "/currencyRate/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves an entity of CurrencyRate type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CurrencyRate</returns>
        public CurrencyRate CurrencyRateItem (long? id)
        {
             ApiResponse<CurrencyRate> localVarResponse = CurrencyRateItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of CurrencyRate type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CurrencyRate</returns>
        public ApiResponse< CurrencyRate > CurrencyRateItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->CurrencyRateItem");

            var localVarPath = "/currencyRate/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrencyRate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CurrencyRate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrencyRate)));
        }

        /// <summary>
        ///  Retrieves an entity of CurrencyRate type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CurrencyRate</returns>
        public async System.Threading.Tasks.Task<CurrencyRate> CurrencyRateItemAsync (long? id)
        {
             ApiResponse<CurrencyRate> localVarResponse = await CurrencyRateItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of CurrencyRate type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CurrencyRate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrencyRate>> CurrencyRateItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->CurrencyRateItem");

            var localVarPath = "/currencyRate/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrencyRate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CurrencyRate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrencyRate)));
        }

        /// <summary>
        ///  Retrieves multiple entities of CurrencyRate type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        public List<CurrencyRate> CurrencyRateItems (List<long?> ids)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = CurrencyRateItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of CurrencyRate type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        public ApiResponse< List<CurrencyRate> > CurrencyRateItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->CurrencyRateItems");

            var localVarPath = "/currencyRate/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of CurrencyRate type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateItemsAsync (List<long?> ids)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = await CurrencyRateItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of CurrencyRate type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->CurrencyRateItems");

            var localVarPath = "/currencyRate/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        public List<CurrencyRate> CurrencyRateLDependents (List<long?> masterids)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = CurrencyRateLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        public ApiResponse< List<CurrencyRate> > CurrencyRateLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->CurrencyRateLDependents");

            var localVarPath = "/currencyRate/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = await CurrencyRateLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Currency entities</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->CurrencyRateLDependents");

            var localVarPath = "/currencyRate/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyRate&gt;</returns>
        public List<CurrencyRate> CurrencyRateList ()
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = CurrencyRateListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyRate&gt;</returns>
        public ApiResponse< List<CurrencyRate> > CurrencyRateListWithHttpInfo ()
        {

            var localVarPath = "/currencyRate/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyRate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CurrencyRate>> CurrencyRateListAsync ()
        {
             ApiResponse<List<CurrencyRate>> localVarResponse = await CurrencyRateListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of CurrencyRate type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyRate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyRate>>> CurrencyRateListAsyncWithHttpInfo ()
        {

            var localVarPath = "/currencyRate/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyRateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyRate>)));
        }

        /// <summary>
        ///  Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> CurrencySuggest (string t, int? l)
        {
             ApiResponse<List<Currency>> localVarResponse = CurrencySuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse< List<Currency> > CurrencySuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->CurrencySuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->CurrencySuggest");

            var localVarPath = "/currency/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencySuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async System.Threading.Tasks.Task<List<Currency>> CurrencySuggestAsync (string t, int? l)
        {
             ApiResponse<List<Currency>> localVarResponse = await CurrencySuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Currency>>> CurrencySuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->CurrencySuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->CurrencySuggest");

            var localVarPath = "/currency/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencySuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Exchange</returns>
        public Exchange ExchangeFind (string name)
        {
             ApiResponse<Exchange> localVarResponse = ExchangeFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Exchange</returns>
        public ApiResponse< Exchange > ExchangeFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ExchangeFind");

            var localVarPath = "/exchange/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Exchange>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Exchange) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Exchange)));
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Exchange</returns>
        public async System.Threading.Tasks.Task<Exchange> ExchangeFindAsync (string name)
        {
             ApiResponse<Exchange> localVarResponse = await ExchangeFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Exchange>> ExchangeFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ExchangeFind");

            var localVarPath = "/exchange/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Exchange>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Exchange) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Exchange)));
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Exchange</returns>
        public Exchange ExchangeItem (long? id)
        {
             ApiResponse<Exchange> localVarResponse = ExchangeItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Exchange</returns>
        public ApiResponse< Exchange > ExchangeItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ExchangeItem");

            var localVarPath = "/exchange/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Exchange>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Exchange) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Exchange)));
        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Exchange</returns>
        public async System.Threading.Tasks.Task<Exchange> ExchangeItemAsync (long? id)
        {
             ApiResponse<Exchange> localVarResponse = await ExchangeItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Exchange type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Exchange>> ExchangeItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ExchangeItem");

            var localVarPath = "/exchange/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Exchange>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Exchange) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Exchange)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Exchange type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Exchange&gt;</returns>
        public List<Exchange> ExchangeItems (List<long?> ids)
        {
             ApiResponse<List<Exchange>> localVarResponse = ExchangeItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Exchange type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        public ApiResponse< List<Exchange> > ExchangeItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ExchangeItems");

            var localVarPath = "/exchange/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Exchange type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        public async System.Threading.Tasks.Task<List<Exchange>> ExchangeItemsAsync (List<long?> ids)
        {
             ApiResponse<List<Exchange>> localVarResponse = await ExchangeItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Exchange type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ExchangeItems");

            var localVarPath = "/exchange/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  Retrieves all entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Exchange&gt;</returns>
        public List<Exchange> ExchangeList ()
        {
             ApiResponse<List<Exchange>> localVarResponse = ExchangeListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        public ApiResponse< List<Exchange> > ExchangeListWithHttpInfo ()
        {

            var localVarPath = "/exchange/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  Retrieves all entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        public async System.Threading.Tasks.Task<List<Exchange>> ExchangeListAsync ()
        {
             ApiResponse<List<Exchange>> localVarResponse = await ExchangeListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeListAsyncWithHttpInfo ()
        {

            var localVarPath = "/exchange/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Exchange&gt;</returns>
        public List<Exchange> ExchangeSuggest (string t, int? l)
        {
             ApiResponse<List<Exchange>> localVarResponse = ExchangeSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Exchange&gt;</returns>
        public ApiResponse< List<Exchange> > ExchangeSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ExchangeSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ExchangeSuggest");

            var localVarPath = "/exchange/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Exchange&gt;</returns>
        public async System.Threading.Tasks.Task<List<Exchange>> ExchangeSuggestAsync (string t, int? l)
        {
             ApiResponse<List<Exchange>> localVarResponse = await ExchangeSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Exchange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Exchange>>> ExchangeSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ExchangeSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ExchangeSuggest");

            var localVarPath = "/exchange/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExchangeSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Exchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Exchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Exchange>)));
        }

        /// <summary>
        ///  ### Query the a product&#x27;s fee parameters.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProductFeeParamsResponse</returns>
        public ProductFeeParamsResponse GetProductFeeParams (GetProductFeeParams body)
        {
             ApiResponse<ProductFeeParamsResponse> localVarResponse = GetProductFeeParamsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Query the a product&#x27;s fee parameters.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProductFeeParamsResponse</returns>
        public ApiResponse< ProductFeeParamsResponse > GetProductFeeParamsWithHttpInfo (GetProductFeeParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->GetProductFeeParams");

            var localVarPath = "/contract/getproductfeeparams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductFeeParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductFeeParamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductFeeParamsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductFeeParamsResponse)));
        }

        /// <summary>
        ///  ### Query the a product&#x27;s fee parameters.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProductFeeParamsResponse</returns>
        public async System.Threading.Tasks.Task<ProductFeeParamsResponse> GetProductFeeParamsAsync (GetProductFeeParams body)
        {
             ApiResponse<ProductFeeParamsResponse> localVarResponse = await GetProductFeeParamsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Query the a product&#x27;s fee parameters.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProductFeeParamsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductFeeParamsResponse>> GetProductFeeParamsAsyncWithHttpInfo (GetProductFeeParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->GetProductFeeParams");

            var localVarPath = "/contract/getproductfeeparams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductFeeParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductFeeParamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductFeeParamsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductFeeParamsResponse)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to Exchange entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductDependents (long? masterid)
        {
             ApiResponse<List<Product>> localVarResponse = ProductDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to Exchange entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ProductDependents");

            var localVarPath = "/product/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to Exchange entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductDependentsAsync (long? masterid)
        {
             ApiResponse<List<Product>> localVarResponse = await ProductDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Product type related to Exchange entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Exchange entity</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ProductDependents");

            var localVarPath = "/product/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Product</returns>
        public Product ProductFind (string name)
        {
             ApiResponse<Product> localVarResponse = ProductFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ProductFind");

            var localVarPath = "/product/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductFindAsync (string name)
        {
             ApiResponse<Product> localVarResponse = await ProductFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Product type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ContractLibraryApi->ProductFind");

            var localVarPath = "/product/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Product</returns>
        public Product ProductItem (long? id)
        {
             ApiResponse<Product> localVarResponse = ProductItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ProductItem");

            var localVarPath = "/product/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  Retrieves an entity of Product type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductItemAsync (long? id)
        {
             ApiResponse<Product> localVarResponse = await ProductItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Product type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ProductItem");

            var localVarPath = "/product/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Product type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductItems (List<long?> ids)
        {
             ApiResponse<List<Product>> localVarResponse = ProductItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Product type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ProductItems");

            var localVarPath = "/product/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Product type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductItemsAsync (List<long?> ids)
        {
             ApiResponse<List<Product>> localVarResponse = await ProductItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Product type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ProductItems");

            var localVarPath = "/product/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductLDependents (List<long?> masterids)
        {
             ApiResponse<List<Product>> localVarResponse = ProductLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ProductLDependents");

            var localVarPath = "/product/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<Product>> localVarResponse = await ProductLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Product type related to multiple entities of Exchange type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Exchange entities</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ProductLDependents");

            var localVarPath = "/product/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductList ()
        {
             ApiResponse<List<Product>> localVarResponse = ProductListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductListWithHttpInfo ()
        {

            var localVarPath = "/product/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductListAsync ()
        {
             ApiResponse<List<Product>> localVarResponse = await ProductListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductListAsyncWithHttpInfo ()
        {

            var localVarPath = "/product/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        public List<ProductSession> ProductSessionDependents (long? masterid)
        {
             ApiResponse<List<ProductSession>> localVarResponse = ProductSessionDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        public ApiResponse< List<ProductSession> > ProductSessionDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ProductSessionDependents");

            var localVarPath = "/productSession/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSession>> ProductSessionDependentsAsync (long? masterid)
        {
             ApiResponse<List<ProductSession>> localVarResponse = await ProductSessionDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ContractLibraryApi->ProductSessionDependents");

            var localVarPath = "/productSession/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves an entity of ProductSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductSession</returns>
        public ProductSession ProductSessionItem (long? id)
        {
             ApiResponse<ProductSession> localVarResponse = ProductSessionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ProductSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductSession</returns>
        public ApiResponse< ProductSession > ProductSessionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ProductSessionItem");

            var localVarPath = "/productSession/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSession)));
        }

        /// <summary>
        ///  Retrieves an entity of ProductSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductSession</returns>
        public async System.Threading.Tasks.Task<ProductSession> ProductSessionItemAsync (long? id)
        {
             ApiResponse<ProductSession> localVarResponse = await ProductSessionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ProductSession type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSession>> ProductSessionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->ProductSessionItem");

            var localVarPath = "/productSession/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSession)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        public List<ProductSession> ProductSessionItems (List<long?> ids)
        {
             ApiResponse<List<ProductSession>> localVarResponse = ProductSessionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        public ApiResponse< List<ProductSession> > ProductSessionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ProductSessionItems");

            var localVarPath = "/productSession/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSession>> ProductSessionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<ProductSession>> localVarResponse = await ProductSessionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ProductSession type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->ProductSessionItems");

            var localVarPath = "/productSession/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ProductSession&gt;</returns>
        public List<ProductSession> ProductSessionLDependents (List<long?> masterids)
        {
             ApiResponse<List<ProductSession>> localVarResponse = ProductSessionLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ProductSession&gt;</returns>
        public ApiResponse< List<ProductSession> > ProductSessionLDependentsWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ProductSessionLDependents");

            var localVarPath = "/productSession/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ProductSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSession>> ProductSessionLDependentsAsync (List<long?> masterids)
        {
             ApiResponse<List<ProductSession>> localVarResponse = await ProductSessionLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ProductSession type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSession>>> ProductSessionLDependentsAsyncWithHttpInfo (List<long?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ContractLibraryApi->ProductSessionLDependents");

            var localVarPath = "/productSession/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSessionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSession>)));
        }

        /// <summary>
        ///  Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductSuggest (string t, int? l)
        {
             ApiResponse<List<Product>> localVarResponse = ProductSuggestWithHttpInfo(t, l);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductSuggestWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ProductSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ProductSuggest");

            var localVarPath = "/product/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductSuggestAsync (string t, int? l)
        {
             ApiResponse<List<Product>> localVarResponse = await ProductSuggestAsyncWithHttpInfo(t, l);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="t">Text</param>
        /// <param name="l">Max number of entities</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductSuggestAsyncWithHttpInfo (string t, int? l)
        {
            // verify the required parameter 't' is set
            if (t == null)
                throw new ApiException(400, "Missing required parameter 't' when calling ContractLibraryApi->ProductSuggest");
            // verify the required parameter 'l' is set
            if (l == null)
                throw new ApiException(400, "Missing required parameter 'l' when calling ContractLibraryApi->ProductSuggest");

            var localVarPath = "/product/suggest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter
            if (l != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "l", l)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductSuggest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  ### Request the best upcoming maturity date for a given contract.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollContractResponse</returns>
        public RollContractResponse RollContract (RollContract body)
        {
             ApiResponse<RollContractResponse> localVarResponse = RollContractWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Request the best upcoming maturity date for a given contract.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollContractResponse</returns>
        public ApiResponse< RollContractResponse > RollContractWithHttpInfo (RollContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->RollContract");

            var localVarPath = "/contract/rollcontract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RollContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollContractResponse)));
        }

        /// <summary>
        ///  ### Request the best upcoming maturity date for a given contract.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollContractResponse</returns>
        public async System.Threading.Tasks.Task<RollContractResponse> RollContractAsync (RollContract body)
        {
             ApiResponse<RollContractResponse> localVarResponse = await RollContractAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ### Request the best upcoming maturity date for a given contract.
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RollContractResponse>> RollContractAsyncWithHttpInfo (RollContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->RollContract");

            var localVarPath = "/contract/rollcontract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RollContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollContractResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollContractsResponse</returns>
        public RollContractsResponse RollContracts (RollContracts body)
        {
             ApiResponse<RollContractsResponse> localVarResponse = RollContractsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollContractsResponse</returns>
        public ApiResponse< RollContractsResponse > RollContractsWithHttpInfo (RollContracts body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->RollContracts");

            var localVarPath = "/contract/rollcontracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RollContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollContractsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollContractsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollContractsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollContractsResponse</returns>
        public async System.Threading.Tasks.Task<RollContractsResponse> RollContractsAsync (RollContracts body)
        {
             ApiResponse<RollContractsResponse> localVarResponse = await RollContractsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollContractsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RollContractsResponse>> RollContractsAsyncWithHttpInfo (RollContracts body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractLibraryApi->RollContracts");

            var localVarPath = "/contract/rollcontracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RollContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollContractsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollContractsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollContractsResponse)));
        }

        /// <summary>
        ///  Retrieves an entity of SpreadDefinition type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SpreadDefinition</returns>
        public SpreadDefinition SpreadDefinitionItem (long? id)
        {
             ApiResponse<SpreadDefinition> localVarResponse = SpreadDefinitionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of SpreadDefinition type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SpreadDefinition</returns>
        public ApiResponse< SpreadDefinition > SpreadDefinitionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->SpreadDefinitionItem");

            var localVarPath = "/spreadDefinition/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpreadDefinitionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpreadDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpreadDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpreadDefinition)));
        }

        /// <summary>
        ///  Retrieves an entity of SpreadDefinition type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SpreadDefinition</returns>
        public async System.Threading.Tasks.Task<SpreadDefinition> SpreadDefinitionItemAsync (long? id)
        {
             ApiResponse<SpreadDefinition> localVarResponse = await SpreadDefinitionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of SpreadDefinition type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SpreadDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SpreadDefinition>> SpreadDefinitionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContractLibraryApi->SpreadDefinitionItem");

            var localVarPath = "/spreadDefinition/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpreadDefinitionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpreadDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpreadDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpreadDefinition)));
        }

        /// <summary>
        ///  Retrieves multiple entities of SpreadDefinition type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;SpreadDefinition&gt;</returns>
        public List<SpreadDefinition> SpreadDefinitionItems (List<long?> ids)
        {
             ApiResponse<List<SpreadDefinition>> localVarResponse = SpreadDefinitionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of SpreadDefinition type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;SpreadDefinition&gt;</returns>
        public ApiResponse< List<SpreadDefinition> > SpreadDefinitionItemsWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->SpreadDefinitionItems");

            var localVarPath = "/spreadDefinition/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpreadDefinitionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SpreadDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SpreadDefinition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SpreadDefinition>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of SpreadDefinition type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;SpreadDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<SpreadDefinition>> SpreadDefinitionItemsAsync (List<long?> ids)
        {
             ApiResponse<List<SpreadDefinition>> localVarResponse = await SpreadDefinitionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of SpreadDefinition type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;SpreadDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SpreadDefinition>>> SpreadDefinitionItemsAsyncWithHttpInfo (List<long?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContractLibraryApi->SpreadDefinitionItems");

            var localVarPath = "/spreadDefinition/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpreadDefinitionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SpreadDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SpreadDefinition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SpreadDefinition>)));
        }

    }
}
